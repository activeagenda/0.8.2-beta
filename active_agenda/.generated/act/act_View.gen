<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

    /**CUSTOM_CODE|init**/

    //list of objects containing the field information
    $fields = unserialize('a:15:{s:8:"ActionID";O:9:"viewfield":16:{s:4:"name";s:8:"ActionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Action ID|Numerical ID to identify and track actions assigned within this application";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"RelatedModuleRecord";O:9:"viewfield":16:{s:4:"name";s:19:"RelatedModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Related Record|A combined field used to display the related module name and record ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"RelatedRecordDescription";O:9:"viewfield":16:{s:4:"name";s:24:"RelatedRecordDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record Description|A description of the related record based on a combination of field values assigned from within the related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Organization|The organization with primary responsibility for the assigned action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Person Accountable|The individual assigned primary accountability for the assigned action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Title";O:9:"viewfield":16:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Title|A concise title that describes the action";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ActionRequired";O:9:"viewfield":16:{s:4:"name";s:14:"ActionRequired";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Action Required|A comprehensive description of the action required";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EntryDate";O:9:"viewfield":16:{s:4:"name";s:9:"EntryDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Entry Date|An automatic entry of the date and time the action was entered into the system";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"AssignedDate";O:9:"viewfield":16:{s:4:"name";s:12:"AssignedDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Assigned Date|Date the action was originally assigned";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"DueDate";O:9:"viewfield":16:{s:4:"name";s:7:"DueDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Due Date|Date the action is projected to be completed";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"BeginDate";O:9:"viewfield":16:{s:4:"name";s:9:"BeginDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Begin Date|The date that activity to satisfy the action began";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"CompletionDate";O:9:"viewfield":16:{s:4:"name";s:14:"CompletionDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Completion Date|The date and time the action was completed";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"AssignedBy";O:9:"viewfield":16:{s:4:"name";s:10:"AssignedBy";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Assigned By|The name of the person assigning the action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ActionStatus";O:9:"viewfield":16:{s:4:"name";s:12:"ActionStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:36:"Status|Status of the assigned action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskImperatives";O:9:"viewfield":16:{s:4:"name";s:15:"RiskImperatives";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Risk Imperatives|A list of associated Risk Imperatives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'ActionID' => gettext("Action ID|Numerical ID to identify and track actions assigned within this application"),
   'RelatedModuleRecord' => gettext("Related Record|A combined field used to display the related module name and record ID"),
   'RelatedRecordDescription' => gettext("Record Description|A description of the related record based on a combination of field values assigned from within the related module"),
   'Organization' => gettext("Organization|The organization with primary responsibility for the assigned action"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for the assigned action"),
   'Title' => gettext("Title|A concise title that describes the action"),
   'ActionRequired' => gettext("Action Required|A comprehensive description of the action required"),
   'EntryDate' => gettext("Entry Date|An automatic entry of the date and time the action was entered into the system"),
   'AssignedDate' => gettext("Assigned Date|Date the action was originally assigned"),
   'DueDate' => gettext("Due Date|Date the action is projected to be completed"),
   'BeginDate' => gettext("Begin Date|The date that activity to satisfy the action began"),
   'CompletionDate' => gettext("Completion Date|The date and time the action was completed"),
   'AssignedBy' => gettext("Assigned By|The name of the person assigning the action"),
   'ActionStatus' => gettext("Status|Status of the assigned action"),
   'RiskImperatives' => gettext("Risk Imperatives|A list of associated Risk Imperatives")
   );


    $ownerField = 'OrganizationID';

    
    /**disbleGlobalModules**/
    /**useBestPractices**/

    //retrieve record
    $data = array();
    
    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `act`.ActionID,
   CONCAT('internal:view.php?mdl=',`act`.RelatedModuleID,'&rid=',`act`.RelatedRecordID) AS RelatedRecordLink,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' (Record ID: ',IFNULL(`act`.RelatedRecordID,''),')'),' (Record ID: )') AS RelatedModuleRecord,
   `rdc1`.Value AS RelatedRecordDescription,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS PersonAccountable,
   `act`.Title,
   `act`.ActionRequired,
   `act_l`.createDate AS EntryDate,
   `dat1`.RelatedDate AS AssignedDate,
   `dat2`.RelatedDate AS DueDate,
   `act`.BeginDate,
   `dat3`.RelatedDate AS CompletionDate,
   `ppl2`.DisplayName AS AssignedBy,
   `cod1`.Description AS ActionStatus,
   `rsk1`.RiskImperatives AS RiskImperatives,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`act`.Title,''),' | ',IFNULL(`mod1`.Name,''),' | ',IFNULL(`rdc1`.Value,'')),' |  |  | ') AS RecordLabel,
   `act`.OrganizationID
FROM `act`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`act`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`act`.RelatedRecordID = rdc1.RecordID AND `act`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `org` AS org1 
   ON (`act`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`act`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN (
                SELECT
                    `act_l`.ActionID,
                    `act_l`._ModDate AS createDate,
                    `act_l`._ModBy AS createBy
                FROM `act_l`
                INNER JOIN (
                    SELECT
                        ActionID,
                        MIN(_RecordID) AS MinRecordID
                    FROM `act_l`
                    GROUP BY ActionID) as `act_min`
                ON `act_l`._RecordID = `act_min`.MinRecordID
                ) AS act_l
                ON (`act`.ActionID = act_l.ActionID)
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`act`.ActionID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'act'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '2')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`act`.ActionID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'act'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '1')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`act`.ActionID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'act'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '3')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`act`.ActionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'act'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '4')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`act`.ActionStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '261')
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS RiskImperatives,
`rsk`.RelatedRecordID FROM `rsk` 

LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '234')
 WHERE `rsk`._Deleted = 0 
 AND RelatedModuleID = 'act' 
 AND 'act' = `rsk`.RelatedModuleID
GROUP BY `rsk`.RelatedRecordID 
) AS rsk1 
ON (`act`.ActionID = rsk1.RelatedRecordID) 
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
WHERE
   act.ActionID='/**RecordID**/'";

    /**CUSTOM_CODE|before_get**/

    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    
    /**SQL|GET_END**/
    //need to repeat for each getSQL........
    $data = array_merge($data, $r[0]); //assign first (only) row
    
    /**CUSTOM_CODE|get**/
    
    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Actions"));

    if ($allowEdit){
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Action") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an action associated with a related record") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with an action associated with a related record") );
$tabs = array_merge($tabs, $tempTabs);
    } else {
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Action") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Action") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Action") );
$tabs = array_merge($tabs, $tempTabs);
    }
    
    $recordLabelField = $data['RecordLabel'];

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Action");
    $screenPhrase = gettext("View|View summary information about an action associated with a related record");

    $backlink = "list.php?$qs";

    $nextScreen = "Form";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here


//View Screen Sections here
$content .= '<h1>'. gettext("Dates and Delays") .'</h1>';
$fields = unserialize('a:5:{s:12:"AssignedDate";O:9:"viewfield":16:{s:4:"name";s:12:"AssignedDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Assigned Date|Date the action was originally assigned";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"BeginDate";O:9:"viewfield":16:{s:4:"name";s:9:"BeginDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Begin Date|The date that activity to satisfy the action began";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"StartDelayCalc";O:9:"viewfield":16:{s:4:"name";s:14:"StartDelayCalc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:160:"Start Delay|A calculated field based on the amount of time between the date the action was assigned and the date activity started to resolve the assigned action";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"CompletionDate";O:9:"viewfield":16:{s:4:"name";s:14:"CompletionDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Completion Date|The date and time the action was completed";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"CompletionDelay";O:9:"viewfield":16:{s:4:"name";s:15:"CompletionDelay";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:138:"Completion Delay|A calculated field based on the amount of time between the date the action was assigned and the date action was completed";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');
$phrases = array(
   'AssignedDate' => gettext("Assigned Date|Date the action was originally assigned"),
   'BeginDate' => gettext("Begin Date|The date that activity to satisfy the action began"),
   'StartDelayCalc' => gettext("Start Delay|A calculated field based on the amount of time between the date the action was assigned and the date activity started to resolve the assigned action"),
   'CompletionDate' => gettext("Completion Date|The date and time the action was completed"),
   'CompletionDelay' => gettext("Completion Delay|A calculated field based on the amount of time between the date the action was assigned and the date action was completed")
   );
$SQL = "SELECT 
   `dat1`.RelatedDate AS AssignedDate,
   `act`.BeginDate,
   NULLIF(CONCAT(IFNULL(DATEDIFF(`act`.BeginDate, `dat1`.RelatedDate),''),' Days'),' Days') AS StartDelayCalc,
   `dat3`.RelatedDate AS CompletionDate,
   CONCAT(FLOOR((UNIX_TIMESTAMP(`dat3`.RelatedDate)-UNIX_TIMESTAMP(`dat1`.RelatedDate))/86400), ' days, ', ROUND(MOD((UNIX_TIMESTAMP(`dat3`.RelatedDate)-UNIX_TIMESTAMP(`dat1`.RelatedDate)),86400)/3600), ' hours') AS CompletionDelay,
   `act`.OrganizationID
FROM `act`
   
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`act`.ActionID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'act'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '2')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`act`.ActionID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'act'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '3')
WHERE
   act.ActionID='/**RecordID**/'";
   $grids = array();
$content .= renderViewScreenSection($fields, $phrases, $SQL, $grids);

?>
