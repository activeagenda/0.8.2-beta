<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:13:{s:8:"ActionID";O:9:"viewfield":16:{s:4:"name";s:8:"ActionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Action ID|Numerical ID to identify and track actions assigned within this application";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"RelatedModuleRecord";O:9:"viewfield":16:{s:4:"name";s:19:"RelatedModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Related Record|A combined field used to display the related module name and record ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"RelatedRecordDescription";O:9:"viewfield":16:{s:4:"name";s:24:"RelatedRecordDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record Description|A description of the related record based on a combination of field values assigned from within the related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"act";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"act";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:5:"Title";O:9:"editfield":14:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:14:"ActionRequired";O:9:"memofield":15:{s:4:"name";s:14:"ActionRequired";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"AssignedDate";O:9:"datefield":15:{s:4:"name";s:12:"AssignedDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:7:"DueDate";O:9:"datefield":15:{s:4:"name";s:7:"DueDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:9:"BeginDate";O:9:"datefield":15:{s:4:"name";s:9:"BeginDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"CompletionDate";O:9:"datefield":15:{s:4:"name";s:14:"CompletionDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"AssignedByID";O:16:"personcombofield":29:{s:4:"name";s:12:"AssignedByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"act";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";s:6:"userID";s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:16:"AssignedByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"ActionStatusID";O:14:"codecombofield":27:{s:4:"name";s:14:"ActionStatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'261\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'261\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"act";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:2:"#1";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"261";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Action");

//field value array
$data = array(
        'ActionID' => '',
         'RelatedModuleRecord' => '',
         'RelatedRecordDescription' => '',
         'OrganizationID' => '',
         'PersonAccountableID' => '',
         'Title' => '',
         'ActionRequired' => '',
         'AssignedDate' => '',
         'DueDate' => '',
         'BeginDate' => '',
         'CompletionDate' => '',
         'AssignedByID' => '',
         'ActionStatusID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'ActionID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Imperatives";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `act`.ActionID,
   CONCAT('internal:view.php?mdl=',`act`.RelatedModuleID,'&rid=',`act`.RelatedRecordID) AS RelatedRecordLink,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' (Record ID: ',IFNULL(`act`.RelatedRecordID,''),')'),' (Record ID: )') AS RelatedModuleRecord,
   `rdc1`.Value AS RelatedRecordDescription,
   `org1`.Name AS Organization,
   `act`.OrganizationID,
   `ppl1`.DisplayName AS PersonAccountable,
   `act`.PersonAccountableID,
   `act`.Title,
   `act`.ActionRequired,
   `dat1`.RelatedDate AS AssignedDate,
   `dat2`.RelatedDate AS DueDate,
   `act`.BeginDate,
   `dat3`.RelatedDate AS CompletionDate,
   `ppl2`.DisplayName AS AssignedBy,
   `inv1`.PersonInvolvedID AS AssignedByID,
   `cod1`.Description AS ActionStatus,
   `act`.ActionStatusID,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`act`.Title,''),' | ',IFNULL(`mod1`.Name,''),' | ',IFNULL(`rdc1`.Value,'')),' |  |  | ') AS RecordLabel
FROM `act`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`act`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`act`.RelatedRecordID = rdc1.RecordID AND `act`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `org` AS org1 
   ON (`act`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`act`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`act`.ActionID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'act'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '2')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`act`.ActionID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'act'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '1')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`act`.ActionID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'act'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '3')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`act`.ActionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'act'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '4')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`act`.ActionStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '261')
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
WHERE
   act.ActionID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Action");
        $screenPhrase = gettext("Form|Edit summary information about an action associated with a related record");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Actions");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ActionID' => gettext("Action ID|Numerical ID to identify and track actions assigned within this application"),
   'RelatedModuleRecord' => gettext("Related Record|A combined field used to display the related module name and record ID"),
   'RelatedRecordDescription' => gettext("Record Description|A description of the related record based on a combination of field values assigned from within the related module"),
   'OrganizationID' => gettext("Organization|The organization with primary responsibility for the assigned action"),
   'PersonAccountableID' => gettext("Person Accountable|The individual assigned primary accountability for the assigned action"),
   'Title' => gettext("Title|A concise title that describes the action"),
   'ActionRequired' => gettext("Action Required|A comprehensive description of the action required"),
   'AssignedDate' => gettext("Assigned Date|Date the action was originally assigned"),
   'DueDate' => gettext("Due Date|Date the action is projected to be completed"),
   'BeginDate' => gettext("Begin Date|The date that activity to satisfy the action began"),
   'CompletionDate' => gettext("Completion Date|The date and time the action was completed"),
   'AssignedByID' => gettext("Assigned By|The name of the person assigning the action"),
   'ActionStatusID' => gettext("Status|Status of the assigned action")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['OrganizationID'], ShortPhrase($phrases['OrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['Title'], ShortPhrase($phrases['Title']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Title']->invalid = TRUE;
            }
$vMsg = Validate($data['ActionRequired'], ShortPhrase($phrases['ActionRequired']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ActionRequired']->invalid = TRUE;
            }
$vMsg = Validate($data['AssignedDate'], ShortPhrase($phrases['AssignedDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AssignedDate']->invalid = TRUE;
            }
$vMsg = Validate($data['DueDate'], ShortPhrase($phrases['DueDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['DueDate']->invalid = TRUE;
            }
$vMsg = Validate($data['BeginDate'], ShortPhrase($phrases['BeginDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BeginDate']->invalid = TRUE;
            }
$vMsg = Validate($data['CompletionDate'], ShortPhrase($phrases['CompletionDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CompletionDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AssignedByID'], ShortPhrase($phrases['AssignedByID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AssignedByID']->invalid = TRUE;
            }
$vMsg = Validate($data['ActionStatusID'], ShortPhrase($phrases['ActionStatusID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ActionStatusID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Actions"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Action") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about an action associated with a related record") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with an action associated with a related record") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Action") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"AssignedDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_AssignedDate\"
});
Calendar.setup({
   inputField : \"DueDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_DueDate\"
});
Calendar.setup({
   inputField : \"BeginDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_BeginDate\"
});
Calendar.setup({
   inputField : \"CompletionDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_CompletionDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>