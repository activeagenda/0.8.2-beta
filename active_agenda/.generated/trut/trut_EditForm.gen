<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:11:{s:15:"TrustTransferID";O:9:"viewfield":16:{s:4:"name";s:15:"TrustTransferID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Transfer ID|An automatically assigned number used to track financial account transfers";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"FromTrustedPersonID";O:16:"personcombofield":29:{s:4:"name";s:19:"FromTrustedPersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"FromDistributionID";a:1:{s:4:"name";s:18:"FromDistributionID";}}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"FromTrustedPersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"FromDistributionID";O:10:"combofield":26:{s:4:"name";s:18:"FromDistributionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"trud";s:10:"foreignKey";s:19:"TrustDistributionID";s:12:"foreignField";s:17:"TrustDistribution";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:689:"SELECT 
`trud`.TrustDistributionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`tru1`.AccountName,\'\')),\'\'),\'\'),\' | \',IFNULL(ROUND(`tru1`.TrustAmount, 2),\'\')),\' |  | \') AS Name, `inv1`.PersonInvolvedID AS ParentID FROM `trud`
 
 LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud`.TrustAccountID = `tru1`.TrustAccountID )
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`trud`.TrustDistributionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'trud\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'1\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE trud._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:696:"SELECT 
`trud`.TrustDistributionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`tru1`.AccountName,\'\')),\'\'),\'\'),\' | \',IFNULL(ROUND(`tru1`.TrustAmount, 2),\'\')),\' |  | \') AS Name, `inv1`.PersonInvolvedID AS ParentID FROM `trud`
 
 LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud`.TrustAccountID = `tru1`.TrustAccountID )
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`trud`.TrustDistributionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'trud\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'1\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )

WHERE `trud`.TrustDistributionID = \'/*recordID*/\'";s:11:"parentField";s:19:"FromTrustedPersonID";s:21:"parentListModuleField";s:15:"TrustedPersonID";s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`tru1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:17:"ToTrustedPersonID";O:16:"personcombofield":29:{s:4:"name";s:17:"ToTrustedPersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"ToDistributionID";a:1:{s:4:"name";s:16:"ToDistributionID";}}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"ToTrustedPersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"ToDistributionID";O:10:"combofield":26:{s:4:"name";s:16:"ToDistributionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"trud";s:10:"foreignKey";s:19:"TrustDistributionID";s:12:"foreignField";s:17:"TrustDistribution";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:689:"SELECT 
`trud`.TrustDistributionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`tru1`.AccountName,\'\')),\'\'),\'\'),\' | \',IFNULL(ROUND(`tru1`.TrustAmount, 2),\'\')),\' |  | \') AS Name, `inv1`.PersonInvolvedID AS ParentID FROM `trud`
 
 LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud`.TrustAccountID = `tru1`.TrustAccountID )
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`trud`.TrustDistributionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'trud\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'1\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE trud._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:696:"SELECT 
`trud`.TrustDistributionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`tru1`.AccountName,\'\')),\'\'),\'\'),\' | \',IFNULL(ROUND(`tru1`.TrustAmount, 2),\'\')),\' |  | \') AS Name, `inv1`.PersonInvolvedID AS ParentID FROM `trud`
 
 LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud`.TrustAccountID = `tru1`.TrustAccountID )
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`trud`.TrustDistributionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'trud\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'1\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )

WHERE `trud`.TrustDistributionID = \'/*recordID*/\'";s:11:"parentField";s:17:"ToTrustedPersonID";s:21:"parentListModuleField";s:15:"TrustedPersonID";s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`tru1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:12:"TransferDate";O:9:"datefield":15:{s:4:"name";s:12:"TransferDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"TransferredByID";O:16:"personcombofield":29:{s:4:"name";s:15:"TransferredByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:19:"TransferredByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:26:"TrustAccountTransferTypeID";O:14:"codecombofield":27:{s:4:"name";s:26:"TrustAccountTransferTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'153\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'153\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"trut";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"153";}s:12:"TransferDesc";O:9:"memofield":15:{s:4:"name";s:12:"TransferDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:2:"10";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"TransferAmount";O:10:"moneyfield":18:{s:4:"name";s:14:"TransferAmount";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:34:"Money notEmpty notZero notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"TransferDocNumber";O:9:"editfield":14:{s:4:"name";s:17:"TransferDocNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Trust Account Transfer");

//field value array
$data = array(
        'TrustTransferID' => '',
         'FromTrustedPersonID' => '',
         'FromDistributionID' => '',
         'ToTrustedPersonID' => '',
         'ToDistributionID' => '',
         'TransferDate' => '',
         'TransferredByID' => '',
         'TrustAccountTransferTypeID' => '',
         'TransferDesc' => '',
         'TransferAmount' => '',
         'TransferDocNumber' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'TrustTransferID';

    $ownerField = 'FromOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `trut`.TrustTransferID,
   `ppl1`.DisplayName AS FromTrustedPerson,
   `inv1`.PersonInvolvedID AS FromTrustedPersonID,
   NULLIF(CONCAT(IFNULL(`ppl2`.DisplayName,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`tru2`.AccountName,'')),''),''),' | ',IFNULL(ROUND(`tru2`.TrustAmount, 2),'')),' |  | ') AS FromDistribution,
   `trut`.FromDistributionID,
   `ppl3`.DisplayName AS ToTrustedPerson,
   `inv2`.PersonInvolvedID AS ToTrustedPersonID,
   NULLIF(CONCAT(IFNULL(`ppl4`.DisplayName,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`tru4`.AccountName,'')),''),''),' | ',IFNULL(ROUND(`tru4`.TrustAmount, 2),'')),' |  | ') AS ToDistribution,
   `trut`.ToDistributionID,
   `dat1`.RelatedDate AS TransferDate,
   `ppl5`.DisplayName AS TransferredBy,
   `inv3`.PersonInvolvedID AS TransferredByID,
   `cod1`.Description AS TrustAccountTransferType,
   `trut`.TrustAccountTransferTypeID,
   `trut`.TransferDesc,
   `trut`.TransferAmount,
   `trut`.TransferDocNumber,
   NULLIF(CONCAT(IFNULL(ROUND(`trut`.TransferAmount, 2),''),' from ',IFNULL(`ppl1`.DisplayName,''),' to ',IFNULL(`ppl3`.DisplayName,''),' on ',IFNULL(`dat1`.RelatedDate,'')),' from  to  on ') AS RecordLabel,
   `tru1`.OrganizationID AS FromOrganizationID
FROM `trut`
   
     LEFT OUTER JOIN `trud` AS trud1 
   ON (`trut`.FromDistributionID = `trud1`.TrustDistributionID )
     LEFT OUTER JOIN `trud` AS trud2 
   ON (`trut`.ToDistributionID = `trud2`.TrustDistributionID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`trut`.TrustTransferID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'trut'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '30')
     LEFT OUTER JOIN `inv` AS inv3 
    ON (`trut`.TrustTransferID = `inv3`.SourceRecordID 
     AND `inv3`.SourceModuleID = 'trut'
     AND `inv3`._Deleted = 0
     AND `inv3`.InvolvementDescriptorID = '2')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`trut`.TrustAccountTransferTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '153')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`trud1`.TrustDistributionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'trud'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '1')
     LEFT OUTER JOIN `ppl` AS ppl1 
ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
     LEFT OUTER JOIN `tru` AS tru2 
   ON (`trud1`.TrustAccountID = `tru2`.TrustAccountID )
     LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud1`.TrustAccountID = `tru1`.TrustAccountID )
     LEFT OUTER JOIN `inv` AS inv2 
    ON (`trud2`.TrustDistributionID = `inv2`.SourceRecordID 
     AND `inv2`.SourceModuleID = 'trud'
     AND `inv2`._Deleted = 0
     AND `inv2`.InvolvementDescriptorID = '1')
     LEFT OUTER JOIN `ppl` AS ppl3 
ON (`inv2`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `tru` AS tru4 
   ON (`trud2`.TrustAccountID = `tru4`.TrustAccountID )
     LEFT OUTER JOIN `ppl` AS ppl5 
   ON (`inv3`.PersonInvolvedID = `ppl5`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl4 
   ON (`inv2`.PersonInvolvedID = `ppl4`.PersonID )
WHERE
   trut.TrustTransferID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Trust Account Transfer");
        $screenPhrase = gettext("Form|Edit summary information about trust distribution account transfers");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Trust Account Transfers");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'TrustTransferID' => gettext("Transfer ID|An automatically assigned number used to track financial account transfers"),
   'FromTrustedPersonID' => gettext("From Person|The name of the individual transferring the amount to a different trust distribution account"),
   'FromDistributionID' => gettext("From Distribution Account|The trust distribution account to be debited"),
   'ToTrustedPersonID' => gettext("To Person|The name of the individual receiving the amount from a different trust distribution account"),
   'ToDistributionID' => gettext("To Account|The trust distribution account to be credited"),
   'TransferDate' => gettext("Transfer Date|The specific date the transfer occurred"),
   'TransferredByID' => gettext("Transferred By|The person responsible for transferring the funds"),
   'TrustAccountTransferTypeID' => gettext("Transfer Type|The type of transfer between accounts"),
   'TransferDesc' => gettext("Transfer Description|A detailed description of the financial account transfer"),
   'TransferAmount' => gettext("Transfer Amount|The total amount involved in the transfer, stated in the currency assigned to this installation of the software"),
   'TransferDocNumber' => gettext("Transfer Document Number|The number associated with the transfer document (e.g. Transfer Slip Number)")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['FromDistributionID'], ShortPhrase($phrases['FromDistributionID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['FromDistributionID']->invalid = TRUE;
            }
$vMsg = Validate($data['ToDistributionID'], ShortPhrase($phrases['ToDistributionID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ToDistributionID']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferDate'], ShortPhrase($phrases['TransferDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferDate']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferredByID'], ShortPhrase($phrases['TransferredByID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferredByID']->invalid = TRUE;
            }
$vMsg = Validate($data['TrustAccountTransferTypeID'], ShortPhrase($phrases['TrustAccountTransferTypeID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TrustAccountTransferTypeID']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferDesc'], ShortPhrase($phrases['TransferDesc']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferAmount'], ShortPhrase($phrases['TransferAmount']), 'Money notEmpty notZero notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferAmount']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferDocNumber'], ShortPhrase($phrases['TransferDocNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferDocNumber']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Trust Account Transfers"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Trust Account Transfer") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about trust distribution account transfers") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Transfer") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"TransferDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_TransferDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>