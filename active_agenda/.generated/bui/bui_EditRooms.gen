<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:10:"BuildingID";O:9:"viewfield":16:{s:4:"name";s:10:"BuildingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Record ID|An automatically assigned number used to track buildings";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"BuildingTypeID";O:14:"invisiblefield":11:{s:4:"name";s:14:"BuildingTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"BuildingType";O:9:"viewfield":16:{s:4:"name";s:12:"BuildingType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Building Type|A combined field used to describe this building type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Organization|The organization with primary responsibility for the building";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"BuildingName";O:9:"viewfield":16:{s:4:"name";s:12:"BuildingName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:48:"Building Name|Name used to identify the building";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"BuildingDesc";O:9:"viewfield":16:{s:4:"name";s:12:"BuildingDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Building Decsription|A detailed description of the building and its purpose";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"TotalBuildingSize";O:9:"viewfield":16:{s:4:"name";s:17:"TotalBuildingSize";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:44:"Building Size|The total size of the building";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"TotalValue";O:9:"viewfield":16:{s:4:"name";s:10:"TotalValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Total Value|A calculated field based on the total of the estimated building value and the inventory value";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:22:"EstimatedBuildingValue";O:9:"viewfield":16:{s:4:"name";s:22:"EstimatedBuildingValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Estimated Value|The total estimated value of the building";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"InventoryValue";O:9:"viewfield":16:{s:4:"name";s:14:"InventoryValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:197:"Inventory Value|A calculated field representing the total value of the inventory within the building. The inventory value is calculated based upon the room inventories entered into the rooms module";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstOpp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstOpp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Estimated Opportunity|The total estimated financial opportunity associated with the building";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstExp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstExp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Estimated Exposure|The total estimated cost exposure associated with the building";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Building");

//field value array
$data = array(
        'BuildingID' => '',
         'BuildingTypeID' => '',
         'BuildingType' => '',
         'Organization' => '',
         'BuildingName' => '',
         'BuildingDesc' => '',
         'TotalBuildingSize' => '',
         'TotalValue' => '',
         'EstimatedBuildingValue' => '',
         'InventoryValue' => '',
         'TotalEstOpp' => '',
         'TotalEstExp' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1082:"SELECT 
   `buir`.RoomID,
   `buir`.RoomName,
   `buir`.RoomNumber,
   `cod1`.Description AS Floor,
   `buir`.FloorID,
   `buir`.RoomPurpose,
   `buir`.FireProtection,
   `cod2`.Description AS FireSuppType,
   `buir`.FireSuppTypeID,
   `buir`.FireSuppression,
   `buir`.InventoryValue,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `bui1`.OrganizationID AS OrganizationID
FROM `buir`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`buir`.FloorID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'146\')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`buir`.FireSuppTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'155\')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`buir`.RoomID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'buir\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'78\')
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir`.BuildingID = `bui1`.BuildingID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   buir.RoomID=\'/**RowID**/\'";s:9:"getRowSQL";s:421:"SELECT 
   `buir`.RoomName,
   `buir`.RoomNumber,
   `cod1`.Description AS Floor,
   `buir`.FireProtection,
   `buir`.InventoryValue,
   `bui1`.OrganizationID AS OrganizationID
FROM `buir`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`buir`.FloorID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'146\')
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir`.BuildingID = `bui1`.BuildingID )
WHERE
   buir.RoomID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:10:{s:6:"RoomID";O:14:"invisiblefield":11:{s:4:"name";s:6:"RoomID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Room ID|An automatically assigned number used to associate rooms with buildings";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:8:"RoomName";O:9:"editfield":14:{s:4:"name";s:8:"RoomName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Room Name|A unique name assigned to a room within the respective building";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";N;s:5:"align";s:4:"left";}s:10:"RoomNumber";O:9:"editfield":14:{s:4:"name";s:10:"RoomNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Room Number|A unique number assigned to rooms, by the organization, for facility tracking and mapping purposes";s:8:"dataType";s:11:"varchar(10)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";N;s:5:"align";s:4:"left";}s:7:"FloorID";O:14:"codecombofield":27:{s:4:"name";s:7:"FloorID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:44:"Floor|The floor on which the room is located";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'146\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'146\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buir";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"146";}s:11:"RoomPurpose";O:9:"memofield":15:{s:4:"name";s:11:"RoomPurpose";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Room Purpose|The purpose served by the room";s:8:"dataType";s:4:"text";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"3";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"FireProtection";O:13:"checkboxfield":14:{s:4:"name";s:14:"FireProtection";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Fire Protection|Check this box if this room has a fire protection system installed";s:8:"dataType";s:4:"bool";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"FireSuppTypeID";O:14:"codecombofield":27:{s:4:"name";s:14:"FireSuppTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Fire Suppression Type|The type of fire suppression system available inside the room";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'155\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'155\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buir";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"155";}s:15:"FireSuppression";O:9:"memofield":15:{s:4:"name";s:15:"FireSuppression";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Fire Suppression Description|A brief description of the fire suppression present within the room";s:8:"dataType";s:4:"text";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"4";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"InventoryValue";O:10:"moneyfield":18:{s:4:"name";s:14:"InventoryValue";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Inventory Value|The total estimated value of inventory stored inside the room";s:8:"dataType";s:5:"money";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Person Accountable|The person with primary accountability for managing this room";s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buir";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:6:"RoomID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"buir";s:6:"phrase";s:5:"Rooms";s:6:"number";i:1;s:6:"Fields";a:5:{s:8:"RoomName";O:9:"viewfield":16:{s:4:"name";s:8:"RoomName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Room Name|A unique name assigned to a room within the respective building";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"RoomNumber";O:9:"viewfield":16:{s:4:"name";s:10:"RoomNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Room Number|A unique number assigned to rooms, by the organization, for facility tracking and mapping purposes";s:8:"dataType";s:11:"varchar(10)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Floor";O:9:"viewfield":16:{s:4:"name";s:5:"Floor";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:44:"Floor|The floor on which the room is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"FireProtection";O:9:"viewfield":16:{s:4:"name";s:14:"FireProtection";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Fire Protection|Check this box if this room has a fire protection system installed";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"InventoryValue";O:9:"viewfield":16:{s:4:"name";s:14:"InventoryValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Inventory Value|The total estimated value of inventory stored inside the room";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"buir";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:106:"SELECT 
    count(*) 
FROM `buir`
   
WHERE buir._Deleted = 0
   AND `buir`.BuildingID = \'/**RecordID**/\'
";s:7:"listSQL";s:446:"SELECT 
   `buir`.RoomID,
`bui1`.OrganizationID AS OrganizationID,
`buir`.RoomName,
`buir`.RoomNumber,
`cod1`.Description AS Floor,
`buir`.FireProtection,
`buir`.InventoryValue
FROM `buir`

   LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir`.BuildingID = `bui1`.BuildingID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`buir`.FloorID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'146\')
WHERE buir._Deleted = 0
AND `buir`.BuildingID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:10:"BuildingID";s:9:"parentKey";s:10:"BuildingID";s:8:"PKFields";a:1:{i:0;s:6:"RoomID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'BuildingID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "AssetProtection";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `bui`.BuildingID,
   `bui`.BuildingTypeID,
   NULLIF(CONCAT(IFNULL(`buit1`.BuildingTypeTitle,'')),'') AS BuildingType,
   `org1`.Name AS Organization,
   `bui`.BuildingName,
   `bui`.BuildingDesc,
   NULLIF(CONCAT(IFNULL(`bui`.BuildingSize,''),' ',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),''),'')),' ') AS TotalBuildingSize,
   IFNULL(ROUND(`bui`.EstimatedBuildingValue, 2), 0) + IFNULL(ROUND(`buir1`.InventoryValue, 2), 0) AS TotalValue,
   `bui`.EstimatedBuildingValue,
   `buir1`.InventoryValue AS InventoryValue,
   `opt1`.TotalEstOpp AS TotalEstOpp,
   `cosex1`.TotalEstExp AS TotalEstExp,
   NULLIF(CONCAT(IFNULL(`bui`.BuildingName,''),' | ',IFNULL(`org1`.Name,'')),' | ') AS RecordLabel,
   `bui`.OrganizationID
FROM `bui`
   
     LEFT OUTER JOIN `buit` AS buit1 
   ON (`bui`.BuildingTypeID = `buit1`.BuildingTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`bui`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`bui`.BuildSizeUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`buir`.InventoryValue, 2)) AS InventoryValue,
`buir`.BuildingID FROM `buir` 
 WHERE `buir`._Deleted = 0 
GROUP BY `buir`.BuildingID 
) AS buir1 
ON (`bui`.BuildingID = buir1.BuildingID) 
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`opt`.Estimate, 2)) AS TotalEstOpp,
`opt`.RelatedRecordID FROM `opt` 
 WHERE `opt`._Deleted = 0 
 AND RelatedModuleID = 'bui' 
 AND 'bui' = `opt`.RelatedModuleID
GROUP BY `opt`.RelatedRecordID 
) AS opt1 
ON (`bui`.BuildingID = opt1.RelatedRecordID) 
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`cosex`.Estimate, 2)) AS TotalEstExp,
`cosex`.RelatedRecordID FROM `cosex` 
 WHERE `cosex`._Deleted = 0 
 AND RelatedModuleID = 'bui' 
 AND 'bui' = `cosex`.RelatedModuleID
GROUP BY `cosex`.RelatedRecordID 
) AS cosex1 
ON (`bui`.BuildingID = cosex1.RelatedRecordID) 
WHERE
   bui.BuildingID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Building");
        $screenPhrase = gettext("Rooms|Associate rooms with the building");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Buildings");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'BuildingID' => gettext("Record ID|An automatically assigned number used to track buildings"),
   'BuildingTypeID' => gettext("Building Type|A combined field used to describe this building type when associating it with other records"),
   'BuildingType' => gettext("Building Type|A combined field used to describe this building type when associating it with other records"),
   'Organization' => gettext("Organization|The organization with primary responsibility for the building"),
   'BuildingName' => gettext("Building Name|Name used to identify the building"),
   'BuildingDesc' => gettext("Building Decsription|A detailed description of the building and its purpose"),
   'TotalBuildingSize' => gettext("Building Size|The total size of the building"),
   'TotalValue' => gettext("Total Value|A calculated field based on the total of the estimated building value and the inventory value"),
   'EstimatedBuildingValue' => gettext("Estimated Value|The total estimated value of the building"),
   'InventoryValue' => gettext("Inventory Value|A calculated field representing the total value of the inventory within the building. The inventory value is calculated based upon the room inventories entered into the rooms module"),
   'TotalEstOpp' => gettext("Estimated Opportunity|The total estimated financial opportunity associated with the building"),
   'TotalEstExp' => gettext("Estimated Exposure|The total estimated cost exposure associated with the building")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Buildings"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Building") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a building") );
      $tempTabs['Rooms'] = array( "", gettext("Rooms|Associate rooms with the building") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the building") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the building") );
      $tempTabs['Opportunities'] = array( "edit.php?scr=Opportunities&$tabsQS", gettext("Opportunities|Associate financial opportunities with the building") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the building") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the building") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the building") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the building") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the building") );
      $tempTabs['BusinessContinuation'] = array( "edit.php?scr=BusinessContinuation&$tabsQS", gettext("Continuity|Associate business continuation requirements with the building") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate business agreements and/or contracts with the building") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the building") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the building") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities associated with the building") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the building") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with the building") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the building") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Rooms'] = array( "", gettext("New Building") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>