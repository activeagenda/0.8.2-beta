<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:13:"JobAnalysisID";O:9:"viewfield":16:{s:4:"name";s:13:"JobAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Record ID|A unique number assigned to each job being analyzed for hazards and functional requirements";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Organization|The organization authoring and/or utilizing the job analyses";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Person Accountable|The individual assigned primary accountability for maintaining the currency of the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Function";O:9:"viewfield":16:{s:4:"name";s:8:"Function";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Function|The business purpose of the department responsible for the job to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"JobAnalysisTitle";O:9:"viewfield":16:{s:4:"name";s:16:"JobAnalysisTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Job Analysis Title|A descriptive name of the job to be performed";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"JobAnalysisDesc";O:9:"viewfield":16:{s:4:"name";s:15:"JobAnalysisDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:190:"Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very importnat to others interested in assigning this job to different job titles";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"JobAnalysisNumber";O:9:"viewfield":16:{s:4:"name";s:17:"JobAnalysisNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Number|A unique number used to identify the job analysis";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Last Review|The date of the last formal review of the complete job analysis";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"JobAnalysisStatus";O:9:"viewfield":16:{s:4:"name";s:17:"JobAnalysisStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:39:"Status|Status of the job review process";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Job Analysis");

//field value array
$data = array(
        'JobAnalysisID' => '',
         'Organization' => '',
         'PersonAccountable' => '',
         'Function' => '',
         'JobAnalysisTitle' => '',
         'JobAnalysisDesc' => '',
         'JobAnalysisNumber' => '',
         'LastReviewDate' => '',
         'JobAnalysisStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1654:"SELECT 
   `jant`.JobTaskID,
   `jant`.SortOrder,
   `org1`.Name AS TaskOrganization,
   `tas1`.OrganizationID AS TaskOrganizationID,
   NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS Location,
   `orgla1`.LocationID AS LocationID,
   `cod1`.Description AS TaskCategory,
   `tast1`.TaskCategoryID AS TaskCategoryID,
   NULLIF(CONCAT(IFNULL(`tas1`.TaskName,\'\')),\'\') AS Task,
   `jant`.TaskID,
   NULLIF(CONCAT(IFNULL(`tast1`.TaskTypeTitle,\'\')),\'\') AS TaskType,
   `tas1`.TaskDesc AS TaskDesc,
   `cod2`.Description AS Function,
   `jan1`.OrganizationID AS JAOrganizationID
FROM `jant`
   
     LEFT OUTER JOIN `tas` AS tas1 
   ON (`jant`.TaskID = `tas1`.TaskID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`jant`.JobTaskID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'jant\'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jant`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`tas1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas1`.TaskTypeID = `tast1`.TaskTypeID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`tas1`.FunctionID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'4\')
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tast1`.TaskCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'45\')
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   jant.JobTaskID=\'/**RowID**/\'";s:9:"getRowSQL";s:965:"SELECT 
   `jant`.JobTaskID,
   `jant`.SortOrder,
   CONCAT(\'internal:view.php?mdl=\',\'tas\',\'&rid=\',`jant`.TaskID) AS TaskLink,
   NULLIF(CONCAT(IFNULL(`tas1`.TaskName,\'\')),\'\') AS Task,
   NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS Location,
   `jan1`.OrganizationID AS JAOrganizationID
FROM `jant`
   
     LEFT OUTER JOIN `tas` AS tas1 
   ON (`jant`.TaskID = `tas1`.TaskID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`jant`.JobTaskID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'jant\'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jant`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   jant.JobTaskID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:9:{s:9:"JobTaskID";O:14:"invisiblefield":11:{s:4:"name";s:9:"JobTaskID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:116:"Job Task ID|An automatically assigned number used to associate job analyses with tasks performed by the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:9:"SortOrder";O:9:"editfield":14:{s:4:"name";s:9:"SortOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Sort Order|A numerical value used to define the order of the task within the list";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:18:"TaskOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:18:"TaskOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:59:"Task Organization|The organization associated with the task";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:10:"LocationID";a:1:{s:4:"name";s:10:"LocationID";}s:14:"TaskCategoryID";a:1:{s:4:"name";s:14:"TaskCategoryID";}}s:8:"moduleID";s:4:"jant";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"LocationID";O:10:"combofield":26:{s:4:"name";s:10:"LocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:178:"Location|Specific location within the facility where this task is performed. In the case of a multi-location task, this should be the primary location where the task is performed";s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"orgl";s:10:"foreignKey";s:10:"LocationID";s:12:"foreignField";s:8:"Location";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:371:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE orgl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:369:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )

WHERE `orgl`.LocationID = \'/*recordID*/\'";s:11:"parentField";s:18:"TaskOrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"jant";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`orgl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"TaskCategoryID";O:14:"codecombofield":27:{s:4:"name";s:14:"TaskCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Category|A broad categoy used to group tasks of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'45\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:405:"SELECT DISTINCT
`tast1`.TaskCategoryID AS ID, `cod1`.Description AS Name, `tas`.OrganizationID AS ParentID
FROM `tas`

LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas`.TaskTypeID = `tast1`.TaskTypeID )
LEFT OUTER JOIN `cod` AS cod1 
   ON (`tast1`.TaskCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'45\')
WHERE `tas`._Deleted = 0
AND `tast1`.TaskCategoryID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:357:"SELECT DISTINCT
`tast1`.TaskCategoryID AS ID, `cod1`.Description AS Name, `tas`.OrganizationID AS ParentID
FROM `tas`

LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas`.TaskTypeID = `tast1`.TaskTypeID )
LEFT OUTER JOIN `cod` AS cod1 
   ON (`tast1`.TaskCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'45\')
WHERE `tast1`.TaskCategoryID = \'/*recordID*/\'";s:11:"parentField";s:18:"TaskOrganizationID";s:21:"parentListModuleField";s:14:"OrganizationID";s:11:"childFields";a:1:{s:6:"TaskID";a:3:{s:4:"name";s:6:"TaskID";s:15:"listParentField";s:14:"TaskCategoryID";s:21:"parentListModuleField";s:14:"OrganizationID";}}s:8:"moduleID";s:4:"jant";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"45";}s:6:"TaskID";O:10:"combofield":26:{s:4:"name";s:6:"TaskID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Task|A combined field used to describe this task when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"tas";s:10:"foreignKey";s:6:"TaskID";s:12:"foreignField";s:4:"Task";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:253:"SELECT 
`tas`.TaskID AS ID, NULLIF(CONCAT(IFNULL(`tas`.TaskName,\'\')),\'\') AS Name, `tast1`.TaskCategoryID AS ParentID FROM `tas`
 
 LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas`.TaskTypeID = `tast1`.TaskTypeID )
WHERE tas._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:247:"SELECT 
`tas`.TaskID AS ID, NULLIF(CONCAT(IFNULL(`tas`.TaskName,\'\')),\'\') AS Name, `tast1`.TaskCategoryID AS ParentID FROM `tas`
 
 LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas`.TaskTypeID = `tast1`.TaskTypeID )

WHERE `tas`.TaskID = \'/*recordID*/\'";s:11:"parentField";s:14:"TaskCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:3:{s:8:"TaskType";a:1:{s:4:"name";s:8:"TaskType";}s:8:"TaskDesc";a:1:{s:4:"name";s:8:"TaskDesc";}s:8:"Function";a:1:{s:4:"name";s:8:"Function";}}s:8:"moduleID";s:4:"jant";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`tas`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:8:"TaskType";O:9:"viewfield":16:{s:4:"name";s:8:"TaskType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Task Type|A combined field used to describe this task type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:6:"TaskID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:8:"TaskDesc";O:9:"viewfield":16:{s:4:"name";s:8:"TaskDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:186:"Task Description|A detailed description of the task to be performed. The detailed description will be very importnat to others interested in assigning this task to different job analyses";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:6:"TaskID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:8:"Function";O:9:"viewfield":16:{s:4:"name";s:8:"Function";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Function|The business purpose of the department responsible for the task to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:6:"TaskID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:9:"JobTaskID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:1:{s:9:"SortOrder";s:3:"asc";}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"jant";s:6:"phrase";s:13:"General Tasks";s:6:"number";i:1;s:6:"Fields";a:4:{s:9:"JobTaskID";O:14:"invisiblefield":11:{s:4:"name";s:9:"JobTaskID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:116:"Job Task ID|An automatically assigned number used to associate job analyses with tasks performed by the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:9:"SortOrder";O:9:"viewfield":16:{s:4:"name";s:9:"SortOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Sort Order|A numerical value used to define the order of the task within the list";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Task";O:9:"viewfield":16:{s:4:"name";s:4:"Task";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Task|A combined field used to describe this task when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:8:"TaskLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:178:"Location|Specific location within the facility where this task is performed. In the case of a multi-location task, this should be the primary location where the task is performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jant";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:109:"SELECT 
    count(*) 
FROM `jant`
   
WHERE jant._Deleted = 0
   AND `jant`.JobAnalysisID = \'/**RecordID**/\'
";s:7:"listSQL";s:967:"SELECT 
   `jant`.JobTaskID,
`jan1`.OrganizationID AS JAOrganizationID,
`jant`.SortOrder,
CONCAT(\'internal:view.php?mdl=\',\'tas\',\'&rid=\',`jant`.TaskID) AS TaskLink,
NULLIF(CONCAT(IFNULL(`tas1`.TaskName,\'\')),\'\') AS Task,
NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS Location
FROM `jant`

   LEFT OUTER JOIN `jan` AS jan1 
   ON (`jant`.JobAnalysisID = `jan1`.JobAnalysisID )
   LEFT OUTER JOIN `tas` AS tas1 
   ON (`jant`.TaskID = `tas1`.TaskID )
   LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`jant`.JobTaskID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'jant\'
     AND `orgla1`._Deleted = 0)
   LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
   LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
   LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE jant._Deleted = 0
AND `jant`.JobAnalysisID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:13:"JobAnalysisID";s:9:"parentKey";s:13:"JobAnalysisID";s:8:"PKFields";a:1:{i:0;s:9:"JobTaskID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'JobAnalysisID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "KSAs";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `jan`.JobAnalysisID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS Function,
   `jan`.JobAnalysisTitle,
   `jan`.JobAnalysisDesc,
   `jan`.JobAnalysisNumber,
   `dat1`.RelatedDate AS LastReviewDate,
   `cod2`.Description AS JobAnalysisStatus,
   NULLIF(CONCAT(IFNULL(`jan`.JobAnalysisTitle,''),' | ',IFNULL(`org1`.Name,'')),' | ') AS RecordLabel,
   `jan`.OrganizationID
FROM `jan`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`jan`.JobAnalysisID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'jan'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '48')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`jan`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '4')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`jan`.JobAnalysisID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'jan'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '20')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`jan`.JobAnalysisStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '175')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   jan.JobAnalysisID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Job Analysis");
        $screenPhrase = gettext("General Tasks|Associate general tasks with the job analysis");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Job Analyses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'JobAnalysisID' => gettext("Record ID|A unique number assigned to each job being analyzed for hazards and functional requirements"),
   'Organization' => gettext("Organization|The organization authoring and/or utilizing the job analyses"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for maintaining the currency of the job analysis"),
   'Function' => gettext("Function|The business purpose of the department responsible for the job to be performed"),
   'JobAnalysisTitle' => gettext("Job Analysis Title|A descriptive name of the job to be performed"),
   'JobAnalysisDesc' => gettext("Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very importnat to others interested in assigning this job to different job titles"),
   'JobAnalysisNumber' => gettext("Number|A unique number used to identify the job analysis"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the complete job analysis"),
   'JobAnalysisStatus' => gettext("Status|Status of the job review process")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Job Analyses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Job Analysis") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the job analysis") );
      $tempTabs['SpecificTasks'] = array( "edit.php?scr=SpecificTasks&$tabsQS", gettext("Specific Tasks|Associate job specific tasks with the job analysis") );
      $tempTabs['GeneralTasks'] = array( "", gettext("General Tasks|Associate general tasks with the job analysis") );
      $tempTabs['KSAs'] = array( "edit.php?scr=KSAs&$tabsQS", gettext("Qualifications|Associate knowledge, skill, and experience qualification levels with the job analysis") );
      $tempTabs['Glossary'] = array( "edit.php?scr=Glossary&$tabsQS", gettext("Glossary|Associate glossary terms with the job analysis") );
      $tempTabs['Partnerships'] = array( "edit.php?scr=Partnerships&$tabsQS", gettext("Policies|Associate partnerships and policies with the job analysis") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the job analysis") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the job analysis") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with a physical job analysis file") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the job analysis") , 'bpc');
      $tempTabs['Reports'] = array( "reports.php?scr=Reports&$tabsQS", gettext("Reports|View reports for this job analysis") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['GeneralTasks'] = array( "", gettext("New Job Analysis") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>