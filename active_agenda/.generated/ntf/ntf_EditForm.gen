<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:14:"NotificationID";O:9:"viewfield":16:{s:4:"name";s:14:"NotificationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Record ID|An automatically assigned number used to track notifications";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"RelatedModule";O:9:"viewfield":16:{s:4:"name";s:13:"RelatedModule";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Module|The name of the module associated with the notification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"RelatedRecord";O:9:"viewfield":16:{s:4:"name";s:13:"RelatedRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Record Description|A description of the record that is being sent as a notification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Sender";O:9:"viewfield":16:{s:4:"name";s:6:"Sender";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Sender|The person who sent the notification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Subject";O:9:"editfield":14:{s:4:"name";s:7:"Subject";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"40";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:7:"Message";O:9:"memofield":15:{s:4:"name";s:7:"Message";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"XMLAttached";O:13:"checkboxfield":14:{s:4:"name";s:11:"XMLAttached";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:8:"SentDate";O:9:"viewfield":16:{s:4:"name";s:8:"SentDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Sent Date|The time and date when the notification was sent";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"StatusID";O:14:"invisiblefield":11:{s:4:"name";s:8:"StatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Notification");

//field value array
$data = array(
        'NotificationID' => '',
         'RelatedModule' => '',
         'RelatedRecord' => '',
         'Sender' => '',
         'Subject' => '',
         'Message' => '',
         'XMLAttached' => '',
         'SentDate' => '',
         'StatusID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'NotificationID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Recipients";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    include_once APP_INCLUDE_PATH . '/ntfInitialize.php';
$disableGlobalModules = true;


    $getSQL = "SELECT 
   `ntf`.NotificationID,
   `mod1`.Name AS RelatedModule,
   `rdc1`.Value AS RelatedRecord,
   `ppl1`.DisplayName AS Sender,
   `ntf`.Subject,
   `ntf`.Message,
   `ntf`.XMLAttached,
   `ntf`.SentDate,
   `ntf`.StatusID,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' | ',IFNULL(`ntf`.RelatedRecordID,'')),' | ') AS RecordLabel,
   `rdc1`.OrganizationID AS OrganizationID
FROM `ntf`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`ntf`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`ntf`.RelatedRecordID = rdc1.RecordID AND `ntf`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`ntf`.SenderID = `ppl1`.PersonID )
WHERE
   ntf.NotificationID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Notification");
        $screenPhrase = gettext("Form|Edit summary information about a notification requirement");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        include_once APP_INCLUDE_PATH . '/ntfCheckStatus.php';

    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Notifications");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'NotificationID' => gettext("Record ID|An automatically assigned number used to track notifications"),
   'RelatedModule' => gettext("Module|The name of the module associated with the notification"),
   'RelatedRecord' => gettext("Record Description|A description of the record that is being sent as a notification"),
   'Sender' => gettext("Sender|The person who sent the notification"),
   'Subject' => gettext("Subject|The subject line for the  notification email"),
   'Message' => gettext("Message|An additional message in the notification email"),
   'XMLAttached' => gettext("Attach XML Data?|Whether to attach a machine-readable data file with the message"),
   'SentDate' => gettext("Sent Date|The time and date when the notification was sent"),
   'StatusID' => gettext("Status|The current status of the notification")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        if($ntf_sent){
die("Can't update a record that has been sent.");
}


        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        if(intval($_GET['rid'
]) != $recordID){ //detect that a record was just inserted
include_once APP_INCLUDE_PATH . '/ntfSQLInsert.php';
}

        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Notifications"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Notification") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a notification requirement") );
      $tempTabs['Recipients'] = array( "edit.php?scr=Recipients&$tabsQS", gettext("Recipients|Modify the selected recipients for this notification") );
      $tempTabs['Send'] = array( "edit.php?scr=Send&$tabsQS", gettext("Send|Confim the sending of this notification") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Notification") );


    }

    if($ntf_sent):
$info = gettext("This notification has already been sent. It can't be changed anymore.");
$content .= "<p>$info</p>";
else:


    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    endif;


    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>