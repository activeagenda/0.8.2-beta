<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:15:"InjuryIllnessID";O:9:"viewfield":16:{s:4:"name";s:15:"InjuryIllnessID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:152:"Injury or Illness ID|An automatically assigned number used to associate injuries and/or illnesses with natures of injury/illness and affected body parts";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"LossInjuryID";O:10:"combofield":26:{s:4:"name";s:12:"LossInjuryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"lin";s:10:"foreignKey";s:12:"LossInjuryID";s:12:"foreignField";s:10:"LossInjury";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:581:"SELECT 
`lin`.LossInjuryID AS ID, NULLIF(CONCAT(IFNULL(`org1`.Name,\'\'),\' | \',IFNULL(`ppl1`.DisplayName,\'\')),\' | \') AS Name, `lin`.OrganizationID AS ParentID FROM `lin`
 
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'lin\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'44\')
 LEFT OUTER JOIN `org` AS org1 
   ON (`lin`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE lin._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:581:"SELECT 
`lin`.LossInjuryID AS ID, NULLIF(CONCAT(IFNULL(`org1`.Name,\'\'),\' | \',IFNULL(`ppl1`.DisplayName,\'\')),\' | \') AS Name, `lin`.OrganizationID AS ParentID FROM `lin`
 
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'lin\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'44\')
 LEFT OUTER JOIN `org` AS org1 
   ON (`lin`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )

WHERE `lin`.LossInjuryID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`lin`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"IncidentReportID";O:9:"viewfield":16:{s:4:"name";s:16:"IncidentReportID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Incident Report ID|An automatically assigned number used to track situations and incidents";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:12:"LossInjuryID";a:1:{s:4:"name";s:12:"LossInjuryID";}}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:22:"InjuryNatureCategoryID";O:14:"codecombofield":27:{s:4:"name";s:22:"InjuryNatureCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'73\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'73\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"InjuryNatureTypeID";a:1:{s:4:"name";s:18:"InjuryNatureTypeID";}}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:1;s:10:"codeTypeID";s:2:"73";}s:18:"InjuryNatureTypeID";O:10:"combofield":26:{s:4:"name";s:18:"InjuryNatureTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"linnt";s:10:"foreignKey";s:18:"InjuryNatureTypeID";s:12:"foreignField";s:16:"InjuryNatureType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:200:"SELECT 
`linnt`.InjuryNatureTypeID AS ID, NULLIF(CONCAT(IFNULL(`linnt`.NatureType,\'\')),\'\') AS Name, `linnt`.InjuryNatureCategoryID AS ParentID FROM `linnt`
WHERE linnt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:206:"SELECT 
`linnt`.InjuryNatureTypeID AS ID, NULLIF(CONCAT(IFNULL(`linnt`.NatureType,\'\')),\'\') AS Name, `linnt`.InjuryNatureCategoryID AS ParentID FROM `linnt`

WHERE `linnt`.InjuryNatureTypeID = \'/*recordID*/\'";s:11:"parentField";s:22:"InjuryNatureCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"InjuryNatureID";a:1:{s:4:"name";s:14:"InjuryNatureID";}}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:1;}s:14:"InjuryNatureID";O:10:"combofield":26:{s:4:"name";s:14:"InjuryNatureID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"linna";s:10:"foreignKey";s:14:"InjuryNatureID";s:12:"foreignField";s:12:"InjuryNature";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:199:"SELECT 
`linna`.InjuryNatureID AS ID, NULLIF(CONCAT(IFNULL(`linna`.InjuryNatureTitle,\'\')),\'\') AS Name, `linna`.InjuryNatureTypeID AS ParentID FROM `linna`
WHERE linna._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:201:"SELECT 
`linna`.InjuryNatureID AS ID, NULLIF(CONCAT(IFNULL(`linna`.InjuryNatureTitle,\'\')),\'\') AS Name, `linna`.InjuryNatureTypeID AS ParentID FROM `linna`

WHERE `linna`.InjuryNatureID = \'/*recordID*/\'";s:11:"parentField";s:18:"InjuryNatureTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:1;}s:18:"BodyPartCategoryID";O:14:"codecombofield":27:{s:4:"name";s:18:"BodyPartCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'51\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'51\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"BodyPartTypeID";a:1:{s:4:"name";s:14:"BodyPartTypeID";}}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:1;s:10:"codeTypeID";s:2:"51";}s:14:"BodyPartTypeID";O:10:"combofield":26:{s:4:"name";s:14:"BodyPartTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"linbt";s:10:"foreignKey";s:14:"BodyPartTypeID";s:12:"foreignField";s:12:"BodyPartType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:190:"SELECT 
`linbt`.BodyPartTypeID AS ID, NULLIF(CONCAT(IFNULL(`linbt`.PartType,\'\')),\'\') AS Name, `linbt`.BodyPartCategoryID AS ParentID FROM `linbt`
WHERE linbt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:192:"SELECT 
`linbt`.BodyPartTypeID AS ID, NULLIF(CONCAT(IFNULL(`linbt`.PartType,\'\')),\'\') AS Name, `linbt`.BodyPartCategoryID AS ParentID FROM `linbt`

WHERE `linbt`.BodyPartTypeID = \'/*recordID*/\'";s:11:"parentField";s:18:"BodyPartCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"BodyPartID";a:1:{s:4:"name";s:10:"BodyPartID";}}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:1;}s:10:"BodyPartID";O:10:"combofield":26:{s:4:"name";s:10:"BodyPartID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"linbp";s:10:"foreignKey";s:10:"BodyPartID";s:12:"foreignField";s:8:"BodyPart";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:187:"SELECT 
`linbp`.BodyPartID AS ID, NULLIF(CONCAT(IFNULL(`linbp`.BodyPartTitle,\'\')),\'\') AS Name, `linbp`.BodyPartTypeID AS ParentID FROM `linbp`
WHERE linbp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:185:"SELECT 
`linbp`.BodyPartID AS ID, NULLIF(CONCAT(IFNULL(`linbp`.BodyPartTitle,\'\')),\'\') AS Name, `linbp`.BodyPartTypeID AS ParentID FROM `linbp`

WHERE `linbp`.BodyPartID = \'/*recordID*/\'";s:11:"parentField";s:14:"BodyPartTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:1;}s:14:"BodyLocationID";O:14:"coderadiofield":29:{s:4:"name";s:14:"BodyLocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'52\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'52\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lini";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InjuryIllnessDesc";O:9:"memofield":15:{s:4:"name";s:17:"InjuryIllnessDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Injury or Illness");

//field value array
$data = array(
        'InjuryIllnessID' => '',
         'LossInjuryID' => '',
         'IncidentReportID' => '',
         'OrganizationID' => '',
         'InjuryNatureCategoryID' => '',
         'InjuryNatureTypeID' => '',
         'InjuryNatureID' => '',
         'BodyPartCategoryID' => '',
         'BodyPartTypeID' => '',
         'BodyPartID' => '',
         'BodyLocationID' => '',
         'InjuryIllnessDesc' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'InjuryIllnessID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lini`.InjuryIllnessID,
   NULLIF(CONCAT(IFNULL(`org2`.Name,''),' | ',IFNULL(`ppl1`.DisplayName,'')),' | ') AS LossInjury,
   `lini`.LossInjuryID,
   `clm1`.IncidentReportID AS IncidentReportID,
   `org1`.Name AS Organization,
   `lin1`.OrganizationID AS OrganizationID,
   `cod1`.Description AS InjuryNatureCategory,
   `linnt1`.InjuryNatureCategoryID AS InjuryNatureCategoryID,
   NULLIF(CONCAT(IFNULL(`linnt2`.NatureType,'')),'') AS InjuryNatureType,
   `linna1`.InjuryNatureTypeID AS InjuryNatureTypeID,
   NULLIF(CONCAT(IFNULL(`linna1`.InjuryNatureTitle,'')),'') AS InjuryNature,
   `lini`.InjuryNatureID,
   `cod2`.Description AS BodyPartCategory,
   `lini`.BodyPartCategoryID,
   NULLIF(CONCAT(IFNULL(`linbt1`.PartType,'')),'') AS BodyPartType,
   `linbp1`.BodyPartTypeID AS BodyPartTypeID,
   NULLIF(CONCAT(IFNULL(`linbp1`.BodyPartTitle,'')),'') AS BodyPart,
   `lini`.BodyPartID,
   `cod3`.Description AS BodyLocation,
   `lini`.BodyLocationID,
   `lini`.InjuryIllnessDesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`org2`.Name,''),' | ',IFNULL(`ppl1`.DisplayName,'')),' | '),''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`linna1`.InjuryNatureTitle,'')),''),''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`linbp1`.BodyPartTitle,'')),''),''),' | ',IFNULL(`org1`.Name,'')),' |  |  | ') AS RecordLabel
FROM `lini`
   
     LEFT OUTER JOIN `lin` AS lin1 
   ON (`lini`.LossInjuryID = `lin1`.LossInjuryID )
     LEFT OUTER JOIN `linnt` AS linnt1 
   ON (`lini`.InjuryNatureID = `linnt1`.InjuryNatureTypeID )
     LEFT OUTER JOIN `linna` AS linna1 
   ON (`lini`.InjuryNatureID = `linna1`.InjuryNatureID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`lini`.BodyPartCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '51')
     LEFT OUTER JOIN `linbp` AS linbp1 
   ON (`lini`.BodyPartID = `linbp1`.BodyPartID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`lini`.BodyLocationID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '52')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin1`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lin'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '44')
     LEFT OUTER JOIN `org` AS org2 
   ON (`lin1`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `clm` AS clm1 
    ON (`lin1`.LossInjuryID = `clm1`.RelatedRecordID 
     AND `clm1`.RelatedModuleID = 'lin'
     AND `clm1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`lin1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`linnt1`.InjuryNatureCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '73')
     LEFT OUTER JOIN `linnt` AS linnt2 
   ON (`linna1`.InjuryNatureTypeID = `linnt2`.InjuryNatureTypeID )
     LEFT OUTER JOIN `linbt` AS linbt1 
   ON (`linbp1`.BodyPartTypeID = `linbt1`.BodyPartTypeID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE
   lini.InjuryIllnessID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Injury or Illness");
        $screenPhrase = gettext("Form|Edit summary information about the nature and body parts associated with an injury or illness");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Injuries and/or Illnesses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'InjuryIllnessID' => gettext("Injury or Illness ID|An automatically assigned number used to associate injuries and/or illnesses with natures of injury/illness and affected body parts"),
   'LossInjuryID' => gettext("Loss Injury|A description of the injury loss based on a combination of field values assigned from within the Loss Injury module"),
   'IncidentReportID' => gettext("Incident Report ID|An automatically assigned number used to track situations and incidents"),
   'OrganizationID' => gettext("Organization|The organization accountable for the mitigation of this loss and control of future losses"),
   'InjuryNatureCategoryID' => gettext("Nature Category|A generic term or phrase used to group natures of injury or illness"),
   'InjuryNatureTypeID' => gettext("Nature Type|A more specific term or phrase used to describe a nature of injury or illness"),
   'InjuryNatureID' => gettext("Nature of Injury|A detailed description of the nature of the injury or illness"),
   'BodyPartCategoryID' => gettext("Body Part Category|A generic term or phrase used to group body parts"),
   'BodyPartTypeID' => gettext("Body Part Type|A combined field used to describe this body part when associating it with other records"),
   'BodyPartID' => gettext("Body Part|The specific part/s of the body affected by the injury or illness (i.e. leg, arm, hand)"),
   'BodyLocationID' => gettext("Body Location|The specific location of the part/s of the body affected by the injury or illness (i.e. left, right, upper)"),
   'InjuryIllnessDesc' => gettext("Injury or Illness Description|A brief description of the nature of this specific injury or illness to this specific body part")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['LossInjuryID'], ShortPhrase($phrases['LossInjuryID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['LossInjuryID']->invalid = TRUE;
            }
$vMsg = Validate($data['InjuryNatureID'], ShortPhrase($phrases['InjuryNatureID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InjuryNatureID']->invalid = TRUE;
            }
$vMsg = Validate($data['BodyPartCategoryID'], ShortPhrase($phrases['BodyPartCategoryID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BodyPartCategoryID']->invalid = TRUE;
            }
$vMsg = Validate($data['BodyPartID'], ShortPhrase($phrases['BodyPartID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BodyPartID']->invalid = TRUE;
            }
$vMsg = Validate($data['BodyLocationID'], ShortPhrase($phrases['BodyLocationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BodyLocationID']->invalid = TRUE;
            }
$vMsg = Validate($data['InjuryIllnessDesc'], ShortPhrase($phrases['InjuryIllnessDesc']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InjuryIllnessDesc']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Injuries and/or Illnesses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Injury or Illness") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about the nature and body parts associated with an injury or illness") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Injury or Illness") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>