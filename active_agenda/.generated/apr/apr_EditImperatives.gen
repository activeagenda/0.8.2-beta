<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:15:{s:14:"AssetProtectID";O:9:"viewfield":16:{s:4:"name";s:14:"AssetProtectID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Record ID|An automatically assigned number used to track asset protection methods and criteria";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"RelatedModuleRecord";O:9:"viewfield":16:{s:4:"name";s:19:"RelatedModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Related Record|A combined field used to display the related module name and record ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"RelatedRecordDescription";O:9:"viewfield":16:{s:4:"name";s:24:"RelatedRecordDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record Description|A description of the related record based on a combination of field values assigned from within the related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ReviewOrganization";O:9:"viewfield":16:{s:4:"name";s:18:"ReviewOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Review Organization|The organization where this item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ReviewLocation";O:9:"viewfield":16:{s:4:"name";s:14:"ReviewLocation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Review Location|Specific location within the facility where the item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Person Accountable|The name of the person with accountability for the audit item";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OccurrenceType";O:9:"viewfield":16:{s:4:"name";s:14:"OccurrenceType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:113:"Occurrence Type|Whether the item review is driven by a triggering event or occurs as an ongoing periodic activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"AssetProtectCategory";O:9:"viewfield":16:{s:4:"name";s:20:"AssetProtectCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:120:"Category|A general category used to catgorize asset protection measures for greater flexibility in developing checklists";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"AssetProtectPurpose";O:9:"viewfield":16:{s:4:"name";s:19:"AssetProtectPurpose";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Purpose|The purpose of the asset protection method or measure";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ScheduleFrequency";O:9:"viewfield":16:{s:4:"name";s:17:"ScheduleFrequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Schedule Frequency|A combined field used to describe the asset protection schedule frequency when associating it with other records";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"AssetProtectTitle";O:9:"viewfield":16:{s:4:"name";s:17:"AssetProtectTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:209:"Title|A short title used to describe the item to be reviewed or audited. This title should be concise, but descriptive enough for the person performing the asset protection activity to easily identify the item";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"AssetProtectInstruct";O:9:"viewfield":16:{s:4:"name";s:20:"AssetProtectInstruct";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Instructions|Brief instructions for the person performing the asset protection activity";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"AcceptableCriteria";O:9:"viewfield":16:{s:4:"name";s:18:"AcceptableCriteria";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Acceptable Criteria|A brief description of the acceptable criteria for this asset or item";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ItemStatus";O:9:"viewfield":16:{s:4:"name";s:10:"ItemStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Review Item Status|The present status of the review item";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskImperatives";O:9:"viewfield":16:{s:4:"name";s:15:"RiskImperatives";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Risk Imperatives|A list of associated Risk Imperatives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Asset Protection Item");

//field value array
$data = array(
        'AssetProtectID' => '',
         'RelatedModuleRecord' => '',
         'RelatedRecordDescription' => '',
         'ReviewOrganization' => '',
         'ReviewLocation' => '',
         'PersonAccountable' => '',
         'OccurrenceType' => '',
         'AssetProtectCategory' => '',
         'AssetProtectPurpose' => '',
         'ScheduleFrequency' => '',
         'AssetProtectTitle' => '',
         'AssetProtectInstruct' => '',
         'AcceptableCriteria' => '',
         'ItemStatus' => '',
         'RiskImperatives' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:10:"selectgrid":50:{s:16:"availableIDField";s:6:"CodeID";s:18:"availableNameField";s:11:"Description";s:16:"listAvailableSQL";s:114:"SELECT `cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod` WHERE
cod._Deleted = 0 AND cod.CodeTypeID = \'234\'
";s:14:"listConditions";a:0:{}s:15:"listSelectedSQL";s:302:"SELECT `rsk`.RiskImperativeID AS ID, `cod1`.Description AS Name  FROM rsk  
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
 WHERE  rsk.RelatedModuleID = \'apr\' AND rsk.RelatedRecordID = \'/*recordID*/\' AND rsk._Deleted = 0 ORDER BY Name";s:23:"listExistingSelectedSQL";s:281:"SELECT `rsk`.RiskImperativeID AS ID, `cod1`.Description AS Name , rsk._Deleted FROM rsk  
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
 WHERE  rsk.RelatedModuleID = \'apr\' AND rsk.RelatedRecordID = \'/*recordID*/\'";s:9:"insertSQL";s:148:"INSERT INTO rsk (RiskImperativeID, RelatedModuleID,RelatedRecordID, _ModBy, _ModDate) VALUES (\'/*value*/\', \'apr\',\'/*recordID*/\', /*userID*/, NOW());";s:15:"insertRemoteSQL";N;s:9:"removeSQL";s:232:"UPDATE rsk SET 
                _Deleted = 1,
                _ModBy = /*userID*/, 
                _ModDate = NOW()
            WHERE ImperativeID = /*rowID*/ AND rsk.RelatedModuleID = \'apr\' AND rsk.RelatedRecordID = \'/*recordID*/\'";s:15:"removeRemoteSQL";N;s:10:"restoreSQL";s:232:"UPDATE rsk SET 
                _Deleted = 0,
                _ModBy = /*userID*/, 
                _ModDate = NOW()
            WHERE ImperativeID = /*rowID*/ AND rsk.RelatedModuleID = \'apr\' AND rsk.RelatedRecordID = \'/*recordID*/\'";s:16:"restoreRemoteSQL";N;s:14:"getRemoteIDSQL";s:147:"SELECT ImperativeID AS RowID FROM rsk WHERE RiskImperativeID = \'/*value*/\' AND rsk.RelatedModuleID = \'apr\' AND rsk.RelatedRecordID = \'/*recordID*/\'";s:17:"getRemoteRowIDSQL";N;s:6:"logSQL";s:173:"INSERT INTO rsk_l (RiskImperativeID, RelatedModuleID,RelatedRecordID, _ModBy, _ModDate, _Deleted) VALUES (\'/*value*/\', \'apr\',\'/*recordID*/\', /*userID*/, NOW(), /*deleted*/);";s:12:"logRemoteSQL";N;s:14:"useRemoteField";b:0;s:11:"listKeyType";s:0:"";s:9:"updateSQL";N;s:9:"deleteSQL";N;s:10:"getFormSQL";s:0:"";s:9:"getRowSQL";s:0:"";s:12:"remoteFields";N;s:11:"hasGridForm";b:0;s:10:"FormFields";a:0:{}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";N;s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"rsk";s:6:"phrase";s:16:"Risk Imperatives";s:6:"number";i:1;s:6:"Fields";a:0:{}s:8:"countSQL";N;s:7:"listSQL";N;s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:16:"primaryListField";s:14:"RiskImperative";s:10:"conditions";a:2:{s:15:"RelatedModuleID";s:3:"apr";s:15:"RelatedRecordID";s:12:"/*recordID*/";}s:12:"listModuleID";s:3:"cod";}');


    /**guidanceGrid**/

    $PKField = 'AssetProtectID';

    $ownerField = 'ReviewOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "BestPractices";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `apr`.AssetProtectID,
   CONCAT('internal:view.php?mdl=',`apr`.RelatedModuleID,'&rid=',`apr`.RelatedRecordID) AS RelatedRecordLink,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' Module (Record ID: ',IFNULL(`apr`.RelatedRecordID,''),')'),' Module (Record ID: )') AS RelatedModuleRecord,
   `rdc1`.Value AS RelatedRecordDescription,
   `org2`.Name AS ReviewOrganization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS ReviewLocation,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS OccurrenceType,
   `cod3`.Description AS AssetProtectCategory,
   `cod4`.Description AS AssetProtectPurpose,
   NULLIF(CONCAT(IFNULL(`apr`.SchedFreq,''),' ',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),''),'')),' ') AS ScheduleFrequency,
   `apr`.AssetProtectTitle,
   `apr`.AssetProtectInstruct,
   `apr`.AcceptableCriteria,
   `cod2`.Description AS ItemStatus,
   `rsk1`.RiskImperatives AS RiskImperatives,
   NULLIF(CONCAT(IFNULL(`org2`.Name,''),' | ',IFNULL(`apr`.AssetProtectTitle,''),' | ',IFNULL(`mod1`.Name,''),' | ',IFNULL(`rdc1`.Value,'')),' |  |  | ') AS RecordLabel,
   `apr`.ReviewOrganizationID
FROM `apr`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`apr`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`apr`.RelatedRecordID = rdc1.RecordID AND `apr`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `org` AS org2 
   ON (`apr`.ReviewOrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'apr'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`apr`.AssetProtectID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'apr'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '159')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`apr`.OccurrenceTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '39')
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`apr`.AssetProtectCategoryID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '50')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`apr`.AssetProtectPurposeID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '101')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`apr`.SchedFreqUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`apr`.ItemStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '102')
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS RiskImperatives,
`rsk`.RelatedRecordID FROM `rsk` 

LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '234')
 WHERE `rsk`._Deleted = 0 
 AND RelatedModuleID = 'apr' 
 AND 'apr' = `rsk`.RelatedModuleID
GROUP BY `rsk`.RelatedRecordID 
) AS rsk1 
ON (`apr`.AssetProtectID = rsk1.RelatedRecordID) 
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   apr.AssetProtectID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Asset Protection Item");
        $screenPhrase = gettext("Imperatives|Associate risk imperatives with a asset protection requirement");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Asset Protection");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'AssetProtectID' => gettext("Record ID|An automatically assigned number used to track asset protection methods and criteria"),
   'RelatedModuleRecord' => gettext("Related Record|A combined field used to display the related module name and record ID"),
   'RelatedRecordDescription' => gettext("Record Description|A description of the related record based on a combination of field values assigned from within the related module"),
   'ReviewOrganization' => gettext("Review Organization|The organization where this item is located and can be reviewed"),
   'ReviewLocation' => gettext("Review Location|Specific location within the facility where the item is located and can be reviewed"),
   'PersonAccountable' => gettext("Person Accountable|The name of the person with accountability for the audit item"),
   'OccurrenceType' => gettext("Occurrence Type|Whether the item review is driven by a triggering event or occurs as an ongoing periodic activity"),
   'AssetProtectCategory' => gettext("Category|A general category used to catgorize asset protection measures for greater flexibility in developing checklists"),
   'AssetProtectPurpose' => gettext("Purpose|The purpose of the asset protection method or measure"),
   'ScheduleFrequency' => gettext("Schedule Frequency|A combined field used to describe the asset protection schedule frequency when associating it with other records"),
   'AssetProtectTitle' => gettext("Title|A short title used to describe the item to be reviewed or audited. This title should be concise, but descriptive enough for the person performing the asset protection activity to easily identify the item"),
   'AssetProtectInstruct' => gettext("Instructions|Brief instructions for the person performing the asset protection activity"),
   'AcceptableCriteria' => gettext("Acceptable Criteria|A brief description of the acceptable criteria for this asset or item"),
   'ItemStatus' => gettext("Review Item Status|The present status of the review item"),
   'RiskImperatives' => gettext("Risk Imperatives|A list of associated Risk Imperatives")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Asset Protection Items"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Asset Protection Item") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an asset protection method and related criteria") );
      $tempTabs['Imperatives'] = array( "", gettext("Imperatives|Associate risk imperatives with a asset protection requirement") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with a asset protection requirement") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Imperatives'] = array( "", gettext("New Asset Protection Item") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>