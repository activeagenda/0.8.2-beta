<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:13:"MedicalExamID";O:9:"viewfield":16:{s:4:"name";s:13:"MedicalExamID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Record ID|An automatically assigned number used to track medical examinations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"MedicalExamTypeID";O:14:"invisiblefield":11:{s:4:"name";s:17:"MedicalExamTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Organization|The name of the organization requesting the medical examination";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Person Accountable|The individual assigned primary accountability for managing the medical examination process for the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ExamCategory";O:9:"viewfield":16:{s:4:"name";s:12:"ExamCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Exam Category|A broadly defined title or phrase used to group similar types of medical exams";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"MedicalExamType";O:9:"viewfield":16:{s:4:"name";s:15:"MedicalExamType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Exam Type|The specific type of medical examination to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"MedicalExamTitle";O:9:"viewfield":16:{s:4:"name";s:16:"MedicalExamTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Title|A title or phrase used to describe the medical examination";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"MedicalExamDesc";O:9:"viewfield":16:{s:4:"name";s:15:"MedicalExamDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Description|A brief but thorough description of the medical examination";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"MedicalExamCriteria";O:9:"viewfield":16:{s:4:"name";s:19:"MedicalExamCriteria";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Criteria|A brief but thorough description of the qualification criteria associated with the medical examination";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ScheduleFrequency";O:9:"viewfield":16:{s:4:"name";s:17:"ScheduleFrequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Schedule Frequency|The frequency at which the medical examination shall be performed for individuals meeting the examination criteria";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Medical Examination");

//field value array
$data = array(
        'MedicalExamID' => '',
         'MedicalExamTypeID' => '',
         'Organization' => '',
         'PersonAccountable' => '',
         'ExamCategory' => '',
         'MedicalExamType' => '',
         'MedicalExamTitle' => '',
         'MedicalExamDesc' => '',
         'MedicalExamCriteria' => '',
         'ScheduleFrequency' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1564:"SELECT 
   `medse`.ScheduledExamID,
   `ppl1`.DisplayName AS Examinee,
   `acc1`.PersonAccountableID AS ExamineeID,
   `org1`.Name AS ScheduledProvider,
   `medse`.ScheduledProviderID,
   `dat1`.RelatedDate AS ScheduledDate,
   `dat2`.RelatedDate AS ActualExamDate,
   `cod1`.Description AS ExamResults,
   `medse`.ExamResultsID,
   `medse`.ExamResultsDetail,
   `med1`.OrganizationID AS OrganizationID
FROM `medse`
   
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`medse`.ScheduledExamID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'medse\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'86\')
     LEFT OUTER JOIN `org` AS org1 
   ON (`medse`.ScheduledProviderID = `org1`.OrganizationID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`medse`.ScheduledExamID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'medse\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'51\')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`medse`.ScheduledExamID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'medse\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'24\')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`medse`.ExamResultsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'282\')
     LEFT OUTER JOIN `med` AS med1 
   ON (`medse`.MedicalExamID = `med1`.MedicalExamID )
     LEFT OUTER JOIN `pple` AS pple1 
   ON (`acc1`.PersonAccountableID = `pple1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple1`.PersonID = `ppl1`.PersonID )
WHERE
   medse.ScheduledExamID=\'/**RowID**/\'";s:9:"getRowSQL";s:1554:"SELECT 
   `medse`.ScheduledExamID,
   `ppl1`.DisplayName AS Examinee,
   `dat1`.RelatedDate AS ScheduledDate,
   `dat2`.RelatedDate AS ActualExamDate,
   `cod1`.Description AS ExamResults,
   IFNULL(`dat2`.RelatedDate, 0) + IFNULL(NULLIF(CONCAT(IFNULL(`med1`.SchedFreq,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' \'), 0) AS NextExamDate,
   `med1`.OrganizationID AS OrganizationID
FROM `medse`
   
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`medse`.ScheduledExamID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'medse\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'86\')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`medse`.ScheduledExamID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'medse\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'51\')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`medse`.ScheduledExamID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'medse\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'24\')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`medse`.ExamResultsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'282\')
     LEFT OUTER JOIN `med` AS med1 
   ON (`medse`.MedicalExamID = `med1`.MedicalExamID )
     LEFT OUTER JOIN `pple` AS pple1 
   ON (`acc1`.PersonAccountableID = `pple1`.PersonID )
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`med1`.SchedFreqUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple1`.PersonID = `ppl1`.PersonID )
WHERE
   medse.ScheduledExamID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:7:{s:15:"ScheduledExamID";O:14:"invisiblefield":11:{s:4:"name";s:15:"ScheduledExamID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Record ID|An automatically assigned number used to track medical examinations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:10:"ExamineeID";O:16:"personcombofield":29:{s:4:"name";s:10:"ExamineeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Examinee|The individual scheduled for medical examination";s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:190:"SELECT 
`pple`.PersonID AS ID, `ppl1`.DisplayName AS Name FROM `pple`
 
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple`.PersonID = `ppl1`.PersonID )
WHERE pple._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:186:"SELECT 
`pple`.PersonID AS ID, `ppl1`.DisplayName AS Name FROM `pple`
 
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple`.PersonID = `ppl1`.PersonID )

WHERE `pple`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"medse";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`ppl1`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:14:"ExamineeID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"ScheduledProviderID";O:13:"orgcombofield":26:{s:4:"name";s:19:"ScheduledProviderID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Scheduled Provider|The name of the provider scheduled to perform the medical examination";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"medse";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:17:"MedicalProviderID";s:15:"suppressItemAdd";b:0;}s:13:"ScheduledDate";O:9:"datefield":15:{s:4:"name";s:13:"ScheduledDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Schedule Date|The date the medical examination is scheduled to occur";s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"ActualExamDate";O:9:"datefield":15:{s:4:"name";s:14:"ActualExamDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:60:"Exam Date|The date the medical examination actually occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"ExamResultsID";O:14:"coderadiofield":29:{s:4:"name";s:13:"ExamResultsID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Exam Results|The results of the medical examination";s:8:"dataType";s:3:"int";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'282\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'282\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"medse";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"ExamResultsDetail";O:9:"memofield":15:{s:4:"name";s:17:"ExamResultsDetail";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Details|A detailed description of the examination results";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:15:"ScheduledExamID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"medse";s:6:"phrase";s:15:"Scheduled Exams";s:6:"number";i:1;s:6:"Fields";a:6:{s:15:"ScheduledExamID";O:14:"invisiblefield":11:{s:4:"name";s:15:"ScheduledExamID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Record ID|An automatically assigned number used to track medical examinations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:8:"Examinee";O:9:"viewfield":16:{s:4:"name";s:8:"Examinee";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Examinee|The individual scheduled for medical examination";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"ScheduledDate";O:9:"viewfield":16:{s:4:"name";s:13:"ScheduledDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Schedule Date|The date the medical examination is scheduled to occur";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ActualExamDate";O:9:"viewfield":16:{s:4:"name";s:14:"ActualExamDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:60:"Exam Date|The date the medical examination actually occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ExamResults";O:9:"viewfield":16:{s:4:"name";s:11:"ExamResults";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Exam Results|The results of the medical examination";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"NextExamDate";O:9:"viewfield":16:{s:4:"name";s:12:"NextExamDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:145:"Next Exam Date|The date of the next required examination based on the actual exam date and the schedule frequency associated with the examination";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"medse";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:8:"countSQL";s:112:"SELECT 
    count(*) 
FROM `medse`
   
WHERE medse._Deleted = 0
   AND `medse`.MedicalExamID = \'/**RecordID**/\'
";s:7:"listSQL";s:1544:"SELECT 
   `medse`.ScheduledExamID,
`med1`.OrganizationID AS OrganizationID,
`ppl1`.DisplayName AS Examinee,
`dat1`.RelatedDate AS ScheduledDate,
`dat2`.RelatedDate AS ActualExamDate,
`cod1`.Description AS ExamResults,
IFNULL(`dat2`.RelatedDate, 0) + IFNULL(NULLIF(CONCAT(IFNULL(`med1`.SchedFreq,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' \'), 0) AS NextExamDate
FROM `medse`

   LEFT OUTER JOIN `med` AS med1 
   ON (`medse`.MedicalExamID = `med1`.MedicalExamID )
   LEFT OUTER JOIN `acc` AS acc1 
    ON (`medse`.ScheduledExamID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'medse\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'86\')
   LEFT OUTER JOIN `dat` AS dat1 
    ON (`medse`.ScheduledExamID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'medse\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'51\')
   LEFT OUTER JOIN `dat` AS dat2 
    ON (`medse`.ScheduledExamID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'medse\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'24\')
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`medse`.ExamResultsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'282\')
   LEFT OUTER JOIN `uts` AS uts1 
   ON (`med1`.SchedFreqUnitsID = `uts1`.UnitID )
   LEFT OUTER JOIN `pple` AS pple1 
   ON (`acc1`.PersonAccountableID = `pple1`.PersonID )
   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple1`.PersonID = `ppl1`.PersonID )
WHERE medse._Deleted = 0
AND `medse`.MedicalExamID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:13:"MedicalExamID";s:9:"parentKey";s:13:"MedicalExamID";s:8:"PKFields";a:1:{i:0;s:15:"ScheduledExamID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'MedicalExamID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Agreements";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `med`.MedicalExamID,
   `med`.MedicalExamTypeID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS ExamCategory,
   NULLIF(CONCAT(IFNULL(`medet1`.ExamType,'')),'') AS MedicalExamType,
   `med`.MedicalExamTitle,
   `med`.MedicalExamDesc,
   `med`.MedicalExamCriteria,
   NULLIF(CONCAT(IFNULL(`med`.SchedFreq,''),' ',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),''),'')),' ') AS ScheduleFrequency,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`medet1`.ExamType,'')),''),''),' | ',IFNULL(`med`.MedicalExamTitle,'')),' |  | ') AS RecordLabel,
   `med`.OrganizationID
FROM `med`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`med`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`med`.MedicalExamID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'med'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '186')
     LEFT OUTER JOIN `medet` AS medet1 
   ON (`med`.MedicalExamTypeID = `medet1`.MedicalExamTypeID )
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`med`.SchedFreqUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`medet1`.ExamCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '95')
WHERE
   med.MedicalExamID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Medical Examination");
        $screenPhrase = gettext("Schedule|Associate exam schedules with the medical examination");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Medical Examinations");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'MedicalExamID' => gettext("Record ID|An automatically assigned number used to track medical examinations"),
   'MedicalExamTypeID' => gettext("Exam Type|The specific type of medical examination to be performed"),
   'Organization' => gettext("Organization|The name of the organization requesting the medical examination"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the medical examination process for the organization"),
   'ExamCategory' => gettext("Exam Category|A broadly defined title or phrase used to group similar types of medical exams"),
   'MedicalExamType' => gettext("Exam Type|The specific type of medical examination to be performed"),
   'MedicalExamTitle' => gettext("Title|A title or phrase used to describe the medical examination"),
   'MedicalExamDesc' => gettext("Description|A brief but thorough description of the medical examination"),
   'MedicalExamCriteria' => gettext("Criteria|A brief but thorough description of the qualification criteria associated with the medical examination"),
   'ScheduleFrequency' => gettext("Schedule Frequency|The frequency at which the medical examination shall be performed for individuals meeting the examination criteria")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Medical Examinations"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Medical Examination") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a medical examination") );
      $tempTabs['ExamElements'] = array( "edit.php?scr=ExamElements&$tabsQS", gettext("Elements|Associate elements with the medical examination") );
      $tempTabs['ExamServices'] = array( "edit.php?scr=ExamServices&$tabsQS", gettext("Services|Associate services with the medical examination") );
      $tempTabs['ExamProcedures'] = array( "edit.php?scr=ExamProcedures&$tabsQS", gettext("Procedures|Associate procedures with the medical examination") );
      $tempTabs['ScheduledExams'] = array( "", gettext("Schedule|Associate exam schedules with the medical examination") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate agreements with the medical examination") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the medical examination") );
      $tempTabs['BusinessContinuity'] = array( "edit.php?scr=BusinessContinuity&$tabsQS", gettext("Continuity|Associate business continuity requirements with the medical examination") );
      $tempTabs['Documents'] = array( "edit.php?scr=Documents&$tabsQS", gettext("Documents|Associate documents with the medical examination") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Exposures|Associate cost exposures with the medical examination") );
      $tempTabs['Opportunities'] = array( "edit.php?scr=Opportunities&$tabsQS", gettext("Opportunities|Associate financial opportunities with the medical examination") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the medical examination") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the medical examination") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance consequences with the medical examination") );
      $tempTabs['JobTitles'] = array( "edit.php?scr=JobTitles&$tabsQS", gettext("Job Titles|Associate job titles with the medical examination") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the medical examination") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Associate responsibilities with the medical examination") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the medical examination") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the medical examination") );
      $tempTabs['Training'] = array( "edit.php?scr=Training&$tabsQS", gettext("Training|Associate training with the medical examination") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the medical examination") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the medical examination") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate physical files with the medical examination") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the medical examination") , 'bpc');
      $tempTabs['Reports'] = array( "reports.php?scr=Reports&$tabsQS", gettext("Reports|View reports for the medical examination") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['ScheduledExams'] = array( "", gettext("New Exam") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>