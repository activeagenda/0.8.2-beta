<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:5:{s:15:"DashboardItemID";O:9:"viewfield":16:{s:4:"name";s:15:"DashboardItemID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Record ID|An automatically assigned number used to track dashboard items";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Person";O:9:"viewfield":16:{s:4:"name";s:6:"Person";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"User|The user on whose dashboard this item appears.";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Module";O:9:"viewfield":16:{s:4:"name";s:6:"Module";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Module|The name of the module from which the data for the dashboard item is drawn.";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Title";O:9:"viewfield":16:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Title|A descriptive title used to identify the dashboard item";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DashboardType";O:9:"viewfield":16:{s:4:"name";s:13:"DashboardType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Dashboard Type|Type of dashboard item, such as summary or row-level";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Dashboard Item");

//field value array
$data = array(
        'DashboardItemID' => '',
         'Person' => '',
         'Module' => '',
         'Title' => '',
         'DashboardType' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:132:"SELECT 
   `dsbd`.DashboardFieldID,
   `dsbd`.Name,
   `dsbd`.SortOrder
FROM `dsbd`
   
WHERE
   dsbd.DashboardFieldID=\'/**RowID**/\'";s:9:"getRowSQL";s:132:"SELECT 
   `dsbd`.DashboardFieldID,
   `dsbd`.Name,
   `dsbd`.SortOrder
FROM `dsbd`
   
WHERE
   dsbd.DashboardFieldID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:16:"DashboardFieldID";O:9:"viewfield":16:{s:4:"name";s:16:"DashboardFieldID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Record ID|An automatically assigned number used to track dashboard fields";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Name";O:9:"editfield":14:{s:4:"name";s:4:"Name";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Field Name|The name of the related Module Field";s:8:"dataType";s:11:"varchar(30)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";}s:9:"SortOrder";O:9:"editfield":14:{s:4:"name";s:9:"SortOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Sort Order|The relative order in which the field should be displayed.";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"3";s:5:"align";s:4:"left";}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:16:"DashboardFieldID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"dsbd";s:6:"phrase";s:16:"Fields Displayed";s:6:"number";i:1;s:6:"Fields";a:3:{s:16:"DashboardFieldID";O:9:"viewfield":16:{s:4:"name";s:16:"DashboardFieldID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Record ID|An automatically assigned number used to track dashboard fields";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Name";O:9:"viewfield":16:{s:4:"name";s:4:"Name";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Field Name|The name of the related Module Field";s:8:"dataType";s:11:"varchar(30)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"SortOrder";O:9:"viewfield":16:{s:4:"name";s:9:"SortOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Sort Order|The relative order in which the field should be displayed.";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"dsbd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:111:"SELECT 
    count(*) 
FROM `dsbd`
   
WHERE dsbd._Deleted = 0
   AND `dsbd`.DashboardItemID = \'/**RecordID**/\'
";s:7:"listSQL";s:150:"SELECT 
   `dsbd`.DashboardFieldID,
`dsbd`.Name,
`dsbd`.SortOrder
FROM `dsbd`

WHERE dsbd._Deleted = 0
AND `dsbd`.DashboardItemID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"DashboardItemID";s:9:"parentKey";s:15:"DashboardItemID";s:8:"PKFields";a:1:{i:0;s:16:"DashboardFieldID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'DashboardItemID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "FilterConditions";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `dsb`.DashboardItemID,
   `ppl1`.DisplayName AS Person,
   `mod1`.Name AS Module,
   `dsb`.Title,
   `dsbt1`.Title AS DashboardType,
   NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' | ',IFNULL(`dsb`.ModuleID,''),' | ',IFNULL(`dsbt1`.Title,'')),' |  | ') AS RecordLabel,
   `ppl1`.OrganizationID AS OrganizationID
FROM `dsb`
   
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`dsb`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`dsb`.ModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `dsbt` AS dsbt1 
   ON (`dsb`.DashboardTypeID = `dsbt1`.DashboardTypeID )
WHERE
   dsb.DashboardItemID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Dashboard Item");
        $screenPhrase = gettext("Display|Assign the fields to be displayed in the dashboard item");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Dashboard Items");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'DashboardItemID' => gettext("Record ID|An automatically assigned number used to track dashboard items"),
   'Person' => gettext("User|The user on whose dashboard this item appears."),
   'Module' => gettext("Module|The name of the module from which the data for the dashboard item is drawn."),
   'Title' => gettext("Title|A descriptive title used to identify the dashboard item"),
   'DashboardType' => gettext("Dashboard Type|Type of dashboard item, such as summary or row-level")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Dashboard Items"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Dashboard Item") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a dashboard item") );
      $tempTabs['DisplayFields'] = array( "", gettext("Display|Assign the fields to be displayed in the dashboard item") );
      $tempTabs['FilterConditions'] = array( "edit.php?scr=FilterConditions&$tabsQS", gettext("Filter|Assign the filter conditions that data is selected by") );
      $tempTabs['SortOrder'] = array( "edit.php?scr=SortOrder&$tabsQS", gettext("Order|Assign the filter conditions that data is sorted by") );
      $tempTabs['SummaryConditions'] = array( "edit.php?scr=SummaryConditions&$tabsQS", gettext("Summarize|Assign the filter conditions that data is summarized by (does not apply to ") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['DisplayFields'] = array( "", gettext("New Dashboard Item") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>