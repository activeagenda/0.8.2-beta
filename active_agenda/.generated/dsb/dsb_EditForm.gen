<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:15:"DashboardItemID";O:9:"viewfield":16:{s:4:"name";s:15:"DashboardItemID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Record ID|An automatically assigned number used to track dashboard items";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"ModuleID";O:10:"combofield":26:{s:4:"name";s:8:"ModuleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"mod";s:10:"foreignKey";s:8:"ModuleID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:102:"SELECT 
`mod`.ModuleID AS ID, `mod`.Name AS Name FROM `mod`
WHERE mod._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:98:"SELECT 
`mod`.ModuleID AS ID, `mod`.Name AS Name FROM `mod`

WHERE `mod`.ModuleID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"dsb";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:5:"Title";O:9:"editfield":14:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:8:"PersonID";O:16:"personcombofield":29:{s:4:"name";s:8:"PersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"dsb";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:12:"PersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"DashboardTypeID";O:10:"combofield":26:{s:4:"name";s:15:"DashboardTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"dsbt";s:10:"foreignKey";s:15:"DashboardTypeID";s:12:"foreignField";s:5:"Title";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:114:"SELECT 
`dsbt`.DashboardTypeID AS ID, `dsbt`.Title AS Name FROM `dsbt`
WHERE dsbt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:117:"SELECT 
`dsbt`.DashboardTypeID AS ID, `dsbt`.Title AS Name FROM `dsbt`

WHERE `dsbt`.DashboardTypeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"dsb";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"DisplayRows";O:9:"editfield":14:{s:4:"name";s:11:"DisplayRows";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"3";s:5:"align";s:4:"left";}s:10:"PageColumn";O:9:"editfield":14:{s:4:"name";s:10:"PageColumn";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"3";s:5:"align";s:4:"left";}s:9:"SortOrder";O:9:"editfield":14:{s:4:"name";s:9:"SortOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"3";s:5:"align";s:4:"left";}s:9:"CachedSQL";O:9:"memofield":15:{s:4:"name";s:9:"CachedSQL";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:2:"30";s:4:"cols";s:2:"80";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Dashboard Item");

//field value array
$data = array(
        'DashboardItemID' => '',
         'ModuleID' => '',
         'Title' => '',
         'PersonID' => '',
         'DashboardTypeID' => '',
         'DisplayRows' => '',
         'PageColumn' => '',
         'SortOrder' => '',
         'CachedSQL' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'DashboardItemID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "DisplayFields";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `dsb`.DashboardItemID,
   `mod1`.Name AS Module,
   `dsb`.ModuleID,
   `dsb`.Title,
   `ppl1`.DisplayName AS Person,
   `dsb`.PersonID,
   `dsbt1`.Title AS DashboardType,
   `dsb`.DashboardTypeID,
   `dsb`.DisplayRows,
   `dsb`.PageColumn,
   `dsb`.SortOrder,
   `dsb`.CachedSQL,
   NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' | ',IFNULL(`dsb`.ModuleID,''),' | ',IFNULL(`dsbt1`.Title,'')),' |  | ') AS RecordLabel,
   `ppl1`.OrganizationID AS OrganizationID
FROM `dsb`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`dsb`.ModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`dsb`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `dsbt` AS dsbt1 
   ON (`dsb`.DashboardTypeID = `dsbt1`.DashboardTypeID )
WHERE
   dsb.DashboardItemID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Dashboard Item");
        $screenPhrase = gettext("Form|Edit summary information about a dashboard item");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Dashboard Items");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'DashboardItemID' => gettext("Record ID|An automatically assigned number used to track dashboard items"),
   'ModuleID' => gettext("Module|The name of the module from which the data for the dashboard item is drawn."),
   'Title' => gettext("Title|A descriptive title used to identify the dashboard item"),
   'PersonID' => gettext("User|The user on whose dashboard this item appears."),
   'DashboardTypeID' => gettext("Dashboard Type|Type of dashboard item, such as summary or row-level"),
   'DisplayRows' => gettext("Rows Displayed|The number of rows to be displayed by default in this dashboard item."),
   'PageColumn' => gettext("Page Column|The column on the home page where the item should be displayed."),
   'SortOrder' => gettext("Sort Order|The relative order in which the item should be displayed."),
   'CachedSQL' => gettext("Cached SQL Statement|The SQL expression that retrieves the data for the desktop item. This is automatically generated every time the item definitions (in submodules) are modified.")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['ModuleID'], ShortPhrase($phrases['ModuleID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ModuleID']->invalid = TRUE;
            }
$vMsg = Validate($data['Title'], ShortPhrase($phrases['Title']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Title']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonID'], ShortPhrase($phrases['PersonID']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonID']->invalid = TRUE;
            }
$vMsg = Validate($data['DashboardTypeID'], ShortPhrase($phrases['DashboardTypeID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['DashboardTypeID']->invalid = TRUE;
            }
$vMsg = Validate($data['CachedSQL'], ShortPhrase($phrases['CachedSQL']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CachedSQL']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Dashboard Items"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Dashboard Item") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a dashboard item") );
      $tempTabs['DisplayFields'] = array( "edit.php?scr=DisplayFields&$tabsQS", gettext("Display|Assign the fields to be displayed in the dashboard item") );
      $tempTabs['FilterConditions'] = array( "edit.php?scr=FilterConditions&$tabsQS", gettext("Filter|Assign the filter conditions that data is selected by") );
      $tempTabs['SortOrder'] = array( "edit.php?scr=SortOrder&$tabsQS", gettext("Order|Assign the filter conditions that data is sorted by") );
      $tempTabs['SummaryConditions'] = array( "edit.php?scr=SummaryConditions&$tabsQS", gettext("Summarize|Assign the filter conditions that data is summarized by (does not apply to ") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Dashboard Item") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>