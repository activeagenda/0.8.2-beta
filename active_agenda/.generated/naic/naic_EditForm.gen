<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:6:{s:14:"IndustryCodeID";O:9:"viewfield":16:{s:4:"name";s:14:"IndustryCodeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Industry Code|The (primary) Industry Code that describes what an organization does";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"IndustrySectorID";O:10:"combofield":26:{s:4:"name";s:16:"IndustrySectorID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"nais";s:10:"foreignKey";s:16:"IndustrySectorID";s:12:"foreignField";s:14:"IndustrySector";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:145:"SELECT 
`nais`.IndustrySectorID AS ID, NULLIF(CONCAT(IFNULL(`nais`.Title,\'\')),\'\') AS Name FROM `nais`
WHERE nais._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:149:"SELECT 
`nais`.IndustrySectorID AS ID, NULLIF(CONCAT(IFNULL(`nais`.Title,\'\')),\'\') AS Name FROM `nais`

WHERE `nais`.IndustrySectorID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:19:"IndustrySubSectorID";a:1:{s:4:"name";s:19:"IndustrySubSectorID";}}s:8:"moduleID";s:4:"naic";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:19:"IndustrySubSectorID";O:10:"combofield":26:{s:4:"name";s:19:"IndustrySubSectorID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"naiss";s:10:"foreignKey";s:19:"IndustrySubSectorID";s:12:"foreignField";s:17:"IndustrySubSector";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:238:"SELECT 
`naiss`.IndustrySubSectorID AS ID, NULLIF(CONCAT(IFNULL(`naiss`.Title,\'\'),\' | \',IFNULL(`naiss`.IndustrySubSectorID,\'\')),\' | \') AS Name, `naiss`.IndustrySectorID AS ParentID FROM `naiss`
WHERE naiss._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:245:"SELECT 
`naiss`.IndustrySubSectorID AS ID, NULLIF(CONCAT(IFNULL(`naiss`.Title,\'\'),\' | \',IFNULL(`naiss`.IndustrySubSectorID,\'\')),\' | \') AS Name, `naiss`.IndustrySectorID AS ParentID FROM `naiss`

WHERE `naiss`.IndustrySubSectorID = \'/*recordID*/\'";s:11:"parentField";s:16:"IndustrySectorID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"IndustryGroupID";a:1:{s:4:"name";s:15:"IndustryGroupID";}}s:8:"moduleID";s:4:"naic";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:15:"IndustryGroupID";O:10:"combofield":26:{s:4:"name";s:15:"IndustryGroupID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"naig";s:10:"foreignKey";s:15:"IndustryGroupID";s:12:"foreignField";s:13:"IndustryGroup";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:227:"SELECT 
`naig`.IndustryGroupID AS ID, NULLIF(CONCAT(IFNULL(`naig`.Title,\'\'),\' | \',IFNULL(`naig`.IndustryGroupID,\'\')),\' | \') AS Name, `naig`.IndustrySubSectorID AS ParentID FROM `naig`
WHERE naig._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:230:"SELECT 
`naig`.IndustryGroupID AS ID, NULLIF(CONCAT(IFNULL(`naig`.Title,\'\'),\' | \',IFNULL(`naig`.IndustryGroupID,\'\')),\' | \') AS Name, `naig`.IndustrySubSectorID AS ParentID FROM `naig`

WHERE `naig`.IndustryGroupID = \'/*recordID*/\'";s:11:"parentField";s:19:"IndustrySubSectorID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"naic";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:5:"Title";O:9:"editfield":14:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"70";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:11:"Description";O:9:"memofield":15:{s:4:"name";s:11:"Description";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"70";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Industry Code");

//field value array
$data = array(
        'IndustryCodeID' => '',
         'IndustrySectorID' => '',
         'IndustrySubSectorID' => '',
         'IndustryGroupID' => '',
         'Title' => '',
         'Description' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'IndustryCodeID';

    $ownerField = '';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `naic`.IndustryCodeID,
   NULLIF(CONCAT(IFNULL(`nais1`.Title,'')),'') AS IndustrySector,
   `naic`.IndustrySectorID,
   NULLIF(CONCAT(IFNULL(`naiss1`.Title,''),' | ',IFNULL(`naiss1`.IndustrySubSectorID,'')),' | ') AS IndustrySubSector,
   `naic`.IndustrySubSectorID,
   NULLIF(CONCAT(IFNULL(`naig1`.Title,''),' | ',IFNULL(`naig1`.IndustryGroupID,'')),' | ') AS IndustryGroup,
   `naic`.IndustryGroupID,
   `naic`.Title,
   `naic`.Description,
   NULLIF(CONCAT(IFNULL(`naic`.Title,''),' | ',IFNULL(`naic`.IndustryCodeID,'')),' | ') AS RecordLabel
FROM `naic`
   
     LEFT OUTER JOIN `nais` AS nais1 
   ON (`naic`.IndustrySectorID = `nais1`.IndustrySectorID )
     LEFT OUTER JOIN `naiss` AS naiss1 
   ON (`naic`.IndustrySubSectorID = `naiss1`.IndustrySubSectorID )
     LEFT OUTER JOIN `naig` AS naig1 
   ON (`naic`.IndustryGroupID = `naig1`.IndustryGroupID )
WHERE
   naic.IndustryCodeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Industry Code");
        $screenPhrase = gettext("Form|Edit summary information about purchase catalogs");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Industry Codes");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'IndustryCodeID' => gettext("Industry Code|The (primary) Industry Code that describes what an organization does"),
   'IndustrySectorID' => gettext("Industry Sector|The highest level industry sector"),
   'IndustrySubSectorID' => gettext("Industry Subsector|The highest level industry sector"),
   'IndustryGroupID' => gettext("Industry Group|This is a sub-category below industry subsector."),
   'Title' => gettext("Code Title|The title that describes the industry code."),
   'Description' => gettext("Description|A longer description of the industry code.")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Industry Codes"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Industry Code") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about purchase catalogs") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Industry Code") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>