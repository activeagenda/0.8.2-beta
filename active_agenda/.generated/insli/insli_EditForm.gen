<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:11:{s:14:"LossIncreaseID";O:9:"viewfield":16:{s:4:"name";s:14:"LossIncreaseID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:124:"Record ID|An automatically assigned number used to associate loss increases with the development of loss development factors";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"LossDevelopmentFactor";O:9:"viewfield":16:{s:4:"name";s:21:"LossDevelopmentFactor";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:127:"Loss Development Factor|A combined field used to describe the loss development factors when associating them with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"DevelopmentType";O:9:"viewfield":16:{s:4:"name";s:15:"DevelopmentType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Development Type|The type of cost development associated with the factors";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyType";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Policy Type|The type of insurance policy, and/or claim, to which this loss development factor should be applied";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"LossTriangleValue1ID";O:10:"combofield":26:{s:4:"name";s:20:"LossTriangleValue1ID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"inslt";s:10:"foreignKey";s:19:"LossTriangleValueID";s:12:"foreignField";s:17:"LossTriangleValue";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:775:"SELECT 
`inslt`.LossTriangleValueID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' | \',IFNULL(`cod2`.Description,\'\'),\' | \',IFNULL(`inslp1`.LossPeriodLabel,\'\'),\' at \',IFNULL(`inslt`.Months,\'\'),\' months | \',IFNULL(ROUND(`inslt`.LossCosts, 2),\'\')),\' |  |  at  months | \') AS Name FROM `inslt`
 
 LEFT OUTER JOIN `inslp` AS inslp1 
   ON (`inslt`.LossPeriodID = `inslp1`.LossPeriodID )
 LEFT OUTER JOIN `insld` AS insld1 
   ON (`inslt`.LossDevelopmentFactorID = `insld1`.LossDevelopmentFactorID )
 LEFT OUTER JOIN `cod` AS cod2 
   ON (`insld1`.PolicyTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'3\')
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`insld1`.DevelopmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'275\')
WHERE inslt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:782:"SELECT 
`inslt`.LossTriangleValueID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' | \',IFNULL(`cod2`.Description,\'\'),\' | \',IFNULL(`inslp1`.LossPeriodLabel,\'\'),\' at \',IFNULL(`inslt`.Months,\'\'),\' months | \',IFNULL(ROUND(`inslt`.LossCosts, 2),\'\')),\' |  |  at  months | \') AS Name FROM `inslt`
 
 LEFT OUTER JOIN `inslp` AS inslp1 
   ON (`inslt`.LossPeriodID = `inslp1`.LossPeriodID )
 LEFT OUTER JOIN `insld` AS insld1 
   ON (`inslt`.LossDevelopmentFactorID = `insld1`.LossDevelopmentFactorID )
 LEFT OUTER JOIN `cod` AS cod2 
   ON (`insld1`.PolicyTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'3\')
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`insld1`.DevelopmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'275\')

WHERE `inslt`.LossTriangleValueID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"insli";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:20:"LossTriangleValue2ID";O:10:"combofield":26:{s:4:"name";s:20:"LossTriangleValue2ID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"inslt";s:10:"foreignKey";s:19:"LossTriangleValueID";s:12:"foreignField";s:17:"LossTriangleValue";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:775:"SELECT 
`inslt`.LossTriangleValueID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' | \',IFNULL(`cod2`.Description,\'\'),\' | \',IFNULL(`inslp1`.LossPeriodLabel,\'\'),\' at \',IFNULL(`inslt`.Months,\'\'),\' months | \',IFNULL(ROUND(`inslt`.LossCosts, 2),\'\')),\' |  |  at  months | \') AS Name FROM `inslt`
 
 LEFT OUTER JOIN `inslp` AS inslp1 
   ON (`inslt`.LossPeriodID = `inslp1`.LossPeriodID )
 LEFT OUTER JOIN `insld` AS insld1 
   ON (`inslt`.LossDevelopmentFactorID = `insld1`.LossDevelopmentFactorID )
 LEFT OUTER JOIN `cod` AS cod2 
   ON (`insld1`.PolicyTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'3\')
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`insld1`.DevelopmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'275\')
WHERE inslt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:782:"SELECT 
`inslt`.LossTriangleValueID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' | \',IFNULL(`cod2`.Description,\'\'),\' | \',IFNULL(`inslp1`.LossPeriodLabel,\'\'),\' at \',IFNULL(`inslt`.Months,\'\'),\' months | \',IFNULL(ROUND(`inslt`.LossCosts, 2),\'\')),\' |  |  at  months | \') AS Name FROM `inslt`
 
 LEFT OUTER JOIN `inslp` AS inslp1 
   ON (`inslt`.LossPeriodID = `inslp1`.LossPeriodID )
 LEFT OUTER JOIN `insld` AS insld1 
   ON (`inslt`.LossDevelopmentFactorID = `insld1`.LossDevelopmentFactorID )
 LEFT OUTER JOIN `cod` AS cod2 
   ON (`insld1`.PolicyTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'3\')
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`insld1`.DevelopmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'275\')

WHERE `inslt`.LossTriangleValueID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"insli";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:7:"Months1";O:9:"viewfield":16:{s:4:"name";s:7:"Months1";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Months (1st)|The number of months included in the loss period";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Months2";O:9:"viewfield":16:{s:4:"name";s:7:"Months2";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Months (2nd)|The number of months included in the loss period";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"LossCosts1";O:9:"viewfield":16:{s:4:"name";s:10:"LossCosts1";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:189:"Loss Costs (1st)|The total amount of loss costs based on the development type assigned to the factors under development, stated in the currency assigned to this installation of the software";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"LossCosts2";O:9:"viewfield":16:{s:4:"name";s:10:"LossCosts2";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:189:"Loss Costs (2nd)|The total amount of loss costs based on the development type assigned to the factors under development, stated in the currency assigned to this installation of the software";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"RateofIncrease";O:9:"viewfield":16:{s:4:"name";s:14:"RateofIncrease";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:128:"Rate of Increase|The rate of increase in loss costs between two cost evaluations occurring at two different times points in time";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Loss Increase");

//field value array
$data = array(
        'LossIncreaseID' => '',
         'LossDevelopmentFactor' => '',
         'DevelopmentType' => '',
         'PolicyType' => '',
         'LossTriangleValue1ID' => '',
         'LossTriangleValue2ID' => '',
         'Months1' => '',
         'Months2' => '',
         'LossCosts1' => '',
         'LossCosts2' => '',
         'RateofIncrease' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossIncreaseID';

    $ownerField = '';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `insli`.LossIncreaseID,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`insld1`.DevelopmentFactorsTitle,''),' | ',IFNULL(`cod3`.Description,''),' | ',IFNULL(`cod4`.Description,'')),' |  |  | ') AS LossDevelopmentFactor,
   `cod1`.Description AS DevelopmentType,
   `cod2`.Description AS PolicyType,
   NULLIF(CONCAT(IFNULL(`cod5`.Description,''),' | ',IFNULL(`cod6`.Description,''),' | ',IFNULL(`inslp1`.LossPeriodLabel,''),' at ',IFNULL(`inslt1`.Months,''),' months | ',IFNULL(ROUND(`inslt1`.LossCosts, 2),'')),' |  |  at  months | ') AS LossTriangleValue1,
   `insli`.LossTriangleValue1ID,
   NULLIF(CONCAT(IFNULL(`cod7`.Description,''),' | ',IFNULL(`cod8`.Description,''),' | ',IFNULL(`inslp2`.LossPeriodLabel,''),' at ',IFNULL(`inslt2`.Months,''),' months | ',IFNULL(ROUND(`inslt2`.LossCosts, 2),'')),' |  |  at  months | ') AS LossTriangleValue2,
   `insli`.LossTriangleValue2ID,
   `inslt1`.Months AS Months1,
   `inslt2`.Months AS Months2,
   `inslt1`.LossCosts AS LossCosts1,
   `inslt2`.LossCosts AS LossCosts2,
   `insli`.RateofIncrease
FROM `insli`
   
     LEFT OUTER JOIN `insld` AS insld1 
   ON (`insli`.LossDevelopmentFactorID = `insld1`.LossDevelopmentFactorID )
     LEFT OUTER JOIN `inslt` AS inslt1 
   ON (`insli`.LossTriangleValue1ID = `inslt1`.LossTriangleValueID )
     LEFT OUTER JOIN `inslt` AS inslt2 
   ON (`insli`.LossTriangleValue2ID = `inslt2`.LossTriangleValueID )
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`insld1`.DevelopmentTypeID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '275')
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`insld1`.PolicyTypeID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '3')
     LEFT OUTER JOIN `org` AS org1 
   ON (`insld1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`insld1`.DevelopmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '275')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`insld1`.PolicyTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '3')
     LEFT OUTER JOIN `inslp` AS inslp1 
   ON (`inslt1`.LossPeriodID = `inslp1`.LossPeriodID )
     LEFT OUTER JOIN `insld` AS insld2 
   ON (`inslt1`.LossDevelopmentFactorID = `insld2`.LossDevelopmentFactorID )
     LEFT OUTER JOIN `inslp` AS inslp2 
   ON (`inslt2`.LossPeriodID = `inslp2`.LossPeriodID )
     LEFT OUTER JOIN `insld` AS insld3 
   ON (`inslt2`.LossDevelopmentFactorID = `insld3`.LossDevelopmentFactorID )
     LEFT OUTER JOIN `cod` AS cod6 
   ON (`insld2`.PolicyTypeID = `cod6`.CodeID 
     AND `cod6`.CodeTypeID = '3')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`insld2`.DevelopmentTypeID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '275')
     LEFT OUTER JOIN `cod` AS cod8 
   ON (`insld3`.PolicyTypeID = `cod8`.CodeID 
     AND `cod8`.CodeTypeID = '3')
     LEFT OUTER JOIN `cod` AS cod7 
   ON (`insld3`.DevelopmentTypeID = `cod7`.CodeID 
     AND `cod7`.CodeTypeID = '275')
WHERE
   insli.LossIncreaseID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Loss Increase");
        $screenPhrase = gettext("Form|Edit summary information about a loss triangle value assigned to a loss development factor calculation");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Loss Increases");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossIncreaseID' => gettext("Record ID|An automatically assigned number used to associate loss increases with the development of loss development factors"),
   'LossDevelopmentFactor' => gettext("Loss Development Factor|A combined field used to describe the loss development factors when associating them with other records"),
   'DevelopmentType' => gettext("Development Type|The type of cost development associated with the factors"),
   'PolicyType' => gettext("Policy Type|The type of insurance policy, and/or claim, to which this loss development factor should be applied"),
   'LossTriangleValue1ID' => gettext("Loss Triangle Value (1st)|A combined field used to describe this loss triangle value when associating it with other records"),
   'LossTriangleValue2ID' => gettext("Loss Triangle Value (2nd)|A combined field used to describe this loss triangle value when associating it with other records"),
   'Months1' => gettext("Months (1st)|The number of months included in the loss period"),
   'Months2' => gettext("Months (2nd)|The number of months included in the loss period"),
   'LossCosts1' => gettext("Loss Costs (1st)|The total amount of loss costs based on the development type assigned to the factors under development, stated in the currency assigned to this installation of the software"),
   'LossCosts2' => gettext("Loss Costs (2nd)|The total amount of loss costs based on the development type assigned to the factors under development, stated in the currency assigned to this installation of the software"),
   'RateofIncrease' => gettext("Rate of Increase|The rate of increase in loss costs between two cost evaluations occurring at two different times points in time")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Loss Increases"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Loss Increase") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a loss triangle value assigned to a loss development factor calculation") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Loss Increase") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = 'Record ' . $recordID;
?>