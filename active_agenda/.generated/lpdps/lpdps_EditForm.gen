<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:39:{s:18:"LossProdServAssnID";O:9:"viewfield":16:{s:4:"name";s:18:"LossProdServAssnID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Loss Association ID|An automatically assigned number used to track losses associated with products and/or services";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ProductorServiceID";O:14:"codecombofield":27:{s:4:"name";s:18:"ProductorServiceID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'5\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:140:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'5\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:24:"ProductServiceCategoryID";a:3:{s:4:"name";s:24:"ProductServiceCategoryID";s:8:"findMode";s:4:"text";s:15:"listParentField";s:18:"ProductorServiceID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"5";}s:24:"ProductServiceCategoryID";O:14:"codecombofield":27:{s:4:"name";s:24:"ProductServiceCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'6\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:364:"SELECT DISTINCT
`opdpt`.ProductServiceCategoryID AS ID, `cod1`.Description AS Name, `opdpt`.ProductorServiceID AS ParentID
FROM `opdpt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt`.ProductServiceCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'6\')
WHERE `opdpt`._Deleted = 0
AND `opdpt`.ProductServiceCategoryID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:314:"SELECT DISTINCT
`opdpt`.ProductServiceCategoryID AS ID, `cod1`.Description AS Name, `opdpt`.ProductorServiceID AS ParentID
FROM `opdpt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt`.ProductServiceCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'6\')
WHERE `opdpt`.ProductServiceCategoryID = \'/*recordID*/\'";s:11:"parentField";s:18:"ProductorServiceID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"ProductServiceTypeID";a:2:{s:4:"name";s:20:"ProductServiceTypeID";s:15:"listParentField";s:24:"ProductServiceCategoryID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"6";}s:20:"ProductServiceTypeID";O:10:"combofield":26:{s:4:"name";s:20:"ProductServiceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"opdpt";s:10:"foreignKey";s:20:"ProductServiceTypeID";s:12:"foreignField";s:18:"ProductServiceType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:217:"SELECT 
`opdpt`.ProductServiceTypeID AS ID, NULLIF(CONCAT(IFNULL(`opdpt`.ProductServiceTypeTitle,\'\')),\'\') AS Name, `opdpt`.ProductServiceCategoryID AS ParentID FROM `opdpt`
WHERE opdpt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:225:"SELECT 
`opdpt`.ProductServiceTypeID AS ID, NULLIF(CONCAT(IFNULL(`opdpt`.ProductServiceTypeTitle,\'\')),\'\') AS Name, `opdpt`.ProductServiceCategoryID AS ParentID FROM `opdpt`

WHERE `opdpt`.ProductServiceTypeID = \'/*recordID*/\'";s:11:"parentField";s:24:"ProductServiceCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"ProdServID";a:1:{s:4:"name";s:10:"ProdServID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"ProdServID";O:10:"combofield":26:{s:4:"name";s:10:"ProdServID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"opdps";s:10:"foreignKey";s:10:"ProdServID";s:12:"foreignField";s:8:"ProdServ";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:239:"SELECT 
`opdps`.ProdServID AS ID, NULLIF(CONCAT(IFNULL(`opdps`.ProdServName,\'\'),\' | \',IFNULL(`opdps`.ProdServTrackingNo,\'\')),\' | \') AS Name, `opdps`.ProductServiceTypeID AS ParentID FROM `opdps`
WHERE opdps._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:237:"SELECT 
`opdps`.ProdServID AS ID, NULLIF(CONCAT(IFNULL(`opdps`.ProdServName,\'\'),\' | \',IFNULL(`opdps`.ProdServTrackingNo,\'\')),\' | \') AS Name, `opdps`.ProductServiceTypeID AS ParentID FROM `opdps`

WHERE `opdps`.ProdServID = \'/*recordID*/\'";s:11:"parentField";s:20:"ProductServiceTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:19:"ProductOrganization";a:1:{s:4:"name";s:19:"ProductOrganization";}s:12:"ProdServDesc";a:1:{s:4:"name";s:12:"ProdServDesc";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:30:"`opdps`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:19:"ProductOrganization";O:9:"viewfield":16:{s:4:"name";s:19:"ProductOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Organization|The name of the organization producing the product and/or service";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"ProdServDesc";O:9:"viewfield":16:{s:4:"name";s:12:"ProdServDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Description|A detailed description of the product and/or service";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"MethodofHarm";O:9:"memofield":15:{s:4:"name";s:12:"MethodofHarm";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"DefectOriginID";O:14:"codecombofield":27:{s:4:"name";s:14:"DefectOriginID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'238\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'238\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"238";}s:17:"DefectDescription";O:9:"memofield":15:{s:4:"name";s:17:"DefectDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"HazardDescription";O:9:"memofield":15:{s:4:"name";s:17:"HazardDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"SupplierRelated";O:13:"checkboxfield":14:{s:4:"name";s:15:"SupplierRelated";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"TraceNumber";O:9:"editfield":14:{s:4:"name";s:11:"TraceNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:11:"BatchNumber";O:9:"editfield":14:{s:4:"name";s:11:"BatchNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:9:"LotNumber";O:9:"editfield":14:{s:4:"name";s:9:"LotNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:11:"ModelNumber";O:9:"editfield":14:{s:4:"name";s:11:"ModelNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:14:"ProductionDate";O:9:"datefield":15:{s:4:"name";s:14:"ProductionDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"ShippingDate";O:9:"datefield":15:{s:4:"name";s:12:"ShippingDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:20:"ProductionReviewDate";O:9:"datefield":15:{s:4:"name";s:20:"ProductionReviewDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"AmountProduced";O:9:"editfield":14:{s:4:"name";s:14:"AmountProduced";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:24:"AmountProducedCategoryID";O:10:"combofield":26:{s:4:"name";s:24:"AmountProducedCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"AmountProducedUnitID";a:1:{s:4:"name";s:20:"AmountProducedUnitID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:20:"AmountProducedUnitID";O:10:"combofield":26:{s:4:"name";s:20:"AmountProducedUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:24:"AmountProducedCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:20:"ProductionConclusion";O:9:"memofield":15:{s:4:"name";s:20:"ProductionConclusion";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"ProcessReviewDate";O:9:"datefield":15:{s:4:"name";s:17:"ProcessReviewDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"AmountInProcess";O:9:"editfield":14:{s:4:"name";s:15:"AmountInProcess";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:25:"AmountInProcessCategoryID";O:10:"combofield":26:{s:4:"name";s:25:"AmountInProcessCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:21:"AmountInProcessUnitID";a:1:{s:4:"name";s:21:"AmountInProcessUnitID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:21:"AmountInProcessUnitID";O:10:"combofield":26:{s:4:"name";s:21:"AmountInProcessUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:25:"AmountInProcessCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:17:"ProcessConclusion";O:9:"memofield":15:{s:4:"name";s:17:"ProcessConclusion";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"ShippingReviewDate";O:9:"datefield":15:{s:4:"name";s:18:"ShippingReviewDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"AmountShipped";O:9:"editfield":14:{s:4:"name";s:13:"AmountShipped";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:23:"AmountShippedCategoryID";O:10:"combofield":26:{s:4:"name";s:23:"AmountShippedCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:19:"AmountShippedUnitID";a:1:{s:4:"name";s:19:"AmountShippedUnitID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:19:"AmountShippedUnitID";O:10:"combofield":26:{s:4:"name";s:19:"AmountShippedUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:23:"AmountShippedCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:18:"ShippingConclusion";O:9:"memofield":15:{s:4:"name";s:18:"ShippingConclusion";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"InventoryReviewDate";O:9:"datefield":15:{s:4:"name";s:19:"InventoryReviewDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"AmountinInventory";O:9:"editfield":14:{s:4:"name";s:17:"AmountinInventory";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:27:"AmountinInventoryCategoryID";O:10:"combofield":26:{s:4:"name";s:27:"AmountinInventoryCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:23:"AmountinInventoryUnitID";a:1:{s:4:"name";s:23:"AmountinInventoryUnitID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:23:"AmountinInventoryUnitID";O:10:"combofield":26:{s:4:"name";s:23:"AmountinInventoryUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:27:"AmountinInventoryCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:19:"InventoryConclusion";O:9:"memofield":15:{s:4:"name";s:19:"InventoryConclusion";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"ProductAvailable";O:13:"checkboxfield":14:{s:4:"name";s:16:"ProductAvailable";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"PresentDesc";O:9:"memofield":15:{s:4:"name";s:11:"PresentDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"PresentAddress1";O:9:"editfield":14:{s:4:"name";s:15:"PresentAddress1";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:15:"PresentAddress2";O:9:"editfield":14:{s:4:"name";s:15:"PresentAddress2";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:16:"PresentCountryID";O:10:"combofield":26:{s:4:"name";s:16:"PresentCountryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"ctr";s:10:"foreignKey";s:9:"CountryID";s:12:"foreignField";s:11:"CountryName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:110:"SELECT 
`ctr`.CountryID AS ID, `ctr`.CountryName AS Name FROM `ctr`
WHERE ctr._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:107:"SELECT 
`ctr`.CountryID AS ID, `ctr`.CountryName AS Name FROM `ctr`

WHERE `ctr`.CountryID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"PresentStateID";a:1:{s:4:"name";s:14:"PresentStateID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"PresentStateID";O:10:"combofield":26:{s:4:"name";s:14:"PresentStateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"sta";s:10:"foreignKey";s:7:"StateID";s:12:"foreignField";s:9:"StateName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:135:"SELECT 
`sta`.StateID AS ID, `sta`.StateName AS Name, `sta`.CountryID AS ParentID FROM `sta`
WHERE sta._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:130:"SELECT 
`sta`.StateID AS ID, `sta`.StateName AS Name, `sta`.CountryID AS ParentID FROM `sta`

WHERE `sta`.StateID = \'/*recordID*/\'";s:11:"parentField";s:16:"PresentCountryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"PresentCountyID";a:1:{s:4:"name";s:15:"PresentCountyID";}}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:15:"PresentCountyID";O:10:"combofield":26:{s:4:"name";s:15:"PresentCountyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cti";s:10:"foreignKey";s:8:"CountyID";s:12:"foreignField";s:10:"CountyName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:135:"SELECT 
`cti`.CountyID AS ID, `cti`.CountyName AS Name, `cti`.StateID AS ParentID FROM `cti`
WHERE cti._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:131:"SELECT 
`cti`.CountyID AS ID, `cti`.CountyName AS Name, `cti`.StateID AS ParentID FROM `cti`

WHERE `cti`.CountyID = \'/*recordID*/\'";s:11:"parentField";s:14:"PresentStateID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"lpdps";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"PresentCity";O:9:"editfield":14:{s:4:"name";s:11:"PresentCity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:17:"PresentPostalCode";O:9:"editfield":14:{s:4:"name";s:17:"PresentPostalCode";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Product and Service Loss Association");

//field value array
$data = array(
        'LossProdServAssnID' => '',
         'ProductorServiceID' => '',
         'ProductServiceCategoryID' => '',
         'ProductServiceTypeID' => '',
         'ProdServID' => '',
         'ProductOrganization' => '',
         'ProdServDesc' => '',
         'MethodofHarm' => '',
         'DefectOriginID' => '',
         'DefectDescription' => '',
         'HazardDescription' => '',
         'SupplierRelated' => '',
         'TraceNumber' => '',
         'BatchNumber' => '',
         'LotNumber' => '',
         'ModelNumber' => '',
         'ProductionDate' => '',
         'ShippingDate' => '',
         'ProductionReviewDate' => '',
         'AmountProducedCategoryID' => '',
         'AmountProducedUnitID' => '',
         'AmountProduced' => '',
         'ProductionConclusion' => '',
         'ProcessReviewDate' => '',
         'AmountInProcessCategoryID' => '',
         'AmountInProcessUnitID' => '',
         'AmountInProcess' => '',
         'ProcessConclusion' => '',
         'ShippingReviewDate' => '',
         'AmountShippedCategoryID' => '',
         'AmountShippedUnitID' => '',
         'AmountShipped' => '',
         'ShippingConclusion' => '',
         'InventoryReviewDate' => '',
         'AmountinInventoryCategoryID' => '',
         'AmountinInventoryUnitID' => '',
         'AmountinInventory' => '',
         'InventoryConclusion' => '',
         'ProductAvailable' => '',
         'PresentDesc' => '',
         'PresentAddress1' => '',
         'PresentAddress2' => '',
         'PresentCountryID' => '',
         'PresentStateID' => '',
         'PresentCountyID' => '',
         'PresentCity' => '',
         'PresentPostalCode' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossProdServAssnID';

    $ownerField = 'ProductOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lpdps`.LossProdServAssnID,
   `cod1`.Description AS ProductorService,
   `opdpt1`.ProductorServiceID AS ProductorServiceID,
   `cod2`.Description AS ProductServiceCategory,
   `opdpt2`.ProductServiceCategoryID AS ProductServiceCategoryID,
   NULLIF(CONCAT(IFNULL(`opdpt2`.ProductServiceTypeTitle,'')),'') AS ProductServiceType,
   `opdps1`.ProductServiceTypeID AS ProductServiceTypeID,
   NULLIF(CONCAT(IFNULL(`opdps2`.ProdServName,''),' | ',IFNULL(`opdps2`.ProdServTrackingNo,'')),' | ') AS ProdServ,
   `lpdps`.ProdServID,
   `org1`.Name AS ProductOrganization,
   `opdps1`.ProdServDesc AS ProdServDesc,
   `lpdps`.MethodofHarm,
   `cod5`.Description AS DefectOrigin,
   `lpdps`.DefectOriginID,
   `lpdps`.DefectDescription,
   `lpdps`.HazardDescription,
   `lpdps`.SupplierRelated,
   `lpdps`.TraceNumber,
   `lpdps`.BatchNumber,
   `lpdps`.LotNumber,
   `lpdps`.ModelNumber,
   `lpdps`.ProductionDate,
   `lpdps`.ShippingDate,
   `lpdps`.ProductionReviewDate,
   `cod6`.Description AS AmountProducedCategory,
   `uts1`.UnitCategoryID AS AmountProducedCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),'') AS AmountProducedUnit,
   `lpdps`.AmountProducedUnitID,
   `lpdps`.AmountProduced,
   `lpdps`.ProductionConclusion,
   `lpdps`.ProcessReviewDate,
   `cod7`.Description AS AmountInProcessCategory,
   `uts2`.UnitCategoryID AS AmountInProcessCategoryID,
   NULLIF(CONCAT(IFNULL(`uts2`.UnitName,'')),'') AS AmountInProcessUnit,
   `lpdps`.AmountInProcessUnitID,
   `lpdps`.AmountInProcess,
   `lpdps`.ProcessConclusion,
   `lpdps`.ShippingReviewDate,
   `cod8`.Description AS AmountShippedCategory,
   `uts3`.UnitCategoryID AS AmountShippedCategoryID,
   NULLIF(CONCAT(IFNULL(`uts3`.UnitName,'')),'') AS AmountShippedUnit,
   `lpdps`.AmountShippedUnitID,
   `lpdps`.AmountShipped,
   `lpdps`.ShippingConclusion,
   `lpdps`.InventoryReviewDate,
   `cod9`.Description AS AmountinInventoryCategory,
   `uts4`.UnitCategoryID AS AmountinInventoryCategoryID,
   NULLIF(CONCAT(IFNULL(`uts4`.UnitName,'')),'') AS AmountinInventoryUnit,
   `lpdps`.AmountinInventoryUnitID,
   `lpdps`.AmountinInventory,
   `lpdps`.InventoryConclusion,
   `lpdps`.ProductAvailable,
   `lpdps`.PresentDesc,
   `lpdps`.PresentAddress1,
   `lpdps`.PresentAddress2,
   `ctr1`.CountryName AS PresentCountry,
   `sta1`.CountryID AS PresentCountryID,
   `sta1`.StateName AS PresentState,
   `cti1`.StateID AS PresentStateID,
   `cti1`.CountyName AS PresentCounty,
   `lpdps`.PresentCountyID,
   `lpdps`.PresentCity,
   `lpdps`.PresentPostalCode,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT('Complainant: ',IFNULL(`ppl1`.DisplayName,'')),'Complainant: '),''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`opdps2`.ProdServName,''),' | ',IFNULL(`opdps2`.ProdServTrackingNo,'')),' | '),'')),' | ') AS RecordLabel,
   `opdps1`.OrganizationID AS ProductOrganizationID
FROM `lpdps`
   
     LEFT OUTER JOIN `opdps` AS opdps1 
   ON (`lpdps`.ProdServID = `opdps1`.ProdServID )
     LEFT OUTER JOIN `opdpt` AS opdpt2 
   ON (`lpdps`.ProdServID = `opdpt2`.ProductServiceTypeID )
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`lpdps`.DefectOriginID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '238')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`lpdps`.AmountProducedUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`lpdps`.AmountInProcessUnitID = `uts2`.UnitID )
     LEFT OUTER JOIN `uts` AS uts3 
   ON (`lpdps`.AmountShippedUnitID = `uts3`.UnitID )
     LEFT OUTER JOIN `uts` AS uts4 
   ON (`lpdps`.AmountinInventoryUnitID = `uts4`.UnitID )
     LEFT OUTER JOIN `cti` AS cti1 
   ON (`lpdps`.PresentCountyID = `cti1`.CountyID )
     LEFT OUTER JOIN `lpd` AS lpd1 
   ON (`lpdps`.LossProdServID = `lpd1`.LossProdServID )
     LEFT OUTER JOIN `opdpt` AS opdpt1 
   ON (`opdps1`.ProductServiceTypeID = `opdpt1`.ProductServiceTypeID )
     LEFT OUTER JOIN `opdps` AS opdps2 
   ON (`opdps1`.ProdServDesc = `opdps2`.ProdServID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`opdps1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`opdpt2`.ProductServiceCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '6')
     LEFT OUTER JOIN `cod` AS cod6 
   ON (`uts1`.UnitCategoryID = `cod6`.CodeID 
     AND `cod6`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod7 
   ON (`uts2`.UnitCategoryID = `cod7`.CodeID 
     AND `cod7`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod8 
   ON (`uts3`.UnitCategoryID = `cod8`.CodeID 
     AND `cod8`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod9 
   ON (`uts4`.UnitCategoryID = `cod9`.CodeID 
     AND `cod9`.CodeTypeID = '37')
     LEFT OUTER JOIN `sta` AS sta1 
   ON (`cti1`.StateID = `sta1`.StateID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lpd1`.LossProdServID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lpd'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '52')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt1`.ProductorServiceID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '5')
     LEFT OUTER JOIN `ctr` AS ctr1 
   ON (`sta1`.CountryID = `ctr1`.CountryID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE
   lpdps.LossProdServAssnID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Product and Service Loss Association");
        $screenPhrase = gettext("Form|Edit summary information about products and/or services associated with losses");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Product and/or Service Associations");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossProdServAssnID' => gettext("Loss Association ID|An automatically assigned number used to track losses associated with products and/or services"),
   'ProductorServiceID' => gettext("Product or Service|Whether this is a product or service"),
   'ProductServiceCategoryID' => gettext("Category|A broad categoy used to group products or services of similar types"),
   'ProductServiceTypeID' => gettext("Product or Service Type|A combined field used to describe this product or service type when associating it with other records"),
   'ProdServID' => gettext("Product or Service|A combined field used to describe this product or service when associating it with other records"),
   'ProductOrganization' => gettext("Organization|The name of the organization producing the product and/or service"),
   'ProdServDesc' => gettext("Description|A detailed description of the product and/or service"),
   'MethodofHarm' => gettext("Method of Harm|Description of the method of contamination or adulteration likely to result in harm"),
   'DefectOriginID' => gettext("Origin of Defect|The origin of the identified or alledged defect in the product"),
   'DefectDescription' => gettext("Defect Description|Description of the defect associated with the product or service loss"),
   'HazardDescription' => gettext("Hazard Description|Description of the hazard presented to the user or consumer"),
   'SupplierRelated' => gettext("Supplier Related|Whether the potential product harm is the result of a supplier of raw ingredients, component parts, or packaging materials"),
   'TraceNumber' => gettext("Trace Number|The trace number associated with the product and/or service involved in the loss"),
   'BatchNumber' => gettext("Batch Number|The batch number associated with the product and/or service involved in the loss"),
   'LotNumber' => gettext("Lot Number|The lot number associated with the product and/or service involved in the loss"),
   'ModelNumber' => gettext("Model Number|The model number associated with the product and/or service involved in the loss"),
   'ProductionDate' => gettext("Production Date|Date and time the subject product was produced"),
   'ShippingDate' => gettext("Shipping Date|Date and time the subject product was shipped"),
   'ProductionReviewDate' => gettext("Production Review Date|Date and time the production records were reviewed and quantities recorded"),
   'AmountProduced' => gettext("Amount Produced|The amount of product produced that may also be affected"),
   'ProductionConclusion' => gettext("Production Conclusion|Conclusion drawn from review of the production records and likelihood for additional product involvement"),
   'ProcessReviewDate' => gettext("Process Review Date|Date and time the in-process records were reviewed and quantities recorded"),
   'AmountInProcess' => gettext("Amount In Process|The amount of product that is in process that may also be affected"),
   'ProcessConclusion' => gettext("Process Conclusion|Conclusion drawn from review of the process records and likelihood for additional product involvement"),
   'ShippingReviewDate' => gettext("Shipping Review Date|Date and time the shipping records were reviewed and quantities recorded"),
   'AmountShipped' => gettext("Amount Shipped|The amount of product shipped that may also be affected"),
   'ShippingConclusion' => gettext("Shipping Conclusion|Conclusion drawn from review of the shipping records and likelihood for additional product involvement"),
   'InventoryReviewDate' => gettext("Inventory Review Date|Date and time the inventory records were reviewed and quantities recorded"),
   'AmountinInventory' => gettext("Amount In Inventory|The amount of product in inventory that may also be affected"),
   'InventoryConclusion' => gettext("Inventory Conclusion|Conclusion drawn from review of the inventory records and likelihood for additional product involvement"),
   'ProductAvailable' => gettext("Product Available|Whether the product resulting in loss is available for viewing"),
   'PresentDesc' => gettext("Present Location|A detailed description of the location where the product causing the loss can be seen."),
   'PresentAddress1' => gettext("Present Address|First physical street address of the location where the product resulting in loss can be seen"),
   'PresentAddress2' => gettext("Present Address|Second physical street address of the location where the product resulting in loss can be seen; such as, suite number or p.o. box"),
   'PresentCountryID' => gettext("Present Country|The name of the country where the product or service associated with the incurred loss can be viewed"),
   'PresentStateID' => gettext("Present State|The name of the state where the product or service associated with the incurred loss can be viewed"),
   'PresentCountyID' => gettext("Present Country|The name of the country where the product or service associated with the incurred loss can be viewed"),
   'PresentCity' => gettext("Present City|City where the product resulting in loss can be seen"),
   'PresentPostalCode' => gettext("Present Postal Code|Postal code used to direct mail to the physical street address where the product resulting in loss can be seen")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['MethodofHarm'], ShortPhrase($phrases['MethodofHarm']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['MethodofHarm']->invalid = TRUE;
            }
$vMsg = Validate($data['DefectOriginID'], ShortPhrase($phrases['DefectOriginID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['DefectOriginID']->invalid = TRUE;
            }
$vMsg = Validate($data['DefectDescription'], ShortPhrase($phrases['DefectDescription']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['DefectDescription']->invalid = TRUE;
            }
$vMsg = Validate($data['HazardDescription'], ShortPhrase($phrases['HazardDescription']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['HazardDescription']->invalid = TRUE;
            }
$vMsg = Validate($data['SupplierRelated'], ShortPhrase($phrases['SupplierRelated']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SupplierRelated']->invalid = TRUE;
            }
$vMsg = Validate($data['TraceNumber'], ShortPhrase($phrases['TraceNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TraceNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['BatchNumber'], ShortPhrase($phrases['BatchNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BatchNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['LotNumber'], ShortPhrase($phrases['LotNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['LotNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['ModelNumber'], ShortPhrase($phrases['ModelNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ModelNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['ProductionDate'], ShortPhrase($phrases['ProductionDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProductionDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ShippingDate'], ShortPhrase($phrases['ShippingDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ShippingDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ProductionReviewDate'], ShortPhrase($phrases['ProductionReviewDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProductionReviewDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AmountProduced'], ShortPhrase($phrases['AmountProduced']), 'Number notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AmountProduced']->invalid = TRUE;
            }
$vMsg = Validate($data['ProductionConclusion'], ShortPhrase($phrases['ProductionConclusion']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProductionConclusion']->invalid = TRUE;
            }
$vMsg = Validate($data['ProcessReviewDate'], ShortPhrase($phrases['ProcessReviewDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProcessReviewDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AmountInProcess'], ShortPhrase($phrases['AmountInProcess']), 'Number notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AmountInProcess']->invalid = TRUE;
            }
$vMsg = Validate($data['ProcessConclusion'], ShortPhrase($phrases['ProcessConclusion']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProcessConclusion']->invalid = TRUE;
            }
$vMsg = Validate($data['ShippingReviewDate'], ShortPhrase($phrases['ShippingReviewDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ShippingReviewDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AmountShipped'], ShortPhrase($phrases['AmountShipped']), 'Number notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AmountShipped']->invalid = TRUE;
            }
$vMsg = Validate($data['ShippingConclusion'], ShortPhrase($phrases['ShippingConclusion']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ShippingConclusion']->invalid = TRUE;
            }
$vMsg = Validate($data['InventoryReviewDate'], ShortPhrase($phrases['InventoryReviewDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InventoryReviewDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AmountinInventory'], ShortPhrase($phrases['AmountinInventory']), 'Number notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AmountinInventory']->invalid = TRUE;
            }
$vMsg = Validate($data['InventoryConclusion'], ShortPhrase($phrases['InventoryConclusion']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InventoryConclusion']->invalid = TRUE;
            }
$vMsg = Validate($data['ProductAvailable'], ShortPhrase($phrases['ProductAvailable']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ProductAvailable']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentDesc'], ShortPhrase($phrases['PresentDesc']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentAddress1'], ShortPhrase($phrases['PresentAddress1']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentAddress1']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentAddress2'], ShortPhrase($phrases['PresentAddress2']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentAddress2']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentCountyID'], ShortPhrase($phrases['PresentCountyID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentCountyID']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentCity'], ShortPhrase($phrases['PresentCity']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentCity']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentPostalCode'], ShortPhrase($phrases['PresentPostalCode']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentPostalCode']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Product and Service Losses Associations"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Product and Service Loss Association") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about products and/or services associated with losses") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Product and Service Loss Association") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ProductionDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ProductionDate\"
});
Calendar.setup({
   inputField : \"ShippingDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ShippingDate\"
});
Calendar.setup({
   inputField : \"ProductionReviewDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ProductionReviewDate\"
});
Calendar.setup({
   inputField : \"ProcessReviewDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ProcessReviewDate\"
});
Calendar.setup({
   inputField : \"ShippingReviewDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ShippingReviewDate\"
});
Calendar.setup({
   inputField : \"InventoryReviewDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_InventoryReviewDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>