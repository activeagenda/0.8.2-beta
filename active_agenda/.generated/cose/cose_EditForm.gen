<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:20:{s:13:"ExpenditureID";O:9:"viewfield":16:{s:4:"name";s:13:"ExpenditureID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Record ID|An automatically assigned number used to track expenditures";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"RelatedModuleRecord";O:9:"viewfield":16:{s:4:"name";s:19:"RelatedModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Cost Record|The module and record associated with the cost";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Title";O:9:"viewfield":16:{s:4:"name";s:5:"Title";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Cost Title|A concise title that describes the cost";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"CostDesc";O:9:"viewfield":16:{s:4:"name";s:8:"CostDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Cost Description|A detailed description of the cost being tracked";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"CostDate";O:9:"viewfield":16:{s:4:"name";s:8:"CostDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Cost Date|The date this cost amount was incurred by the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Incurred";O:9:"viewfield":16:{s:4:"name";s:8:"Incurred";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:134:"Total Cost|The total estimated amount of the cost to be incurred, stated in the currency assigned to this installation of the software";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"PONumber";O:9:"viewfield":16:{s:4:"name";s:8:"PONumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:124:"P.O. Number|A purchase order number assigned by an accounting department to allocate funds for a stated and approved purpose";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ExpenseDate";O:9:"datefield":15:{s:4:"name";s:11:"ExpenseDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"ExpenseTitle";O:9:"editfield":14:{s:4:"name";s:12:"ExpenseTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:11:"ExpenseDesc";O:9:"memofield":15:{s:4:"name";s:11:"ExpenseDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"ExpenseAmount";O:10:"moneyfield":18:{s:4:"name";s:13:"ExpenseAmount";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:26:"Money notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"PayeeOrgID";O:13:"orgcombofield":26:{s:4:"name";s:10:"PayeeOrgID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:13:"PayeePersonID";O:16:"personcombofield":29:{s:4:"name";s:13:"PayeePersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:17:"PayeePersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:22:"ExpensePaymentMethodID";O:14:"codecombofield":27:{s:4:"name";s:22:"ExpensePaymentMethodID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'227\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'227\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"227";}s:20:"TransactionDocNumber";O:9:"editfield":14:{s:4:"name";s:20:"TransactionDocNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:17:"AccountCategoryID";O:14:"codecombofield":27:{s:4:"name";s:17:"AccountCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'31\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'31\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"AccountTypeID";a:2:{s:4:"name";s:13:"AccountTypeID";s:15:"listParentField";s:17:"AccountCategoryID";}}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"31";}s:13:"AccountTypeID";O:10:"combofield":26:{s:4:"name";s:13:"AccountTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"budat";s:10:"foreignKey";s:13:"AccountTypeID";s:12:"foreignField";s:11:"AccountType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:196:"SELECT 
`budat`.AccountTypeID AS ID, NULLIF(CONCAT(IFNULL(`budat`.AccountTypeTitle,\'\')),\'\') AS Name, `budat`.AccountCategoryID AS ParentID FROM `budat`
WHERE budat._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:197:"SELECT 
`budat`.AccountTypeID AS ID, NULLIF(CONCAT(IFNULL(`budat`.AccountTypeTitle,\'\')),\'\') AS Name, `budat`.AccountCategoryID AS ParentID FROM `budat`

WHERE `budat`.AccountTypeID = \'/*recordID*/\'";s:11:"parentField";s:17:"AccountCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:9:"AccountID";a:1:{s:4:"name";s:9:"AccountID";}}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:9:"AccountID";O:10:"combofield":26:{s:4:"name";s:9:"AccountID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"buda";s:10:"foreignKey";s:9:"AccountID";s:12:"foreignField";s:7:"Account";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:296:"SELECT 
`buda`.AccountID AS ID, NULLIF(CONCAT(IFNULL(`buda`.AccountName,\'\'),\' | \',IFNULL(`buda`.AccountNumber,\'\')),\' | \') AS Name, `buda`.AccountTypeID AS ParentID FROM `buda`
 
 LEFT OUTER JOIN `bud` AS bud1 
   ON (`buda`.BudgetID = `bud1`.BudgetID )
WHERE buda._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:293:"SELECT 
`buda`.AccountID AS ID, NULLIF(CONCAT(IFNULL(`buda`.AccountName,\'\'),\' | \',IFNULL(`buda`.AccountNumber,\'\')),\' | \') AS Name, `buda`.AccountTypeID AS ParentID FROM `buda`
 
 LEFT OUTER JOIN `bud` AS bud1 
   ON (`buda`.BudgetID = `bud1`.BudgetID )

WHERE `buda`.AccountID = \'/*recordID*/\'";s:11:"parentField";s:13:"AccountTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:19:"AccountOrganization";a:1:{s:4:"name";s:19:"AccountOrganization";}s:11:"AccountDesc";a:1:{s:4:"name";s:11:"AccountDesc";}}s:8:"moduleID";s:4:"cose";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`bud1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:19:"AccountOrganization";O:9:"viewfield":16:{s:4:"name";s:19:"AccountOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Account Organization|The organization responsible for managing the budget account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:9:"AccountID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"AccountDesc";O:9:"viewfield":16:{s:4:"name";s:11:"AccountDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Account Description|A detailed description of the budget account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:9:"AccountID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Expenditure");

//field value array
$data = array(
        'ExpenditureID' => '',
         'RelatedModuleRecord' => '',
         'Title' => '',
         'CostDesc' => '',
         'CostDate' => '',
         'Incurred' => '',
         'PONumber' => '',
         'ExpenseDate' => '',
         'ExpenseTitle' => '',
         'ExpenseDesc' => '',
         'ExpenseAmount' => '',
         'PayeeOrgID' => '',
         'PayeePersonID' => '',
         'ExpensePaymentMethodID' => '',
         'TransactionDocNumber' => '',
         'AccountCategoryID' => '',
         'AccountTypeID' => '',
         'AccountID' => '',
         'AccountOrganization' => '',
         'AccountDesc' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'ExpenditureID';

    $ownerField = 'AccountOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `cose`.ExpenditureID,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' Module (Record ID: ',IFNULL(`cos1`.RelatedRecordID,''),')'),' Module (Record ID: )') AS RelatedModuleRecord,
   `cos1`.Title AS Title,
   `cos1`.CostDesc AS CostDesc,
   `dat1`.RelatedDate AS CostDate,
   `cos1`.Incurred AS Incurred,
   `cos1`.PONumber AS PONumber,
   `cose`.ExpenseDate,
   `cose`.ExpenseTitle,
   `cose`.ExpenseDesc,
   `cose`.ExpenseAmount,
   `org2`.Name AS PayeeOrg,
   `cose`.PayeeOrgID,
   `ppl1`.DisplayName AS PayeePerson,
   `inv1`.PersonInvolvedID AS PayeePersonID,
   `cod2`.Description AS ExpensePaymentMethod,
   `cose`.ExpensePaymentMethodID,
   `cose`.TransactionDocNumber,
   `cod1`.Description AS AccountCategory,
   `budat1`.AccountCategoryID AS AccountCategoryID,
   NULLIF(CONCAT(IFNULL(`budat1`.AccountTypeTitle,'')),'') AS AccountType,
   `buda1`.AccountTypeID AS AccountTypeID,
   NULLIF(CONCAT(IFNULL(`buda1`.AccountName,''),' | ',IFNULL(`buda1`.AccountNumber,'')),' | ') AS Account,
   `cose`.AccountID,
   `org1`.Name AS AccountOrganization,
   `buda1`.AccountDesc AS AccountDesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`cos1`.Title,''),' | ',IFNULL(ROUND(`cos1`.Incurred, 2),'')),' | '),''),' | ',IFNULL(`cose`.ExpenseDate,''),' | ',IFNULL(ROUND(`cose`.ExpenseAmount, 2),'')),' |  | ') AS RecordLabel,
   `buda1`.AccountOrganizationID AS AccountOrganizationID
FROM `cose`
   
     LEFT OUTER JOIN `cos` AS cos1 
   ON (`cose`.CostID = `cos1`.CostID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`cose`.PayeeOrgID = `org2`.OrganizationID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`cose`.ExpenditureID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'cose'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '1')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`cose`.ExpensePaymentMethodID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '227')
     LEFT OUTER JOIN `buda` AS buda1 
   ON (`cose`.AccountID = `buda1`.AccountID )
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`cos1`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`cos1`.CostID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'cos'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '18')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
     LEFT OUTER JOIN `budat` AS budat1 
   ON (`buda1`.AccountTypeID = `budat1`.AccountTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`buda1`.AccountOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`budat1`.AccountCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '31')
WHERE
   cose.ExpenditureID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Expenditure");
        $screenPhrase = gettext("Form|Edit summary information about the trust account expenditure");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Cost Expenditures");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ExpenditureID' => gettext("Record ID|An automatically assigned number used to track expenditures"),
   'RelatedModuleRecord' => gettext("Cost Record|The module and record associated with the cost"),
   'Title' => gettext("Cost Title|A concise title that describes the cost"),
   'CostDesc' => gettext("Cost Description|A detailed description of the cost being tracked"),
   'CostDate' => gettext("Cost Date|The date this cost amount was incurred by the organization"),
   'Incurred' => gettext("Total Cost|The total estimated amount of the cost to be incurred, stated in the currency assigned to this installation of the software"),
   'PONumber' => gettext("P.O. Number|A purchase order number assigned by an accounting department to allocate funds for a stated and approved purpose"),
   'ExpenseDate' => gettext("Expense Date|The specific date the expense occurred"),
   'ExpenseTitle' => gettext("Expense Title|A brief title used to describe the expense paid from the trust distribution account"),
   'ExpenseDesc' => gettext("Expense Description|A detailed description of the expense paid from the trust distribution account"),
   'ExpenseAmount' => gettext("Paid Amount|The amount of the expense, stated in the currency assigned to this installation of the software"),
   'PayeeOrgID' => gettext("Payee Organization|The organization receiving payment"),
   'PayeePersonID' => gettext("Payee Person|The name of the individual receiving payment"),
   'ExpensePaymentMethodID' => gettext("Payment Method|The method used to pay the expense"),
   'TransactionDocNumber' => gettext("Payment Document Number|The type and number associated with the payment document (e.g. Personal Check (562)"),
   'AccountCategoryID' => gettext("Account Category|A broad categoy used to group accounts of similar types"),
   'AccountTypeID' => gettext("Account Type|A combined field used to describe this account type when associating it with other records"),
   'AccountID' => gettext("Account|A combined field used to describe the budget account when associating it with other records"),
   'AccountOrganization' => gettext("Account Organization|The organization responsible for managing the budget account"),
   'AccountDesc' => gettext("Account Description|A detailed description of the budget account")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['ExpenseDate'], ShortPhrase($phrases['ExpenseDate']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpenseDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ExpenseTitle'], ShortPhrase($phrases['ExpenseTitle']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpenseTitle']->invalid = TRUE;
            }
$vMsg = Validate($data['ExpenseDesc'], ShortPhrase($phrases['ExpenseDesc']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpenseDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['ExpenseAmount'], ShortPhrase($phrases['ExpenseAmount']), 'Money notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpenseAmount']->invalid = TRUE;
            }
$vMsg = Validate($data['PayeeOrgID'], ShortPhrase($phrases['PayeeOrgID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PayeeOrgID']->invalid = TRUE;
            }
$vMsg = Validate($data['PayeePersonID'], ShortPhrase($phrases['PayeePersonID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PayeePersonID']->invalid = TRUE;
            }
$vMsg = Validate($data['ExpensePaymentMethodID'], ShortPhrase($phrases['ExpensePaymentMethodID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpensePaymentMethodID']->invalid = TRUE;
            }
$vMsg = Validate($data['TransactionDocNumber'], ShortPhrase($phrases['TransactionDocNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransactionDocNumber']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Expenditures"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Expenditure") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about the trust account expenditure") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the trust account expenditure") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the trust account expenditure") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate file retention methods with the trust account expenditure") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the trust account expenditure") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Expense") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ExpenseDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ExpenseDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>