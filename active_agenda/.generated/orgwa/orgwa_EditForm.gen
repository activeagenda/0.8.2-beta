<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:18:"WorkAvailabilityID";O:9:"viewfield":16:{s:4:"name";s:18:"WorkAvailabilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Record ID|A unique number assigned used to track work availability associated with an organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"orgwa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:23:"WorkAvailabilityGroupID";O:14:"codecombofield":27:{s:4:"name";s:23:"WorkAvailabilityGroupID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'109\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'109\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"orgwa";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"109";}s:24:"UnavailabilityCategoryID";O:10:"combofield":26:{s:4:"name";s:24:"UnavailabilityCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'98\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'98\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:24:"WorkUnavailabilityTypeID";a:1:{s:4:"name";s:24:"WorkUnavailabilityTypeID";}}s:8:"moduleID";s:5:"orgwa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:24:"WorkUnavailabilityTypeID";O:10:"combofield":26:{s:4:"name";s:24:"WorkUnavailabilityTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"orgwu";s:10:"foreignKey";s:24:"WorkUnavailabilityTypeID";s:12:"foreignField";s:22:"WorkUnavailabilityType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:381:"SELECT 
`orgwu`.WorkUnavailabilityTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' - \',IFNULL(`orgwu`.UnavailabilityType,\'\')),\' - \') AS Name, `orgwu`.UnavailabilityCategoryID AS ParentID FROM `orgwu`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgwu`.UnavailabilityCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'98\')
WHERE orgwu._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:393:"SELECT 
`orgwu`.WorkUnavailabilityTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' - \',IFNULL(`orgwu`.UnavailabilityType,\'\')),\' - \') AS Name, `orgwu`.UnavailabilityCategoryID AS ParentID FROM `orgwu`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgwu`.UnavailabilityCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'98\')

WHERE `orgwu`.WorkUnavailabilityTypeID = \'/*recordID*/\'";s:11:"parentField";s:24:"UnavailabilityCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"orgwa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:9:"StartDate";O:9:"datefield":15:{s:4:"name";s:9:"StartDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:7:"EndDate";O:9:"datefield":15:{s:4:"name";s:7:"EndDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:4:"Days";O:9:"editfield":14:{s:4:"name";s:4:"Days";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:8:"CalcDays";O:9:"viewfield":16:{s:4:"name";s:8:"CalcDays";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Calendar Days (calculated)|The number of calendar days of unavailable work";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Department");

//field value array
$data = array(
        'WorkAvailabilityID' => '',
         'OrganizationID' => '',
         'WorkAvailabilityGroupID' => '',
         'UnavailabilityCategoryID' => '',
         'WorkUnavailabilityTypeID' => '',
         'StartDate' => '',
         'EndDate' => '',
         'Days' => '',
         'CalcDays' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'WorkAvailabilityID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `orgwa`.WorkAvailabilityID,
   `org1`.Name AS Organization,
   `orgwa`.OrganizationID,
   `cod1`.Description AS WorkAvailabilityGroup,
   `orgwa`.WorkAvailabilityGroupID,
   `cod2`.Description AS UnavailabilityCategory,
   `orgwu1`.UnavailabilityCategoryID AS UnavailabilityCategoryID,
   NULLIF(CONCAT(IFNULL(`cod3`.Description,''),' - ',IFNULL(`orgwu1`.UnavailabilityType,'')),' - ') AS WorkUnavailabilityType,
   `orgwa`.WorkUnavailabilityTypeID,
   `dat1`.RelatedDate AS StartDate,
   `dat2`.RelatedDate AS EndDate,
   `orgwa`.Days,
   DATEDIFF(`dat2`.RelatedDate, `dat1`.RelatedDate) AS CalcDays,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`cod3`.Description,''),' - ',IFNULL(`orgwu1`.UnavailabilityType,'')),' - '),''),' from ',IFNULL(`dat1`.RelatedDate,''),' to ',IFNULL(`dat2`.RelatedDate,''),' at ',IFNULL(`org1`.Name,'')),' from  to  at ') AS RecordLabel
FROM `orgwa`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgwa`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgwa`.WorkAvailabilityGroupID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '109')
     LEFT OUTER JOIN `orgwu` AS orgwu1 
   ON (`orgwa`.WorkUnavailabilityTypeID = `orgwu1`.WorkUnavailabilityTypeID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`orgwa`.WorkAvailabilityID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'orgwa'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '28')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`orgwa`.WorkAvailabilityID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'orgwa'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '36')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`orgwu1`.UnavailabilityCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '98')
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`orgwu1`.UnavailabilityCategoryID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '98')
WHERE
   orgwa.WorkAvailabilityID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Department");
        $screenPhrase = gettext("Form|Edit summary information about work availability schedules");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Work Availability");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'WorkAvailabilityID' => gettext("Record ID|A unique number assigned used to track work availability associated with an organization"),
   'OrganizationID' => gettext("Organization|The organization to have departments assigned to"),
   'WorkAvailabilityGroupID' => gettext("Availability Group|A broadly defined title or phrase used to associate work availability with specifics groups of similar types"),
   'UnavailabilityCategoryID' => gettext("Unavailability Category|A broadly defined title or phrase used to group similar categories of work unavailability types"),
   'WorkUnavailabilityTypeID' => gettext("Work Unavailability Type|A combined field used to describe this unavailability type when associating it with other records"),
   'StartDate' => gettext("Start Date|The date this period of unavailability began"),
   'EndDate' => gettext("End Date|The date this period of unavailability ended"),
   'Days' => gettext("Days|The number of days of unavailable work"),
   'CalcDays' => gettext("Calendar Days (calculated)|The number of calendar days of unavailable work")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['WorkAvailabilityGroupID'], ShortPhrase($phrases['WorkAvailabilityGroupID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WorkAvailabilityGroupID']->invalid = TRUE;
            }
$vMsg = Validate($data['StartDate'], ShortPhrase($phrases['StartDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['StartDate']->invalid = TRUE;
            }
$vMsg = Validate($data['EndDate'], ShortPhrase($phrases['EndDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EndDate']->invalid = TRUE;
            }
$vMsg = Validate($data['Days'], ShortPhrase($phrases['Days']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Days']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Departments"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Department") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about work availability schedules") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Department") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"StartDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_StartDate\"
});
Calendar.setup({
   inputField : \"EndDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_EndDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>