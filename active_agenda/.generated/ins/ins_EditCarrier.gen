<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:24:{s:8:"PolicyID";O:9:"viewfield":16:{s:4:"name";s:8:"PolicyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Record ID|An automatically assigned number used to track insurance policies";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"InsuranceTypeID";O:14:"invisiblefield":11:{s:4:"name";s:15:"InsuranceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:13:"InsuranceType";O:9:"viewfield":16:{s:4:"name";s:13:"InsuranceType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Insurance Type|A combined field used to describe this insurance type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyName";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Policy Name|A short name or phrase used to identify the insurancepolicy";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"PolicyNumber";O:9:"viewfield":16:{s:4:"name";s:12:"PolicyNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Policy Number|The policy number assigned by the insurance carrier";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IntegrationKey";O:9:"viewfield":16:{s:4:"name";s:14:"IntegrationKey";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:165:"Integration Key|An alpha or alpha numeric value assigned by the claims administration company to enable to downloading of data directly from the claims administrator";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyDesc";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Policy Description|A detailed description of the insrance policy in effect and any special endorsements or exclusions associated with the policy";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Organization|The primary organization covered by this insurance policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"RetentionAcct";O:9:"viewfield":16:{s:4:"name";s:13:"RetentionAcct";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:127:"Retention Account|Whether this policy is an internal retention or accruel account established to pay claims from internal funds";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Person Accountable|The individual assigned primary accountability for policy oversight relative to this specific policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EffectiveDate";O:9:"viewfield":16:{s:4:"name";s:13:"EffectiveDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Effective Date|The date the insurance policy first becomes effective";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationDate";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Expiration Date|The date the is no longer in force and coverage no longer exists";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Days Remaining|The total number of days remaining before the insurance policy expires";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstOpp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstOpp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Estimated Opportunity|The total estimated financial opportunity associated with the insurance policy";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstExp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstExp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Estimated Exposure|The total estimated cost exposure associated with the insurance policy";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"PolicyStatus";O:9:"viewfield":16:{s:4:"name";s:12:"PolicyStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:49:"Policy Status|The status of this insurance policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskImperatives";O:9:"viewfield":16:{s:4:"name";s:15:"RiskImperatives";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Risk Imperatives|A list of associated Risk Imperatives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"CarrierNameID";O:13:"orgcombofield":26:{s:4:"name";s:13:"CarrierNameID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ins";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"CarrierContactID";O:16:"personcombofield":29:{s:4:"name";s:16:"CarrierContactID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ins";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:20:"CarrierContactID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"ExcessCarrierID";O:13:"orgcombofield":26:{s:4:"name";s:15:"ExcessCarrierID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ins";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"EstimatedPremium";O:10:"moneyfield":18:{s:4:"name";s:16:"EstimatedPremium";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:17:"Money notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"PremiumPaid";O:10:"moneyfield":18:{s:4:"name";s:11:"PremiumPaid";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:17:"Money notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"OutstandingPremium";O:9:"viewfield":16:{s:4:"name";s:18:"OutstandingPremium";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:244:"Outstanding Premium|The amount left to be paid to satisfy the estimated premium, stated in the currency assigned to this installation of the software. The outstanding reserve is the difference between Total Incurred and the Paid to Date amounts";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:20:"PremiumValuationDate";O:9:"datefield":15:{s:4:"name";s:20:"PremiumValuationDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Insurance Policy");

//field value array
$data = array(
        'PolicyID' => '',
         'InsuranceTypeID' => '',
         'InsuranceType' => '',
         'PolicyName' => '',
         'PolicyNumber' => '',
         'IntegrationKey' => '',
         'PolicyDesc' => '',
         'Organization' => '',
         'RetentionAcct' => '',
         'PersonAccountable' => '',
         'EffectiveDate' => '',
         'ExpirationDate' => '',
         'DaysRemaining' => '',
         'TotalEstOpp' => '',
         'TotalEstExp' => '',
         'PolicyStatus' => '',
         'RiskImperatives' => '',
         'CarrierNameID' => '',
         'CarrierContactID' => '',
         'ExcessCarrierID' => '',
         'EstimatedPremium' => '',
         'PremiumPaid' => '',
         'OutstandingPremium' => '',
         'PremiumValuationDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'PolicyID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Broker";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ins`.PolicyID,
   `ins`.InsuranceTypeID,
   NULLIF(CONCAT(IFNULL(`inst1`.InsuranceTypeTitle,'')),'') AS InsuranceType,
   `ins`.PolicyName,
   `ins`.PolicyNumber,
   `ins`.IntegrationKey,
   `ins`.PolicyDesc,
   `org1`.Name AS Organization,
   `ins`.RetentionAcct,
   `ppl1`.DisplayName AS PersonAccountable,
   `dat1`.RelatedDate AS EffectiveDate,
   `dat2`.RelatedDate AS ExpirationDate,
   CASE WHEN DATEDIFF(`dat2`.RelatedDate, NOW()) > 0 THEN DATEDIFF(`dat2`.RelatedDate, NOW()) ELSE 0 END AS DaysRemaining,
   `opt1`.TotalEstOpp AS TotalEstOpp,
   `cosex1`.TotalEstExp AS TotalEstExp,
   `cod2`.Description AS PolicyStatus,
   `rsk1`.RiskImperatives AS RiskImperatives,
   `org2`.Name AS CarrierName,
   `ins`.CarrierNameID,
   `ppl2`.DisplayName AS CarrierContact,
   `inv1`.PersonInvolvedID AS CarrierContactID,
   `org4`.Name AS ExcessCarrier,
   `ins`.ExcessCarrierID,
   `ins`.EstimatedPremium,
   `ins`.PremiumPaid,
   IFNULL(ROUND(`ins`.EstimatedPremium, 2),0) - IFNULL(ROUND(`ins`.PremiumPaid, 2),0) AS OutstandingPremium,
   `ins`.PremiumValuationDate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`inst1`.InsuranceTypeTitle,'')),''),''),' Number: ',IFNULL(`ins`.PolicyNumber,''),' issued by ',IFNULL(`org2`.Name,''),', expiring on ',IFNULL(`dat2`.RelatedDate,'')),' Number:  issued by , expiring on ') AS RecordLabel,
   `ins`.OrganizationID
FROM `ins`
   
     LEFT OUTER JOIN `inst` AS inst1 
   ON (`ins`.InsuranceTypeID = `inst1`.InsuranceTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`ins`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`ins`.PolicyID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'ins'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '46')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ins`.PolicyID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ins'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '17')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`ins`.PolicyID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'ins'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`opt`.Estimate, 2)) AS TotalEstOpp,
`opt`.RelatedRecordID FROM `opt` 
 WHERE `opt`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `opt`.RelatedModuleID
GROUP BY `opt`.RelatedRecordID 
) AS opt1 
ON (`ins`.PolicyID = opt1.RelatedRecordID) 
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`cosex`.Estimate, 2)) AS TotalEstExp,
`cosex`.RelatedRecordID FROM `cosex` 
 WHERE `cosex`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `cosex`.RelatedModuleID
GROUP BY `cosex`.RelatedRecordID 
) AS cosex1 
ON (`ins`.PolicyID = cosex1.RelatedRecordID) 
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`ins`.PolicyStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '209')
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS RiskImperatives,
`rsk`.RelatedRecordID FROM `rsk` 

LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '234')
 WHERE `rsk`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `rsk`.RelatedModuleID
GROUP BY `rsk`.RelatedRecordID 
) AS rsk1 
ON (`ins`.PolicyID = rsk1.RelatedRecordID) 
     LEFT OUTER JOIN `org` AS org2 
   ON (`ins`.CarrierNameID = `org2`.OrganizationID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`ins`.PolicyID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'ins'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '64')
     LEFT OUTER JOIN `org` AS org4 
   ON (`ins`.ExcessCarrierID = `org4`.OrganizationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
WHERE
   ins.PolicyID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Insurance Policy");
        $screenPhrase = gettext("Carrier|Associate an insurance carrier with an insurance policy");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Insurance Policies");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'PolicyID' => gettext("Record ID|An automatically assigned number used to track insurance policies"),
   'InsuranceTypeID' => gettext("Insurance Type|A combined field used to describe this insurance type when associating it with other records"),
   'InsuranceType' => gettext("Insurance Type|A combined field used to describe this insurance type when associating it with other records"),
   'PolicyName' => gettext("Policy Name|A short name or phrase used to identify the insurancepolicy"),
   'PolicyNumber' => gettext("Policy Number|The policy number assigned by the insurance carrier"),
   'IntegrationKey' => gettext("Integration Key|An alpha or alpha numeric value assigned by the claims administration company to enable to downloading of data directly from the claims administrator"),
   'PolicyDesc' => gettext("Policy Description|A detailed description of the insrance policy in effect and any special endorsements or exclusions associated with the policy"),
   'Organization' => gettext("Organization|The primary organization covered by this insurance policy"),
   'RetentionAcct' => gettext("Retention Account|Whether this policy is an internal retention or accruel account established to pay claims from internal funds"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for policy oversight relative to this specific policy"),
   'EffectiveDate' => gettext("Effective Date|The date the insurance policy first becomes effective"),
   'ExpirationDate' => gettext("Expiration Date|The date the is no longer in force and coverage no longer exists"),
   'DaysRemaining' => gettext("Days Remaining|The total number of days remaining before the insurance policy expires"),
   'TotalEstOpp' => gettext("Estimated Opportunity|The total estimated financial opportunity associated with the insurance policy"),
   'TotalEstExp' => gettext("Estimated Exposure|The total estimated cost exposure associated with the insurance policy"),
   'PolicyStatus' => gettext("Policy Status|The status of this insurance policy"),
   'RiskImperatives' => gettext("Risk Imperatives|A list of associated Risk Imperatives"),
   'CarrierNameID' => gettext("Carrier Name|The name of insurance carrier providing the policy and related coverages"),
   'CarrierContactID' => gettext("Primary Contact Person|The person acting as the primary contact between the carrier and the primary organization of the policy holder"),
   'ExcessCarrierID' => gettext("Excess Carrier|The name of the reinsurance company or excess carrier that begins participating in coverage when a threshold amount has been exceeded"),
   'EstimatedPremium' => gettext("Estimated Premium|The total estimated cost of this insurance premium, stated in the currency assigned to this installation of the software"),
   'PremiumPaid' => gettext("Paid Premium|The amount actually paid to satisfy the estimated premium, stated in the currency assigned to this installation of the software"),
   'OutstandingPremium' => gettext("Outstanding Premium|The amount left to be paid to satisfy the estimated premium, stated in the currency assigned to this installation of the software. The outstanding reserve is the difference between Total Incurred and the Paid to Date amounts"),
   'PremiumValuationDate' => gettext("Premium Valuation Date|The specific date the premium payment evaluation occurred")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['CarrierNameID'], ShortPhrase($phrases['CarrierNameID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CarrierNameID']->invalid = TRUE;
            }
$vMsg = Validate($data['CarrierContactID'], ShortPhrase($phrases['CarrierContactID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CarrierContactID']->invalid = TRUE;
            }
$vMsg = Validate($data['ExcessCarrierID'], ShortPhrase($phrases['ExcessCarrierID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExcessCarrierID']->invalid = TRUE;
            }
$vMsg = Validate($data['EstimatedPremium'], ShortPhrase($phrases['EstimatedPremium']), 'Money notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EstimatedPremium']->invalid = TRUE;
            }
$vMsg = Validate($data['PremiumPaid'], ShortPhrase($phrases['PremiumPaid']), 'Money notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PremiumPaid']->invalid = TRUE;
            }
$vMsg = Validate($data['PremiumValuationDate'], ShortPhrase($phrases['PremiumValuationDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PremiumValuationDate']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Insurance Policies"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Insurance Policy") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an insurance policy") );
      $tempTabs['Carrier'] = array( "", gettext("Carrier|Associate an insurance carrier with an insurance policy") );
      $tempTabs['Broker'] = array( "edit.php?scr=Broker&$tabsQS", gettext("Broker|Associate an insurance broker with an insurance policy") );
      $tempTabs['Insureds'] = array( "edit.php?scr=Insureds&$tabsQS", gettext("Insureds|Associate covered organizations with the insurance policy") );
      $tempTabs['Limits'] = array( "edit.php?scr=Limits&$tabsQS", gettext("Limits|Associate coverage and threshold limits with the insurance policy") );
      $tempTabs['Coordinators'] = array( "edit.php?scr=Coordinators&$tabsQS", gettext("Coordinators|Associate local policy coordinators with the insurance policy") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the insurance policy") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the insurance policy") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Exposures|Associate cost exposures with the insurance policy") );
      $tempTabs['Opportunities'] = array( "edit.php?scr=Opportunities&$tabsQS", gettext("Opportunities|Associate financial opportunities with the insurance policy") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the insurance policy") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the insurance policy") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the insurance policy") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the insurance policy") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the insurance policy") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the insurance policy") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate file retention methods with the insurance policy") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the insurance policy") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the insurance policy") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Carrier'] = array( "", gettext("New Policy") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"PremiumValuationDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_PremiumValuationDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>