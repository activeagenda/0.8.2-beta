<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:17:{s:8:"PolicyID";O:9:"viewfield":16:{s:4:"name";s:8:"PolicyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Record ID|An automatically assigned number used to track insurance policies";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"InsuranceTypeID";O:14:"invisiblefield":11:{s:4:"name";s:15:"InsuranceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:13:"InsuranceType";O:9:"viewfield":16:{s:4:"name";s:13:"InsuranceType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Insurance Type|A combined field used to describe this insurance type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyName";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Policy Name|A short name or phrase used to identify the insurancepolicy";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"PolicyNumber";O:9:"viewfield":16:{s:4:"name";s:12:"PolicyNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Policy Number|The policy number assigned by the insurance carrier";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IntegrationKey";O:9:"viewfield":16:{s:4:"name";s:14:"IntegrationKey";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:165:"Integration Key|An alpha or alpha numeric value assigned by the claims administration company to enable to downloading of data directly from the claims administrator";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyDesc";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Policy Description|A detailed description of the insrance policy in effect and any special endorsements or exclusions associated with the policy";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Organization|The primary organization covered by this insurance policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"RetentionAcct";O:9:"viewfield":16:{s:4:"name";s:13:"RetentionAcct";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:127:"Retention Account|Whether this policy is an internal retention or accruel account established to pay claims from internal funds";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Person Accountable|The individual assigned primary accountability for policy oversight relative to this specific policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EffectiveDate";O:9:"viewfield":16:{s:4:"name";s:13:"EffectiveDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Effective Date|The date the insurance policy first becomes effective";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationDate";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Expiration Date|The date the is no longer in force and coverage no longer exists";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Days Remaining|The total number of days remaining before the insurance policy expires";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstOpp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstOpp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Estimated Opportunity|The total estimated financial opportunity associated with the insurance policy";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstExp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstExp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Estimated Exposure|The total estimated cost exposure associated with the insurance policy";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"PolicyStatus";O:9:"viewfield":16:{s:4:"name";s:12:"PolicyStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:49:"Policy Status|The status of this insurance policy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskImperatives";O:9:"viewfield":16:{s:4:"name";s:15:"RiskImperatives";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Risk Imperatives|A list of associated Risk Imperatives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Insurance Policy");

//field value array
$data = array(
        'PolicyID' => '',
         'InsuranceTypeID' => '',
         'InsuranceType' => '',
         'PolicyName' => '',
         'PolicyNumber' => '',
         'IntegrationKey' => '',
         'PolicyDesc' => '',
         'Organization' => '',
         'RetentionAcct' => '',
         'PersonAccountable' => '',
         'EffectiveDate' => '',
         'ExpirationDate' => '',
         'DaysRemaining' => '',
         'TotalEstOpp' => '',
         'TotalEstExp' => '',
         'PolicyStatus' => '',
         'RiskImperatives' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[2] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1266:"SELECT 
   `opt`.OpportunityEstimateID,
   `opt`.OpportunityEstimateTitle,
   `opt`.OpportunityEstimateDescription,
   `opt`.Estimate,
   `cod1`.Description AS FinancialBenefitFrequencyCategory,
   `uts1`.UnitCategoryID AS FinancialBenefitFrequencyCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS FinancialBenefitFrequencyUnit,
   `opt`.FinancialBenefitFrequencyUnitID,
   `opt`.FinancialBenefitFrequency,
   `org1`.Name AS OwnerOrganization,
   `opt`.OwnerOrganizationID,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID
FROM `opt`
   
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`opt`.FinancialBenefitFrequencyUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`opt`.OwnerOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`opt`.OpportunityEstimateID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'opt\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'183\')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`uts1`.UnitCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'37\')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   opt.OpportunityEstimateID=\'/**RowID**/\'";s:9:"getRowSQL";s:573:"SELECT 
   `opt`.OpportunityEstimateID,
   `org1`.Name AS OwnerOrganization,
   `opt`.OpportunityEstimateTitle,
   `opt`.Estimate,
   NULLIF(CONCAT(IFNULL(`opt`.FinancialBenefitFrequency,\'\'),\' per \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' per \') AS BenefitFrequency,
   `opt`.OwnerOrganizationID
FROM `opt`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`opt`.OwnerOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`opt`.FinancialBenefitFrequencyUnitID = `uts1`.UnitID )
WHERE
   opt.OpportunityEstimateID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:7:{s:21:"OpportunityEstimateID";O:14:"invisiblefield":11:{s:4:"name";s:21:"OpportunityEstimateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record ID|An automatically assigned number used to track the association of cost Opportunitys with records throughout the application";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:24:"OpportunityEstimateTitle";O:9:"editfield":14:{s:4:"name";s:24:"OpportunityEstimateTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Title|A concise title that describes the estimated opportunity";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:30:"OpportunityEstimateDescription";O:9:"memofield":15:{s:4:"name";s:30:"OpportunityEstimateDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Description|A detailed description of the estimated opportunity";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:8:"Estimate";O:10:"moneyfield":18:{s:4:"name";s:8:"Estimate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Estimate|The total estimated opportunity";s:8:"dataType";s:5:"money";s:8:"validate";s:26:"Money notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:25:"FinancialBenefitFrequency";O:9:"editfield":14:{s:4:"name";s:25:"FinancialBenefitFrequency";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:35:"FinancialBenefitFrequencyCategoryID";O:10:"combofield":26:{s:4:"name";s:35:"FinancialBenefitFrequencyCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:31:"FinancialBenefitFrequencyUnitID";a:1:{s:4:"name";s:31:"FinancialBenefitFrequencyUnitID";}}s:8:"moduleID";s:3:"opt";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:31:"FinancialBenefitFrequencyUnitID";O:10:"combofield":26:{s:4:"name";s:31:"FinancialBenefitFrequencyUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:35:"FinancialBenefitFrequencyCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"opt";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";s:74:"Opportunity Frequency|The recurring frequency of the estimated opportunity";s:8:"dataType";s:5:"float";s:8:"validate";s:18:"Number notNegative";s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:19:"OwnerOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:19:"OwnerOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Organization|The name of the organization presented with the estimated opportunity";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"opt";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Person Accountable|The individual accountable for managing the estimated opportunity";s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"opt";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:21:"OpportunityEstimateID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"opt";s:6:"phrase";s:21:"Opportunity Estimates";s:6:"number";i:2;s:6:"Fields";a:5:{s:21:"OpportunityEstimateID";O:14:"invisiblefield":11:{s:4:"name";s:21:"OpportunityEstimateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record ID|An automatically assigned number used to track the association of cost Opportunitys with records throughout the application";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:17:"OwnerOrganization";O:9:"viewfield":16:{s:4:"name";s:17:"OwnerOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Organization|The name of the organization associated with the estimated opportunity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"OpportunityEstimateTitle";O:9:"viewfield":16:{s:4:"name";s:24:"OpportunityEstimateTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Title|A concise title that describes the estimated opportunity";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Estimate";O:9:"viewfield":16:{s:4:"name";s:8:"Estimate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Estimate|The total estimated opportunity";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"BenefitFrequency";O:9:"viewfield":16:{s:4:"name";s:16:"BenefitFrequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Benefit Frequency|A combined field used to display the benefit frequency";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"opt";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:142:"SELECT 
    count(*) 
FROM `opt`
   
WHERE opt._Deleted = 0
   AND `opt`.RelatedModuleID = \'ins\'
AND `opt`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:606:"SELECT 
   `opt`.OpportunityEstimateID,
`opt`.OwnerOrganizationID,
`org1`.Name AS OwnerOrganization,
`opt`.OpportunityEstimateTitle,
`opt`.Estimate,
NULLIF(CONCAT(IFNULL(`opt`.FinancialBenefitFrequency,\'\'),\' per \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' per \') AS BenefitFrequency
FROM `opt`

   LEFT OUTER JOIN `org` AS org1 
   ON (`opt`.OwnerOrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `uts` AS uts1 
   ON (`opt`.FinancialBenefitFrequencyUnitID = `uts1`.UnitID )
WHERE opt._Deleted = 0
AND `opt`.RelatedModuleID = \'ins\'
AND `opt`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:8:"PolicyID";s:8:"PKFields";a:1:{i:0;s:21:"OpportunityEstimateID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"ins";}}');


    $guidanceGrid = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:1:{s:20:"GuidanceOrganization";N;}s:6:"isInfo";b:0;s:10:"isGuidance";b:1;s:10:"isVertical";b:1;s:15:"verticalFormats";a:5:{s:16:"OrganizationLogo";s:9:"LogoField";s:29:"OpportunityConsiderationTitle";s:10:"TitleField";s:35:"OpportunityConsiderationDescription";s:12:"FeatureField";s:8:"Estimate";s:12:"FeatureField";s:16:"BenefitFrequency";s:12:"FeatureField";}s:8:"moduleID";s:4:"optc";s:6:"phrase";s:20:"Opportunity Guidance";s:6:"number";N;s:6:"Fields";a:8:{s:26:"OpportunityConsiderationID";O:14:"invisiblefield":11:{s:4:"name";s:26:"OpportunityConsiderationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Record ID|An automatically assigned number used to track the association of opportunity considerations with records throughout the application";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"OrganizationLogo";O:9:"viewfield":16:{s:4:"name";s:16:"OrganizationLogo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Organization Logo|Displays the logo of the guidance organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:29:"OpportunityConsiderationTitle";O:9:"viewfield":16:{s:4:"name";s:29:"OpportunityConsiderationTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Title|A concise title that describes the opportunity being offered for consideration";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:35:"OpportunityConsiderationDescription";O:9:"viewfield":16:{s:4:"name";s:35:"OpportunityConsiderationDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Description|A detailed description of the opportunity being offered for consideration";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Estimate";O:9:"viewfield":16:{s:4:"name";s:8:"Estimate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:124:"Estimate|The total estimated amount of the opportunity, stated in the currency assigned to this installation of the software";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"BenefitFrequency";O:9:"viewfield":16:{s:4:"name";s:16:"BenefitFrequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Benefit Frequency|A combined field used to display the benefit frequency";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"GuidanceOrganization";O:9:"viewfield":16:{s:4:"name";s:20:"GuidanceOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Guidance Provided By|The name of the organization providing the opportunity guidance";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"GuidancePerson";O:9:"viewfield":16:{s:4:"name";s:14:"GuidancePerson";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Guidance Person|The individual providing guidance for consideration";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"optc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:330:"SELECT 
    count(*) 
FROM `optc`
   
   LEFT OUTER JOIN `gui` AS gui1 
   ON (`optc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
 INNER JOIN `ins` AS `parent` ON `gui1`.RelatedRecordID = `parent`.InsuranceTypeID
WHERE optc._Deleted = 0
   AND `gui1`.RelatedModuleID = \'inst\'
AND `parent`.PolicyID = \'/**RecordID**/\'
";s:7:"listSQL";s:1497:"SELECT 
   `optc`.OpportunityConsiderationID,
`optc`.GuidanceOrganizationID,
NULLIF(CONCAT(\'<img src=\\"org/\',IFNULL(IFNULL(`org1`.GuidanceLogoName, \'transparent.gif\'),\'\'),\'\\" alt=\\"logo\\" />\'),\'<img src=\\\\\\"org/\\\\\\" alt=\\\\\\"logo\\\\\\" />\') AS OrganizationLogo,
`optc`.OpportunityConsiderationTitle,
`optc`.OpportunityConsiderationDescription,
`optc`.Estimate,
NULLIF(CONCAT(IFNULL(`optc`.FinancialBenefitFrequency,\'\'),\' per \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' per \') AS BenefitFrequency,
NULLIF(CONCAT(IFNULL(`org2`.Name,\'\')),\'\') AS GuidanceOrganization,
`ppl1`.DisplayName AS GuidancePerson
FROM `optc`

   LEFT OUTER JOIN `gui` AS gui1 
   ON (`optc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
   LEFT OUTER JOIN `uts` AS uts1 
   ON (`optc`.FinancialBenefitFrequencyUnitID = `uts1`.UnitID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`gui1`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `org` AS org2 
   ON (`gui1`.OrganizationID = `org2`.OrganizationID )
   LEFT OUTER JOIN `acc` AS acc1 
    ON (`gui1`.GuidanceOrganizationID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'gui\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'184\')
   LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
 INNER JOIN `ins` AS `parent` ON `gui1`.RelatedRecordID = `parent`.InsuranceTypeID
WHERE optc._Deleted = 0
AND `gui1`.RelatedModuleID = \'inst\'
AND `parent`.PolicyID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:2:{s:13:"suppressTitle";b:1;s:19:"suppressRecordIcons";b:1;}s:10:"fieldTypes";a:8:{s:26:"OpportunityConsiderationID";s:3:"int";s:16:"OrganizationLogo";N;s:29:"OpportunityConsiderationTitle";s:12:"varchar(128)";s:35:"OpportunityConsiderationDescription";s:4:"text";s:8:"Estimate";s:5:"money";s:16:"BenefitFrequency";s:4:"text";s:20:"GuidanceOrganization";N;s:14:"GuidancePerson";N;}s:4:"name";N;s:10:"fieldAlign";a:8:{s:26:"OpportunityConsiderationID";s:5:"right";s:16:"OrganizationLogo";s:7:"justify";s:29:"OpportunityConsiderationTitle";s:4:"left";s:35:"OpportunityConsiderationDescription";s:7:"justify";s:8:"Estimate";s:5:"right";s:16:"BenefitFrequency";s:7:"justify";s:20:"GuidanceOrganization";s:7:"justify";s:14:"GuidancePerson";s:4:"left";}}');


    $PKField = 'PolicyID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[2]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Hazards";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ins`.PolicyID,
   `ins`.InsuranceTypeID,
   NULLIF(CONCAT(IFNULL(`inst1`.InsuranceTypeTitle,'')),'') AS InsuranceType,
   `ins`.PolicyName,
   `ins`.PolicyNumber,
   `ins`.IntegrationKey,
   `ins`.PolicyDesc,
   `org1`.Name AS Organization,
   `ins`.RetentionAcct,
   `ppl1`.DisplayName AS PersonAccountable,
   `dat1`.RelatedDate AS EffectiveDate,
   `dat2`.RelatedDate AS ExpirationDate,
   CASE WHEN DATEDIFF(`dat2`.RelatedDate, NOW()) > 0 THEN DATEDIFF(`dat2`.RelatedDate, NOW()) ELSE 0 END AS DaysRemaining,
   `opt1`.TotalEstOpp AS TotalEstOpp,
   `cosex1`.TotalEstExp AS TotalEstExp,
   `cod2`.Description AS PolicyStatus,
   `rsk1`.RiskImperatives AS RiskImperatives,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`inst1`.InsuranceTypeTitle,'')),''),''),' Number: ',IFNULL(`ins`.PolicyNumber,''),' issued by ',IFNULL(`org2`.Name,''),', expiring on ',IFNULL(`dat2`.RelatedDate,'')),' Number:  issued by , expiring on ') AS RecordLabel,
   `ins`.OrganizationID
FROM `ins`
   
     LEFT OUTER JOIN `inst` AS inst1 
   ON (`ins`.InsuranceTypeID = `inst1`.InsuranceTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`ins`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`ins`.PolicyID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'ins'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '46')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ins`.PolicyID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ins'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '17')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`ins`.PolicyID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'ins'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`opt`.Estimate, 2)) AS TotalEstOpp,
`opt`.RelatedRecordID FROM `opt` 
 WHERE `opt`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `opt`.RelatedModuleID
GROUP BY `opt`.RelatedRecordID 
) AS opt1 
ON (`ins`.PolicyID = opt1.RelatedRecordID) 
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`cosex`.Estimate, 2)) AS TotalEstExp,
`cosex`.RelatedRecordID FROM `cosex` 
 WHERE `cosex`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `cosex`.RelatedModuleID
GROUP BY `cosex`.RelatedRecordID 
) AS cosex1 
ON (`ins`.PolicyID = cosex1.RelatedRecordID) 
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`ins`.PolicyStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '209')
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS RiskImperatives,
`rsk`.RelatedRecordID FROM `rsk` 

LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '234')
 WHERE `rsk`._Deleted = 0 
 AND RelatedModuleID = 'ins' 
 AND 'ins' = `rsk`.RelatedModuleID
GROUP BY `rsk`.RelatedRecordID 
) AS rsk1 
ON (`ins`.PolicyID = rsk1.RelatedRecordID) 
     LEFT OUTER JOIN `org` AS org2 
   ON (`ins`.CarrierNameID = `org2`.OrganizationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   ins.PolicyID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Insurance Policy");
        $screenPhrase = gettext("Opportunities|Associate financial opportunities with the insurance policy");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Insurance Policies");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'PolicyID' => gettext("Record ID|An automatically assigned number used to track insurance policies"),
   'InsuranceTypeID' => gettext("Insurance Type|A combined field used to describe this insurance type when associating it with other records"),
   'InsuranceType' => gettext("Insurance Type|A combined field used to describe this insurance type when associating it with other records"),
   'PolicyName' => gettext("Policy Name|A short name or phrase used to identify the insurancepolicy"),
   'PolicyNumber' => gettext("Policy Number|The policy number assigned by the insurance carrier"),
   'IntegrationKey' => gettext("Integration Key|An alpha or alpha numeric value assigned by the claims administration company to enable to downloading of data directly from the claims administrator"),
   'PolicyDesc' => gettext("Policy Description|A detailed description of the insrance policy in effect and any special endorsements or exclusions associated with the policy"),
   'Organization' => gettext("Organization|The primary organization covered by this insurance policy"),
   'RetentionAcct' => gettext("Retention Account|Whether this policy is an internal retention or accruel account established to pay claims from internal funds"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for policy oversight relative to this specific policy"),
   'EffectiveDate' => gettext("Effective Date|The date the insurance policy first becomes effective"),
   'ExpirationDate' => gettext("Expiration Date|The date the is no longer in force and coverage no longer exists"),
   'DaysRemaining' => gettext("Days Remaining|The total number of days remaining before the insurance policy expires"),
   'TotalEstOpp' => gettext("Estimated Opportunity|The total estimated financial opportunity associated with the insurance policy"),
   'TotalEstExp' => gettext("Estimated Exposure|The total estimated cost exposure associated with the insurance policy"),
   'PolicyStatus' => gettext("Policy Status|The status of this insurance policy"),
   'RiskImperatives' => gettext("Risk Imperatives|A list of associated Risk Imperatives")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Insurance Policies"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Insurance Policy") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an insurance policy") );
      $tempTabs['Carrier'] = array( "edit.php?scr=Carrier&$tabsQS", gettext("Carrier|Associate an insurance carrier with an insurance policy") );
      $tempTabs['Broker'] = array( "edit.php?scr=Broker&$tabsQS", gettext("Broker|Associate an insurance broker with an insurance policy") );
      $tempTabs['Insureds'] = array( "edit.php?scr=Insureds&$tabsQS", gettext("Insureds|Associate covered organizations with the insurance policy") );
      $tempTabs['Limits'] = array( "edit.php?scr=Limits&$tabsQS", gettext("Limits|Associate coverage and threshold limits with the insurance policy") );
      $tempTabs['Coordinators'] = array( "edit.php?scr=Coordinators&$tabsQS", gettext("Coordinators|Associate local policy coordinators with the insurance policy") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the insurance policy") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the insurance policy") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Exposures|Associate cost exposures with the insurance policy") );
      $tempTabs['Opportunities'] = array( "", gettext("Opportunities|Associate financial opportunities with the insurance policy") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the insurance policy") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the insurance policy") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the insurance policy") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the insurance policy") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the insurance policy") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the insurance policy") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate file retention methods with the insurance policy") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the insurance policy") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the insurance policy") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Opportunities'] = array( "", gettext("New Policy") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>