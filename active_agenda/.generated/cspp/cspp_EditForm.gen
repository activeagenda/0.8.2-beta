<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:14:{s:13:"EntryPermitID";O:9:"viewfield":16:{s:4:"name";s:13:"EntryPermitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|An automatically assigned number used to track confined space entries and associated permits";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"JobNumber";O:9:"editfield":14:{s:4:"name";s:9:"JobNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:12:"PermitNumber";O:9:"editfield":14:{s:4:"name";s:12:"PermitNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:9:"EntryTime";O:9:"datefield":15:{s:4:"name";s:9:"EntryTime";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"EntryShiftID";O:14:"coderadiofield":29:{s:4:"name";s:12:"EntryShiftID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'147\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'147\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"cspp";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"ExpirationTime";O:9:"datefield":15:{s:4:"name";s:14:"ExpirationTime";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"LocationID";a:1:{s:4:"name";s:10:"LocationID";}}s:8:"moduleID";s:4:"cspp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"LocationID";O:10:"combofield":26:{s:4:"name";s:10:"LocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"orgl";s:10:"foreignKey";s:10:"LocationID";s:12:"foreignField";s:8:"Location";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:371:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE orgl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:369:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )

WHERE `orgl`.LocationID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"ConfinedSpaceID";a:1:{s:4:"name";s:15:"ConfinedSpaceID";}}s:8:"moduleID";s:4:"cspp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`orgl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:15:"ConfinedSpaceID";O:10:"combofield":26:{s:4:"name";s:15:"ConfinedSpaceID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"csp";s:10:"foreignKey";s:15:"ConfinedSpaceID";s:12:"foreignField";s:13:"ConfinedSpace";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:354:"SELECT 
`csp`.ConfinedSpaceID AS ID, NULLIF(CONCAT(IFNULL(`csp`.ConfinedSpaceTitle,\'\')),\'\') AS Name, `orgla1`.LocationID AS ParentID FROM `csp`
 
 LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`csp`.ConfinedSpaceID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'csp\'
     AND `orgla1`._Deleted = 0)
WHERE csp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:357:"SELECT 
`csp`.ConfinedSpaceID AS ID, NULLIF(CONCAT(IFNULL(`csp`.ConfinedSpaceTitle,\'\')),\'\') AS Name, `orgla1`.LocationID AS ParentID FROM `csp`
 
 LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`csp`.ConfinedSpaceID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'csp\'
     AND `orgla1`._Deleted = 0)

WHERE `csp`.ConfinedSpaceID = \'/*recordID*/\'";s:11:"parentField";s:10:"LocationID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:14:"LastReviewDate";a:1:{s:4:"name";s:14:"LastReviewDate";}s:17:"ConfinedSpaceDesc";a:1:{s:4:"name";s:17:"ConfinedSpaceDesc";}}s:8:"moduleID";s:4:"cspp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`csp`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Last Review|The date of the last formal review of the confined space";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:15:"ConfinedSpaceID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:17:"ConfinedSpaceDesc";O:9:"viewfield":16:{s:4:"name";s:17:"ConfinedSpaceDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Description|A detailed description of this confined space and any special characteristics associated with entry or egress";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:15:"ConfinedSpaceID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"Explanation";O:9:"memofield":15:{s:4:"name";s:11:"Explanation";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"KeyLearnings";O:9:"memofield":15:{s:4:"name";s:12:"KeyLearnings";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"SpecialHazards";O:9:"memofield":15:{s:4:"name";s:14:"SpecialHazards";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Confined Space Entry Permit");

//field value array
$data = array(
        'EntryPermitID' => '',
         'JobNumber' => '',
         'PermitNumber' => '',
         'EntryTime' => '',
         'EntryShiftID' => '',
         'ExpirationTime' => '',
         'OrganizationID' => '',
         'LocationID' => '',
         'ConfinedSpaceID' => '',
         'LastReviewDate' => '',
         'ConfinedSpaceDesc' => '',
         'Explanation' => '',
         'KeyLearnings' => '',
         'SpecialHazards' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'EntryPermitID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Assignment";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `cspp`.EntryPermitID,
   `cspp`.JobNumber,
   `cspp`.PermitNumber,
   `dat1`.RelatedDate AS EntryTime,
   `cod1`.Description AS EntryShift,
   `cspp`.EntryShiftID,
   `dat2`.RelatedDate AS ExpirationTime,
   `org1`.Name AS Organization,
   `csp1`.OrganizationID AS OrganizationID,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `orgla1`.LocationID AS LocationID,
   NULLIF(CONCAT(IFNULL(`csp1`.ConfinedSpaceTitle,'')),'') AS ConfinedSpace,
   `cspp`.ConfinedSpaceID,
   `dat3`.RelatedDate AS LastReviewDate,
   `csp1`.ConfinedSpaceDesc AS ConfinedSpaceDesc,
   `cspp`.Explanation,
   `cspp`.KeyLearnings,
   `cspp`.SpecialHazards,
   NULLIF(CONCAT(IFNULL(`cspp`.PermitNumber,''),' | ',IFNULL(`dat1`.RelatedDate,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`cspt1`.ConfinedSpaceTitle,'')),''),''),' | ',IFNULL(`org1`.Name,'')),' |  |  | ') AS RecordLabel
FROM `cspp`
   
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`cspp`.EntryPermitID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'cspp'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '7')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`cspp`.EntryShiftID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '147')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`cspp`.EntryPermitID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'cspp'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN `csp` AS csp1 
   ON (`cspp`.ConfinedSpaceID = `csp1`.ConfinedSpaceID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`csp1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`csp1`.ConfinedSpaceID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'csp'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`csp1`.ConfinedSpaceID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'csp'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '20')
     LEFT OUTER JOIN `cspt` AS cspt1 
   ON (`csp1`.ConfinedSpaceTypeID = `cspt1`.ConfinedSpaceTypeID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   cspp.EntryPermitID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Confined Space Entry Permit");
        $screenPhrase = gettext("Form|Edit summary information about a confined space entry permit");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Confined Space Entry Permits");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'EntryPermitID' => gettext("Record ID|An automatically assigned number used to track confined space entries and associated permits"),
   'JobNumber' => gettext("Job Number|The unique number assigned to the job requiring confined space entry. This number is typically assigned by an engineering or maintenance dapartment"),
   'PermitNumber' => gettext("Permit Number|The unique number assigned to the permit used for space entry and placed at the entrance to the space during the performance of entrance activities.  The permit ID can be used as the permit number because it is a unique, automatically generated, numbering system"),
   'EntryTime' => gettext("Entry Date|The date and time the confined space was entered"),
   'EntryShiftID' => gettext("Entry Shift|The shift during which the confined space was entered"),
   'ExpirationTime' => gettext("Expiration Time|The date and time the confined space entry permit will expire and no longer be valid to permit the entry into the confined space"),
   'OrganizationID' => gettext("Organization|The name of the organization where the confined space exists"),
   'LocationID' => gettext("Location|Specific area within the facility where the confined space is located"),
   'ConfinedSpaceID' => gettext("Confined Space|A description of the confined space based on a combination of field values assigned from within the confined space module"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the confined space"),
   'ConfinedSpaceDesc' => gettext("Description|A detailed description of this confined space and any special characteristics associated with entry or egress"),
   'Explanation' => gettext("Explanation|An explanation of the confined space entry to be performed"),
   'KeyLearnings' => gettext("Key Learnings|Information learned during the confined space entry which may be useful to others performing similar confined space entries in the same or similar area"),
   'SpecialHazards' => gettext("Special Hazards|Special confined space entry hazards that should be captured and recorded for default permits so that all persons performing similar entries will be aware of the dangers")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['JobNumber'], ShortPhrase($phrases['JobNumber']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['JobNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['PermitNumber'], ShortPhrase($phrases['PermitNumber']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PermitNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['EntryTime'], ShortPhrase($phrases['EntryTime']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EntryTime']->invalid = TRUE;
            }
$vMsg = Validate($data['EntryShiftID'], ShortPhrase($phrases['EntryShiftID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EntryShiftID']->invalid = TRUE;
            }
$vMsg = Validate($data['ExpirationTime'], ShortPhrase($phrases['ExpirationTime']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ExpirationTime']->invalid = TRUE;
            }
$vMsg = Validate($data['ConfinedSpaceID'], ShortPhrase($phrases['ConfinedSpaceID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ConfinedSpaceID']->invalid = TRUE;
            }
$vMsg = Validate($data['Explanation'], ShortPhrase($phrases['Explanation']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Explanation']->invalid = TRUE;
            }
$vMsg = Validate($data['KeyLearnings'], ShortPhrase($phrases['KeyLearnings']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['KeyLearnings']->invalid = TRUE;
            }
$vMsg = Validate($data['SpecialHazards'], ShortPhrase($phrases['SpecialHazards']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SpecialHazards']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Confined Space Entry Permits"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Confined Space Entry Permit") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a confined space entry permit") );
      $tempTabs['Assignment'] = array( "edit.php?scr=Assignment&$tabsQS", gettext("Assignments|Assign people with confined space entry responsibilities") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the confined space entry permit") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the confined space entry permit") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the confined space entry permit") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View forms and reports associated with confined space entry permits") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Permit") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"EntryTime\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_EntryTime\"
});
Calendar.setup({
   inputField : \"ExpirationTime\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ExpirationTime\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>