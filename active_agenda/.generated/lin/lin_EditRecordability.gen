<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:18:{s:12:"LossInjuryID";O:9:"viewfield":16:{s:4:"name";s:12:"LossInjuryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Record ID|An automatically assigned number used to track injuries resulting in loss";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"IncidentReportID";O:9:"viewfield":16:{s:4:"name";s:16:"IncidentReportID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IncidentReport";O:9:"viewfield":16:{s:4:"name";s:14:"IncidentReport";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EventDate";O:9:"viewfield":16:{s:4:"name";s:9:"EventDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Event Date|Date the situation or incident occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"RegulatoryRecordable";O:13:"checkboxfield":14:{s:4:"name";s:20:"RegulatoryRecordable";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"PrivacyCase";O:13:"checkboxfield":14:{s:4:"name";s:11:"PrivacyCase";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:9:"Rationale";O:9:"memofield":15:{s:4:"name";s:9:"Rationale";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:23:"InjuryIllnessCategoryID";O:10:"combofield":26:{s:4:"name";s:23:"InjuryIllnessCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"linc";s:10:"foreignKey";s:23:"InjuryIllnessCategoryID";s:12:"foreignField";s:21:"InjuryIllnessCategory";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:276:"SELECT 
`linc`.InjuryIllnessCategoryID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\')),\'\') AS Name FROM `linc`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`linc`.InjIllCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'168\')
WHERE linc._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:287:"SELECT 
`linc`.InjuryIllnessCategoryID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\')),\'\') AS Name FROM `linc`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`linc`.InjIllCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'168\')

WHERE `linc`.InjuryIllnessCategoryID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:12:"CategoryDesc";a:1:{s:4:"name";s:12:"CategoryDesc";}}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:1;}s:12:"CategoryDesc";O:9:"viewfield":16:{s:4:"name";s:12:"CategoryDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Category Description|A brief but thorough description of the injury or illness category";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:23:"InjuryIllnessCategoryID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"DateofDeath";O:9:"datefield":15:{s:4:"name";s:11:"DateofDeath";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"InjuryIllnessTypeID";O:10:"combofield":26:{s:4:"name";s:19:"InjuryIllnessTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"lint";s:10:"foreignKey";s:19:"InjuryIllnessTypeID";s:12:"foreignField";s:17:"InjuryIllnessType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:268:"SELECT 
`lint`.InjuryIllnessTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\')),\'\') AS Name FROM `lint`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`lint`.InjIllTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'169\')
WHERE lint._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:275:"SELECT 
`lint`.InjuryIllnessTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\')),\'\') AS Name FROM `lint`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`lint`.InjIllTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'169\')

WHERE `lint`.InjuryIllnessTypeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:21:"InjuryIllnessTypeDesc";a:1:{s:4:"name";s:21:"InjuryIllnessTypeDesc";}}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:1;}s:21:"InjuryIllnessTypeDesc";O:9:"viewfield":16:{s:4:"name";s:21:"InjuryIllnessTypeDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Type Description|A brief but thorough description of the specific type of injury or illness type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:19:"InjuryIllnessTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:25:"PrimaryTreatingFacilityID";O:13:"orgcombofield":26:{s:4:"name";s:25:"PrimaryTreatingFacilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:19:"TreatingPhysicianID";O:16:"personcombofield":29:{s:4:"name";s:19:"TreatingPhysicianID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"TreatingPhysicianID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"EmergencyRoom";O:13:"checkboxfield":14:{s:4:"name";s:13:"EmergencyRoom";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"Hospitalized";O:13:"checkboxfield":14:{s:4:"name";s:12:"Hospitalized";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"RecordingPersonID";O:16:"personcombofield":29:{s:4:"name";s:17:"RecordingPersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"RecordingPersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"RecorderJobTitleID";O:10:"combofield":26:{s:4:"name";s:18:"RecorderJobTitleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"orgjt";s:10:"foreignKey";s:13:"OrgJobTitleID";s:12:"foreignField";s:12:"JobTitleName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:123:"SELECT 
`orgjt`.OrgJobTitleID AS ID, `orgjt`.JobTitleName AS Name FROM `orgjt`
WHERE orgjt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:124:"SELECT 
`orgjt`.OrgJobTitleID AS ID, `orgjt`.JobTitleName AS Name FROM `orgjt`

WHERE `orgjt`.OrgJobTitleID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:30:"`orgjt`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Injury Loss");

//field value array
$data = array(
        'LossInjuryID' => '',
         'IncidentReportID' => '',
         'IncidentReport' => '',
         'EventDate' => '',
         'RegulatoryRecordable' => '',
         'PrivacyCase' => '',
         'Rationale' => '',
         'InjuryIllnessCategoryID' => '',
         'CategoryDesc' => '',
         'DateofDeath' => '',
         'InjuryIllnessTypeID' => '',
         'InjuryIllnessTypeDesc' => '',
         'PrimaryTreatingFacilityID' => '',
         'TreatingPhysicianID' => '',
         'EmergencyRoom' => '',
         'Hospitalized' => '',
         'RecordingPersonID' => '',
         'RecorderJobTitleID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossInjuryID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Claim";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lin`.LossInjuryID,
   `clm1`.IncidentReportID AS IncidentReportID,
   NULLIF(CONCAT(IFNULL(`ire1`.IncidentName,'')),'') AS IncidentReport,
   `dat1`.RelatedDate AS EventDate,
   `lin`.RegulatoryRecordable,
   `lin`.PrivacyCase,
   `lin`.Rationale,
   NULLIF(CONCAT(IFNULL(`cod10`.Description,'')),'') AS InjuryIllnessCategory,
   `lin`.InjuryIllnessCategoryID,
   `linc1`.CategoryDesc AS CategoryDesc,
   `lin`.DateofDeath,
   NULLIF(CONCAT(IFNULL(`cod12`.Description,'')),'') AS InjuryIllnessType,
   `lin`.InjuryIllnessTypeID,
   `lint1`.InjuryIllnessTypeDesc AS InjuryIllnessTypeDesc,
   `org3`.Name AS PrimaryTreatingFacility,
   `lin`.PrimaryTreatingFacilityID,
   `ppl4`.DisplayName AS TreatingPhysician,
   `inv3`.PersonInvolvedID AS TreatingPhysicianID,
   `lin`.EmergencyRoom,
   `lin`.Hospitalized,
   `ppl5`.DisplayName AS RecordingPerson,
   `acc2`.PersonAccountableID AS RecordingPersonID,
   `orgjt2`.JobTitleName AS RecorderJobTitle,
   `lin`.RecorderJobTitleID,
   NULLIF(CONCAT(IFNULL(`ppl2`.DisplayName,''),' of ',IFNULL(`org1`.Name,''),' was injured  on ',IFNULL(`dat3`.RelatedDate,'')),' of  was injured  on ') AS RecordLabel,
   `lin`.OrganizationID
FROM `lin`
   
     LEFT OUTER JOIN `clm` AS clm1 
    ON (`lin`.LossInjuryID = `clm1`.RelatedRecordID 
     AND `clm1`.RelatedModuleID = 'lin'
     AND `clm1`._Deleted = 0)
     LEFT OUTER JOIN `linc` AS linc1 
   ON (`lin`.InjuryIllnessCategoryID = `linc1`.InjuryIllnessCategoryID )
     LEFT OUTER JOIN `lint` AS lint1 
   ON (`lin`.InjuryIllnessTypeID = `lint1`.InjuryIllnessTypeID )
     LEFT OUTER JOIN `org` AS org3 
   ON (`lin`.PrimaryTreatingFacilityID = `org3`.OrganizationID )
     LEFT OUTER JOIN `inv` AS inv3 
    ON (`lin`.LossInjuryID = `inv3`.SourceRecordID 
     AND `inv3`.SourceModuleID = 'lin'
     AND `inv3`._Deleted = 0
     AND `inv3`.InvolvementDescriptorID = '84')
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`lin`.LossInjuryID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'lin'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '146')
     LEFT OUTER JOIN `orgjt` AS orgjt2 
   ON (`lin`.RecorderJobTitleID = `orgjt2`.OrgJobTitleID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`lin`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lin'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '44')
     LEFT OUTER JOIN `ire` AS ire1 
   ON (`clm1`.IncidentReportID = `ire1`.IncidentReportID )
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`clm1`.ClaimID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'clm'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '34')
     LEFT OUTER JOIN `cod` AS cod10 
   ON (`linc1`.InjIllCategoryID = `cod10`.CodeID 
     AND `cod10`.CodeTypeID = '168')
     LEFT OUTER JOIN `cod` AS cod12 
   ON (`lint1`.InjIllTypeID = `cod12`.CodeID 
     AND `cod12`.CodeTypeID = '169')
     LEFT OUTER JOIN `ppl` AS ppl4 
   ON (`inv3`.PersonInvolvedID = `ppl4`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl5 
   ON (`acc2`.PersonAccountableID = `ppl5`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ire1`.IncidentReportID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ire'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '16')
WHERE
   lin.LossInjuryID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Injury Loss");
        $screenPhrase = gettext("Recordability|View or edit recordability details associated with an injury and/or illness loss");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Injury Losses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossInjuryID' => gettext("Record ID|An automatically assigned number used to track injuries resulting in loss"),
   'IncidentReportID' => gettext("Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'IncidentReport' => gettext("Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'EventDate' => gettext("Event Date|Date the situation or incident occurred"),
   'RegulatoryRecordable' => gettext("Recordable?|Whether the injury is recordable based on a regulatory requirement"),
   'PrivacyCase' => gettext("Privacy Case?|Whether the injury is a privacy case and should not include the employee name on the record keeping log"),
   'Rationale' => gettext("Rationale|A detailed description of the rationale for identifying this injury as a regulatory recordable injury"),
   'InjuryIllnessCategoryID' => gettext("Injury or Illness Category|Select one of these categories. Categorize the injury by selecting the most serious outcome of the injury"),
   'CategoryDesc' => gettext("Category Description|A brief but thorough description of the injury or illness category"),
   'DateofDeath' => gettext("Date of Death|If person died, the date that death occurred"),
   'InjuryIllnessTypeID' => gettext("Injury or Illness Type|Note whether the case involves an injury or an illness. If more than one type is true of the injury, please select the type of injury or illness having the most pronounced impact on the health of the injured person"),
   'InjuryIllnessTypeDesc' => gettext("Type Description|A brief but thorough description of the specific type of injury or illness type"),
   'PrimaryTreatingFacilityID' => gettext("Treating Facility|The organization providing primary treatment for the injury or illness"),
   'TreatingPhysicianID' => gettext("Treating Physician|The name of the primary treating physician"),
   'EmergencyRoom' => gettext("Emergency Room?|Whether the employee received treatment in an emergency room"),
   'Hospitalized' => gettext("Hospitalized?|Whether the employee was hospitalized overnight"),
   'RecordingPersonID' => gettext("Recording Person|The individual responsible for identifying the injury as recordable and entering the injury on the recordable injury log"),
   'RecorderJobTitleID' => gettext("Recorder Job Title|The job title of the person recording this injury or illness on the OSHA form 301")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['RegulatoryRecordable'], ShortPhrase($phrases['RegulatoryRecordable']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['RegulatoryRecordable']->invalid = TRUE;
            }
$vMsg = Validate($data['PrivacyCase'], ShortPhrase($phrases['PrivacyCase']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PrivacyCase']->invalid = TRUE;
            }
$vMsg = Validate($data['Rationale'], ShortPhrase($phrases['Rationale']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Rationale']->invalid = TRUE;
            }
$vMsg = Validate($data['DateofDeath'], ShortPhrase($phrases['DateofDeath']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['DateofDeath']->invalid = TRUE;
            }
$vMsg = Validate($data['PrimaryTreatingFacilityID'], ShortPhrase($phrases['PrimaryTreatingFacilityID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PrimaryTreatingFacilityID']->invalid = TRUE;
            }
$vMsg = Validate($data['TreatingPhysicianID'], ShortPhrase($phrases['TreatingPhysicianID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TreatingPhysicianID']->invalid = TRUE;
            }
$vMsg = Validate($data['EmergencyRoom'], ShortPhrase($phrases['EmergencyRoom']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EmergencyRoom']->invalid = TRUE;
            }
$vMsg = Validate($data['Hospitalized'], ShortPhrase($phrases['Hospitalized']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Hospitalized']->invalid = TRUE;
            }
$vMsg = Validate($data['RecordingPersonID'], ShortPhrase($phrases['RecordingPersonID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['RecordingPersonID']->invalid = TRUE;
            }
$vMsg = Validate($data['RecorderJobTitleID'], ShortPhrase($phrases['RecorderJobTitleID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['RecorderJobTitleID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Injury Losses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Injury Loss") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an injury and/or illness loss") );
      $tempTabs['IncidentDetails'] = array( "edit.php?scr=IncidentDetails&$tabsQS", gettext("Incident|Edit incident details associated with an injury and/or illness loss") );
      $tempTabs['Injury'] = array( "edit.php?scr=Injury&$tabsQS", gettext("Injuries|Edit injury details associated with an injury and/or illness loss") );
      $tempTabs['Recordability'] = array( "", gettext("Recordability|View or edit recordability details associated with an injury and/or illness loss") );
      $tempTabs['Claim'] = array( "edit.php?scr=Claim&$tabsQS", gettext("Claim|Edit summary information about the injury and/or illness loss") );
      $tempTabs['LossLocation'] = array( "edit.php?scr=LossLocation&$tabsQS", gettext("Location|Edit summary information about the location of the injury and/or illness loss") );
      $tempTabs['LossStatus'] = array( "edit.php?scr=LossStatus&$tabsQS", gettext("Status|Edit summary information about the status of the injury and/or illness loss") );
      $tempTabs['LossLegitimacy'] = array( "edit.php?scr=LossLegitimacy&$tabsQS", gettext("Legitimacy|Edit summary information about the legitimacy of the injury and/or illness loss") );
      $tempTabs['RiskMatrix'] = array( "edit.php?scr=RiskMatrix&$tabsQS", gettext("Risk Matrix|Edit risk matrix values associated with the injury and/or illness loss") );
      $tempTabs['Earnings'] = array( "edit.php?scr=Earnings&$tabsQS", gettext("Earnings|Associate the average earnings of the person involved with the injury and/or illness") );
      $tempTabs['WorkModification'] = array( "edit.php?scr=WorkModification&$tabsQS", gettext("Modifications|Associate work modifications with the injury and/or illness") );
      $tempTabs['EventLog'] = array( "edit.php?scr=EventLog&$tabsQS", gettext("Events|Associate ongoing events with the injury and/or illness") );
      $tempTabs['Documentation'] = array( "edit.php?scr=Documentation&$tabsQS", gettext("Documentation|Track the status of documentation delivery requirements associated with the injury and/or illness") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate agreements with the injury and/or illness") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the injury and/or illness") );
      $tempTabs['Publicity'] = array( "edit.php?scr=Publicity&$tabsQS", gettext("Publicity|Associate publicity with the injury and/or illness") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the injury and/or illness") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the injury and/or illness") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the injury and/or illness") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the injury and/or illness") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the injury and/or illness") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the injury and/or illness") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the injury and/or illness") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Assign organizational level responsibilities to the injury and/or illness") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the injury and/or illness") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the injury and/or illness") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the injury and/or illness") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the injury and/or illness") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View reports on the current injury/illness") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Recordability'] = array( "", gettext("New Injury Loss") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"DateofDeath\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_DateofDeath\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>