<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:23:{s:12:"LossInjuryID";O:9:"viewfield":16:{s:4:"name";s:12:"LossInjuryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Record ID|An automatically assigned number used to track injuries resulting in loss";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:23:"InjuryIllnessCategoryID";O:14:"invisiblefield":11:{s:4:"name";s:23:"InjuryIllnessCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:19:"InjuryIllnessTypeID";O:14:"invisiblefield":11:{s:4:"name";s:19:"InjuryIllnessTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"IncidentReportID";O:9:"viewfield":16:{s:4:"name";s:16:"IncidentReportID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IncidentReport";O:9:"viewfield":16:{s:4:"name";s:14:"IncidentReport";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EventDate";O:9:"viewfield":16:{s:4:"name";s:9:"EventDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Event Date|Date the situation or incident occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"IncurredTime";O:9:"viewfield":16:{s:4:"name";s:12:"IncurredTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Incurred Date|Date the injury occurred or the first day the illness was noticed";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Organization|The organization responsible for the location where this injury occurred";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Location|Specific location within the facility where the injury or illness  occurred";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"InjuredPerson";O:9:"viewfield":16:{s:4:"name";s:13:"InjuredPerson";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:52:"Injured Person|The name of the injured or ill person";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"JobTitle";O:9:"viewfield":16:{s:4:"name";s:8:"JobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Job Title|The job title of the person injured at the time of this claim of injury";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"DaysAway";O:9:"viewfield":16:{s:4:"name";s:8:"DaysAway";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:145:"Days Away|An automatic calculation of the total number of days the injured or ill person was away from work as a result of this injury or illness";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"DaysModified";O:9:"viewfield":16:{s:4:"name";s:12:"DaysModified";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:159:"Days Modified|An automatic calculation of the total number of days the injured or ill person was performing modified work as a result of this injury or illness";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:15:"CachedTotalCost";O:9:"viewfield":16:{s:4:"name";s:15:"CachedTotalCost";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:42:"Total Cost|The total cost of this incident";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"ClaimDate";O:9:"datefield":15:{s:4:"name";s:9:"ClaimDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"ReportDate";O:9:"datefield":15:{s:4:"name";s:10:"ReportDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"PersonReportingID";O:16:"personcombofield":29:{s:4:"name";s:17:"PersonReportingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"PersonReportingID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"InsuranceCategoryID";O:14:"codecombofield":27:{s:4:"name";s:19:"InsuranceCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'3\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:140:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'3\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"InsuranceTypeID";a:2:{s:4:"name";s:15:"InsuranceTypeID";s:15:"listParentField";s:19:"InsuranceCategoryID";}}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"3";}s:15:"InsuranceTypeID";O:10:"combofield":26:{s:4:"name";s:15:"InsuranceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"inst";s:10:"foreignKey";s:15:"InsuranceTypeID";s:12:"foreignField";s:13:"InsuranceType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:197:"SELECT 
`inst`.InsuranceTypeID AS ID, NULLIF(CONCAT(IFNULL(`inst`.InsuranceTypeTitle,\'\')),\'\') AS Name, `inst`.InsuranceCategoryID AS ParentID FROM `inst`
WHERE inst._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:200:"SELECT 
`inst`.InsuranceTypeID AS ID, NULLIF(CONCAT(IFNULL(`inst`.InsuranceTypeTitle,\'\')),\'\') AS Name, `inst`.InsuranceCategoryID AS ParentID FROM `inst`

WHERE `inst`.InsuranceTypeID = \'/*recordID*/\'";s:11:"parentField";s:19:"InsuranceCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:8:"PolicyID";a:1:{s:4:"name";s:8:"PolicyID";}}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:8:"PolicyID";O:10:"combofield":26:{s:4:"name";s:8:"PolicyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"ins";s:10:"foreignKey";s:8:"PolicyID";s:12:"foreignField";s:6:"Policy";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:294:"SELECT 
`ins`.PolicyID AS ID, NULLIF(CONCAT(IFNULL(`org1`.Name,\'\'),\' | \',IFNULL(`ins`.PolicyNumber,\'\')),\' | \') AS Name, `ins`.InsuranceTypeID AS ParentID FROM `ins`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`ins`.CarrierNameID = `org1`.OrganizationID )
WHERE ins._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:290:"SELECT 
`ins`.PolicyID AS ID, NULLIF(CONCAT(IFNULL(`org1`.Name,\'\'),\' | \',IFNULL(`ins`.PolicyNumber,\'\')),\' | \') AS Name, `ins`.InsuranceTypeID AS ParentID FROM `ins`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`ins`.CarrierNameID = `org1`.OrganizationID )

WHERE `ins`.PolicyID = \'/*recordID*/\'";s:11:"parentField";s:15:"InsuranceTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"IntegrationKey";a:1:{s:4:"name";s:14:"IntegrationKey";}}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ins`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"IntegrationKey";O:9:"viewfield":16:{s:4:"name";s:14:"IntegrationKey";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:179:"Integration Key|An alpha, numeric, or alphanumeric value assigned by the claims administration company to enable data sharing between the claims administrator and the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:8:"PolicyID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"ClaimNumber";O:9:"editfield":14:{s:4:"name";s:11:"ClaimNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:16:"ClaimsAdjusterID";O:16:"personcombofield":29:{s:4:"name";s:16:"ClaimsAdjusterID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:20:"ClaimsAdjusterID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Injury Loss");

//field value array
$data = array(
        'LossInjuryID' => '',
         'InjuryIllnessCategoryID' => '',
         'InjuryIllnessTypeID' => '',
         'IncidentReportID' => '',
         'IncidentReport' => '',
         'EventDate' => '',
         'IncurredTime' => '',
         'Organization' => '',
         'Location' => '',
         'InjuredPerson' => '',
         'JobTitle' => '',
         'DaysAway' => '',
         'DaysModified' => '',
         'CachedTotalCost' => '',
         'ClaimDate' => '',
         'ReportDate' => '',
         'PersonReportingID' => '',
         'InsuranceCategoryID' => '',
         'InsuranceTypeID' => '',
         'PolicyID' => '',
         'IntegrationKey' => '',
         'ClaimNumber' => '',
         'ClaimsAdjusterID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossInjuryID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "LossLocation";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lin`.LossInjuryID,
   `lin`.InjuryIllnessCategoryID,
   `lin`.InjuryIllnessTypeID,
   `clm1`.IncidentReportID AS IncidentReportID,
   NULLIF(CONCAT(IFNULL(`ire1`.IncidentName,'')),'') AS IncidentReport,
   `dat1`.RelatedDate AS EventDate,
   `dat3`.RelatedDate AS IncurredTime,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `ppl2`.DisplayName AS InjuredPerson,
   `orgjt1`.JobTitleName AS JobTitle,
   `linm1`.DaysAway AS DaysAway,
   `linm2`.DaysModified AS DaysModified,
   ROUND(`csc1`.TotalCost, 2) AS CachedTotalCost,
   `dat7`.RelatedDate AS ClaimDate,
   `dat6`.RelatedDate AS ReportDate,
   `ppl6`.DisplayName AS PersonReporting,
   `inv4`.PersonInvolvedID AS PersonReportingID,
   `cod14`.Description AS InsuranceCategory,
   `inst1`.InsuranceCategoryID AS InsuranceCategoryID,
   NULLIF(CONCAT(IFNULL(`inst1`.InsuranceTypeTitle,'')),'') AS InsuranceType,
   `ins1`.InsuranceTypeID AS InsuranceTypeID,
   NULLIF(CONCAT(IFNULL(`org4`.Name,''),' | ',IFNULL(`ins1`.PolicyNumber,'')),' | ') AS Policy,
   `clm1`.PolicyID AS PolicyID,
   `ins1`.IntegrationKey AS IntegrationKey,
   `clm1`.ClaimNumber AS ClaimNumber,
   `ppl8`.DisplayName AS ClaimsAdjuster,
   `acc3`.PersonAccountableID AS ClaimsAdjusterID,
   NULLIF(CONCAT(IFNULL(`ppl2`.DisplayName,''),' of ',IFNULL(`org1`.Name,''),' was injured  on ',IFNULL(`dat3`.RelatedDate,'')),' of  was injured  on ') AS RecordLabel,
   `lin`.OrganizationID
FROM `lin`
   
     LEFT OUTER JOIN `clm` AS clm1 
    ON (`lin`.LossInjuryID = `clm1`.RelatedRecordID 
     AND `clm1`.RelatedModuleID = 'lin'
     AND `clm1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`lin`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lin'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '44')
     LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`lin`.JobTitleID = `orgjt1`.OrgJobTitleID )
     LEFT OUTER JOIN (SELECT 
SUM(IFNULL(DATEDIFF(`dat1`.RelatedDate, `dat2`.RelatedDate) + 1,0) - IFNULL(`linm`.DaysNotScheduled,0)) AS DaysAway,
`linm`.LossInjuryID FROM `linm` 

LEFT OUTER JOIN `dat` AS dat2 
    ON (`linm`.WorkModificationID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'linm'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '28')
LEFT OUTER JOIN `dat` AS dat1 
    ON (`linm`.WorkModificationID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'linm'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '36')
 WHERE `linm`._Deleted = 0 
 AND ModificationTypeID = 1 
GROUP BY `linm`.LossInjuryID 
) AS linm1 
ON (`lin`.LossInjuryID = linm1.LossInjuryID) 
     LEFT OUTER JOIN (SELECT 
SUM(IFNULL(DATEDIFF(`dat1`.RelatedDate, `dat2`.RelatedDate) + 1,0) - IFNULL(`linm`.DaysNotScheduled,0)) AS DaysModified,
`linm`.LossInjuryID FROM `linm` 

LEFT OUTER JOIN `dat` AS dat2 
    ON (`linm`.WorkModificationID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'linm'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '28')
LEFT OUTER JOIN `dat` AS dat1 
    ON (`linm`.WorkModificationID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'linm'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '36')
 WHERE `linm`._Deleted = 0 
 AND ModificationTypeID = 2 
GROUP BY `linm`.LossInjuryID 
) AS linm2 
ON (`lin`.LossInjuryID = linm2.LossInjuryID) 
     LEFT OUTER JOIN `csc` AS csc1 
    ON (`lin`.LossInjuryID = `csc1`.RecordID 
     AND `csc1`.ModuleID = 'lin'
     AND `csc1`._Deleted = 0)
     LEFT OUTER JOIN `ire` AS ire1 
   ON (`clm1`.IncidentReportID = `ire1`.IncidentReportID )
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`clm1`.ClaimID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'clm'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '34')
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`clm1`.ClaimID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'clm'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `dat` AS dat7 
    ON (`clm1`.ClaimID = `dat7`.SourceRecordID 
     AND `dat7`.SourceModuleID = 'clm'
     AND `dat7`._Deleted = 0
     AND `dat7`.DateDescriptorID = '35')
     LEFT OUTER JOIN `dat` AS dat6 
    ON (`clm1`.ClaimID = `dat6`.SourceRecordID 
     AND `dat6`.SourceModuleID = 'clm'
     AND `dat6`._Deleted = 0
     AND `dat6`.DateDescriptorID = '32')
     LEFT OUTER JOIN `inv` AS inv4 
    ON (`clm1`.ClaimID = `inv4`.SourceRecordID 
     AND `inv4`.SourceModuleID = 'clm'
     AND `inv4`._Deleted = 0
     AND `inv4`.InvolvementDescriptorID = '53')
     LEFT OUTER JOIN `ppl` AS ppl6 
   ON (`inv4`.PersonInvolvedID = `ppl6`.PersonID )
     LEFT OUTER JOIN `ins` AS ins1 
   ON (`clm1`.PolicyID = `ins1`.PolicyID )
     LEFT OUTER JOIN `acc` AS acc3 
    ON (`clm1`.ClaimID = `acc3`.SourceRecordID 
     AND `acc3`.SourceModuleID = 'clm'
     AND `acc3`._Deleted = 0
     AND `acc3`.AccountabilityDescriptorID = '179')
     LEFT OUTER JOIN `ppl` AS ppl8 
   ON (`acc3`.PersonAccountableID = `ppl8`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ire1`.IncidentReportID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ire'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '16')
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `inst` AS inst1 
   ON (`ins1`.InsuranceTypeID = `inst1`.InsuranceTypeID )
     LEFT OUTER JOIN `org` AS org4 
   ON (`ins1`.CarrierNameID = `org4`.OrganizationID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
     LEFT OUTER JOIN `cod` AS cod14 
   ON (`inst1`.InsuranceCategoryID = `cod14`.CodeID 
     AND `cod14`.CodeTypeID = '3')
WHERE
   lin.LossInjuryID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Injury Loss");
        $screenPhrase = gettext("Claim|Edit summary information about the injury and/or illness loss");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Injury Losses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossInjuryID' => gettext("Record ID|An automatically assigned number used to track injuries resulting in loss"),
   'InjuryIllnessCategoryID' => gettext("Injury or Illness Category|Select one of these categories. Categorize the injury by selecting the most serious outcome of the injury"),
   'InjuryIllnessTypeID' => gettext("Injury or Illness Type|Note whether the case involves an injury or an illness. If more than one type is true of the injury, please select the type of injury or illness having the most pronounced impact on the health of the injured person"),
   'IncidentReportID' => gettext("Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'IncidentReport' => gettext("Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'EventDate' => gettext("Event Date|Date the situation or incident occurred"),
   'IncurredTime' => gettext("Incurred Date|Date the injury occurred or the first day the illness was noticed"),
   'Organization' => gettext("Organization|The organization responsible for the location where this injury occurred"),
   'Location' => gettext("Location|Specific location within the facility where the injury or illness  occurred"),
   'InjuredPerson' => gettext("Injured Person|The name of the injured or ill person"),
   'JobTitle' => gettext("Job Title|The job title of the person injured at the time of this claim of injury"),
   'DaysAway' => gettext("Days Away|An automatic calculation of the total number of days the injured or ill person was away from work as a result of this injury or illness"),
   'DaysModified' => gettext("Days Modified|An automatic calculation of the total number of days the injured or ill person was performing modified work as a result of this injury or illness"),
   'CachedTotalCost' => gettext("Total Cost|The total cost of this incident"),
   'ClaimDate' => gettext("Claim Date|Date the claim was officially submitted to an insurance carrier or third party administrator"),
   'ReportDate' => gettext("Report Date|Date the loss was reported"),
   'PersonReportingID' => gettext("Person Reporting|The name of the individual that reported the injury loss"),
   'InsuranceCategoryID' => gettext("Insurance Category|A short but descriptive phrase used to group similar insurances"),
   'InsuranceTypeID' => gettext("Policy Type|The type of insurance policy associated with the related record"),
   'PolicyID' => gettext("Policy|A description of the insurance policy based on a combination of field values assigned from within the Insurance Policies module"),
   'IntegrationKey' => gettext("Integration Key|An alpha, numeric, or alphanumeric value assigned by the claims administration company to enable data sharing between the claims administrator and the organization"),
   'ClaimNumber' => gettext("Claim Number|A unique number assigned by an insurance company or third party administrator responsible for managing the claim"),
   'ClaimsAdjusterID' => gettext("Claims Adjuster|The individual assigned primary accountability for adjusting this claim and mitigating the associated loss")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['PolicyID'], ShortPhrase($phrases['PolicyID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PolicyID']->invalid = TRUE;
            }
$vMsg = Validate($data['ClaimNumber'], ShortPhrase($phrases['ClaimNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ClaimNumber']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Injury Losses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Injury Loss") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an injury and/or illness loss") );
      $tempTabs['IncidentDetails'] = array( "edit.php?scr=IncidentDetails&$tabsQS", gettext("Incident|Edit incident details associated with an injury and/or illness loss") );
      $tempTabs['Injury'] = array( "edit.php?scr=Injury&$tabsQS", gettext("Injuries|Edit injury details associated with an injury and/or illness loss") );
      $tempTabs['Recordability'] = array( "edit.php?scr=Recordability&$tabsQS", gettext("Recordability|View or edit recordability details associated with an injury and/or illness loss") );
      $tempTabs['Claim'] = array( "", gettext("Claim|Edit summary information about the injury and/or illness loss") );
      $tempTabs['LossLocation'] = array( "edit.php?scr=LossLocation&$tabsQS", gettext("Location|Edit summary information about the location of the injury and/or illness loss") );
      $tempTabs['LossStatus'] = array( "edit.php?scr=LossStatus&$tabsQS", gettext("Status|Edit summary information about the status of the injury and/or illness loss") );
      $tempTabs['LossLegitimacy'] = array( "edit.php?scr=LossLegitimacy&$tabsQS", gettext("Legitimacy|Edit summary information about the legitimacy of the injury and/or illness loss") );
      $tempTabs['RiskMatrix'] = array( "edit.php?scr=RiskMatrix&$tabsQS", gettext("Risk Matrix|Edit risk matrix values associated with the injury and/or illness loss") );
      $tempTabs['Earnings'] = array( "edit.php?scr=Earnings&$tabsQS", gettext("Earnings|Associate the average earnings of the person involved with the injury and/or illness") );
      $tempTabs['WorkModification'] = array( "edit.php?scr=WorkModification&$tabsQS", gettext("Modifications|Associate work modifications with the injury and/or illness") );
      $tempTabs['EventLog'] = array( "edit.php?scr=EventLog&$tabsQS", gettext("Events|Associate ongoing events with the injury and/or illness") );
      $tempTabs['Documentation'] = array( "edit.php?scr=Documentation&$tabsQS", gettext("Documentation|Track the status of documentation delivery requirements associated with the injury and/or illness") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate agreements with the injury and/or illness") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the injury and/or illness") );
      $tempTabs['Publicity'] = array( "edit.php?scr=Publicity&$tabsQS", gettext("Publicity|Associate publicity with the injury and/or illness") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the injury and/or illness") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the injury and/or illness") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the injury and/or illness") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the injury and/or illness") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the injury and/or illness") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the injury and/or illness") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the injury and/or illness") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Assign organizational level responsibilities to the injury and/or illness") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the injury and/or illness") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the injury and/or illness") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the injury and/or illness") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the injury and/or illness") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View reports on the current injury/illness") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Claim'] = array( "", gettext("New Injury Loss") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ClaimDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ClaimDate\"
});
Calendar.setup({
   inputField : \"ReportDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ReportDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>