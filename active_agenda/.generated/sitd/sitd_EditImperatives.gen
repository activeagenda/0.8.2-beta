<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:15:{s:16:"SituationDrillID";O:9:"viewfield":16:{s:4:"name";s:16:"SituationDrillID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Record ID|An automatically assigned number used to track contacts assigned to the occurrence of situations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Organization|The name of the organization participating in the situation drill";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"SituationCategory";O:9:"viewfield":16:{s:4:"name";s:17:"SituationCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Situation Category|A broadly defined title used to group similar situation types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"SituationType";O:9:"viewfield":16:{s:4:"name";s:13:"SituationType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Situation Type|The type of situation being assessed during the drill";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Situation";O:9:"viewfield":16:{s:4:"name";s:9:"Situation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Situation|The situation being assessed by the drill";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"LocalDescription";O:9:"viewfield":16:{s:4:"name";s:16:"LocalDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Description|An detailed description of the situation type associated with the drill";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"DrillTitle";O:9:"viewfield":16:{s:4:"name";s:10:"DrillTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Title|A concise title that describes the situation response drill";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"BeginTime";O:9:"viewfield":16:{s:4:"name";s:9:"BeginTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Begin Date|The date and time the situation response drill is scheduled to begin or began";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"EndTime";O:9:"viewfield":16:{s:4:"name";s:7:"EndTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"End Date|The date and time the situation response drill is scheduled to end or ended";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Person Accountable|The name of the person responsible for coordinating the situation response drill";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"DrillScope";O:9:"viewfield":16:{s:4:"name";s:10:"DrillScope";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Scope|A description of the scope of the situation response drill";s:8:"dataType";s:12:"varchar(255)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"DrillObjective";O:9:"viewfield":16:{s:4:"name";s:14:"DrillObjective";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Objective|A description of the situation response drill objective";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DrillPlanning";O:9:"viewfield":16:{s:4:"name";s:13:"DrillPlanning";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Planning|A description of the planning steps, and actions taken to simulate the situation";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"KeyLearning";O:9:"viewfield":16:{s:4:"name";s:11:"KeyLearning";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:132:"Key Learning|A detailed description of key learning that should be incorporated into the organization\'s situation response readiness";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"DrillStatus";O:9:"viewfield":16:{s:4:"name";s:11:"DrillStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Drill Status|The status of the drill regarding the incorporation of key learning";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Situation Drill");

//field value array
$data = array(
        'SituationDrillID' => '',
         'Organization' => '',
         'SituationCategory' => '',
         'SituationType' => '',
         'Situation' => '',
         'LocalDescription' => '',
         'DrillTitle' => '',
         'BeginTime' => '',
         'EndTime' => '',
         'PersonAccountable' => '',
         'DrillScope' => '',
         'DrillObjective' => '',
         'DrillPlanning' => '',
         'KeyLearning' => '',
         'DrillStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:466:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskImperativeID,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:9:"getRowSQL";s:439:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"RiskImperativeID";O:14:"coderadiofield":29:{s:4:"name";s:16:"RiskImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'234\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'234\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"rsk";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"RiskDescription";O:9:"memofield":15:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:12:"ImperativeID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"rsk";s:6:"phrase";s:16:"Risk Imperatives";s:6:"number";i:1;s:6:"Fields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"RiskImperative";O:9:"viewfield":16:{s:4:"name";s:14:"RiskImperative";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskDescription";O:9:"viewfield":16:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:143:"SELECT 
    count(*) 
FROM `rsk`
   
WHERE rsk._Deleted = 0
   AND `rsk`.RelatedModuleID = \'sitd\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:488:"SELECT 
   `rsk`.ImperativeID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`cod1`.Description AS RiskImperative,
`rsk`.RiskDescription
FROM `rsk`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
WHERE rsk._Deleted = 0
AND `rsk`.RelatedModuleID = \'sitd\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:16:"SituationDrillID";s:8:"PKFields";a:1:{i:0;s:12:"ImperativeID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:4:"sitd";}}');


    /**guidanceGrid**/

    $PKField = 'SituationDrillID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "FileRetention";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `sitd`.SituationDrillID,
   `org1`.Name AS Organization,
   `cod1`.Description AS SituationCategory,
   NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,'')),'') AS SituationType,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt2`.SituationTitle,'')),''),'')),'') AS Situation,
   `sit1`.LocalDescription AS LocalDescription,
   `sitd`.DrillTitle,
   `dat1`.RelatedDate AS BeginTime,
   `sitd`.EndTime,
   NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' - ',IFNULL(`org2`.ShortName,'')),' - ') AS PersonAccountable,
   `sitd`.DrillScope,
   `sitd`.DrillObjective,
   `sitd`.DrillPlanning,
   `sitd`.KeyLearning,
   `cod2`.Description AS DrillStatus,
   NULLIF(CONCAT(IFNULL(`sitd`.DrillTitle,''),' | ',IFNULL(`dat1`.RelatedDate,''),' | ',IFNULL(`cod2`.Description,'')),' |  | ') AS RecordLabel,
   `sit1`.OrganizationID AS OrganizationID
FROM `sitd`
   
     LEFT OUTER JOIN `sit` AS sit1 
   ON (`sitd`.SituationID = `sit1`.SituationID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`sitd`.SituationDrillID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'sitd'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '24')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`sitd`.SituationDrillID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'sitd'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '79')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`sitd`.DrillStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '277')
     LEFT OUTER JOIN `org` AS org1 
   ON (`sit1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit1`.SituationTypeID = `sitt1`.SituationTypeID )
     LEFT OUTER JOIN `sitt` AS sitt2 
   ON (`sit1`.SituationTypeID = `sitt2`.SituationTypeID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`sitt1`.SituationCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '26')
     LEFT OUTER JOIN `org` AS org2 
   ON (`ppl1`.OrganizationID = `org2`.OrganizationID )
WHERE
   sitd.SituationDrillID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Situation Drill");
        $screenPhrase = gettext("Imperatives|Associate risk imperatives with the meeting");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Situation Drills");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'SituationDrillID' => gettext("Record ID|An automatically assigned number used to track contacts assigned to the occurrence of situations"),
   'Organization' => gettext("Organization|The name of the organization participating in the situation drill"),
   'SituationCategory' => gettext("Situation Category|A broadly defined title used to group similar situation types"),
   'SituationType' => gettext("Situation Type|The type of situation being assessed during the drill"),
   'Situation' => gettext("Situation|The situation being assessed by the drill"),
   'LocalDescription' => gettext("Description|An detailed description of the situation type associated with the drill"),
   'DrillTitle' => gettext("Title|A concise title that describes the situation response drill"),
   'BeginTime' => gettext("Begin Date|The date and time the situation response drill is scheduled to begin or began"),
   'EndTime' => gettext("End Date|The date and time the situation response drill is scheduled to end or ended"),
   'PersonAccountable' => gettext("Person Accountable|The name of the person responsible for coordinating the situation response drill"),
   'DrillScope' => gettext("Scope|A description of the scope of the situation response drill"),
   'DrillObjective' => gettext("Objective|A description of the situation response drill objective"),
   'DrillPlanning' => gettext("Planning|A description of the planning steps, and actions taken to simulate the situation"),
   'KeyLearning' => gettext("Key Learning|A detailed description of key learning that should be incorporated into the organization's situation response readiness"),
   'DrillStatus' => gettext("Drill Status|The status of the drill regarding the incorporation of key learning")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Situation Drill"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Situation Drill") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the situation contact") );
      $tempTabs['Participants'] = array( "edit.php?scr=Participants&$tabsQS", gettext("Participants|Associate participants with a situation drill") );
      $tempTabs['Participation'] = array( "edit.php?scr=Participation&$tabsQS", gettext("Participation|Associate details of participation and involvement with the drill") );
      $tempTabs['Imperatives'] = array( "", gettext("Imperatives|Associate risk imperatives with the meeting") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the meeting") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participant accountabilities with the meeting") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participant involvement with the meeting") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the meeting") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Imperatives'] = array( "", gettext("New Situation Drill") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>