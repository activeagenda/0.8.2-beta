<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:22:{s:14:"LossProdServID";O:9:"viewfield":16:{s:4:"name";s:14:"LossProdServID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:104:"Record ID|An automatically assigned number used to track losses associated with products and/or services";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"IncidentReportID";O:9:"viewfield":16:{s:4:"name";s:16:"IncidentReportID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IncidentReport";O:9:"viewfield":16:{s:4:"name";s:14:"IncidentReport";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EventDate";O:9:"viewfield":16:{s:4:"name";s:9:"EventDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Event Date|Date the situation or incident occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"IncurredTime";O:9:"viewfield":16:{s:4:"name";s:12:"IncurredTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:59:"Incurred Date|Date the product or service loss was incurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:248:"Organization|The organization which produces the product and/or service which may have caused the loss. Also the organization accountable for the mitigation of this loss and control of future losses from the same or similar products and/or services";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"LossProdServDesc";O:9:"viewfield":16:{s:4:"name";s:16:"LossProdServDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Description|A detailed description of the product and/or service loss";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"Likelihood";O:9:"viewfield":16:{s:4:"name";s:10:"Likelihood";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:140:"Risk Likelihood|A description of the risk likelihood based on a combination of field values assigned from within the Risk Likelihoods module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Severity";O:9:"viewfield":16:{s:4:"name";s:8:"Severity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:135:"Risk Severity|A description of the risk severity based on a combination of field values assigned from within the Risk Severities module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"RiskRecommendation";O:9:"viewfield":16:{s:4:"name";s:18:"RiskRecommendation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Recommended Action|An automatically assigned recommendation, based on the values assigned for Likelihood and Severity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"OnCoPropID";O:14:"coderadiofield":29:{s:4:"name";s:10:"OnCoPropID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'8\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:140:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'8\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"LocationID";a:1:{s:4:"name";s:10:"LocationID";}}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:10:"LocationID";O:10:"combofield":26:{s:4:"name";s:10:"LocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"orgl";s:10:"foreignKey";s:10:"LocationID";s:12:"foreignField";s:8:"Location";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:371:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE orgl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:369:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )

WHERE `orgl`.LocationID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`orgl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:19:"LocalClaimManagerID";O:16:"personcombofield":29:{s:4:"name";s:19:"LocalClaimManagerID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"LocalClaimManagerID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:20:"IncurredLocationDesc";O:9:"memofield":15:{s:4:"name";s:20:"IncurredLocationDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"IncurredAddress1";O:9:"editfield":14:{s:4:"name";s:16:"IncurredAddress1";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:16:"IncurredAddress2";O:9:"editfield":14:{s:4:"name";s:16:"IncurredAddress2";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:17:"IncurredCountryID";O:10:"combofield":26:{s:4:"name";s:17:"IncurredCountryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"ctr";s:10:"foreignKey";s:9:"CountryID";s:12:"foreignField";s:11:"CountryName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:110:"SELECT 
`ctr`.CountryID AS ID, `ctr`.CountryName AS Name FROM `ctr`
WHERE ctr._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:107:"SELECT 
`ctr`.CountryID AS ID, `ctr`.CountryName AS Name FROM `ctr`

WHERE `ctr`.CountryID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"IncurredStateID";a:1:{s:4:"name";s:15:"IncurredStateID";}}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:15:"IncurredStateID";O:10:"combofield":26:{s:4:"name";s:15:"IncurredStateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"sta";s:10:"foreignKey";s:7:"StateID";s:12:"foreignField";s:9:"StateName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:135:"SELECT 
`sta`.StateID AS ID, `sta`.StateName AS Name, `sta`.CountryID AS ParentID FROM `sta`
WHERE sta._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:130:"SELECT 
`sta`.StateID AS ID, `sta`.StateName AS Name, `sta`.CountryID AS ParentID FROM `sta`

WHERE `sta`.StateID = \'/*recordID*/\'";s:11:"parentField";s:17:"IncurredCountryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"IncurredCountyID";a:1:{s:4:"name";s:16:"IncurredCountyID";}}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:16:"IncurredCountyID";O:10:"combofield":26:{s:4:"name";s:16:"IncurredCountyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cti";s:10:"foreignKey";s:8:"CountyID";s:12:"foreignField";s:10:"CountyName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:135:"SELECT 
`cti`.CountyID AS ID, `cti`.CountyName AS Name, `cti`.StateID AS ParentID FROM `cti`
WHERE cti._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:131:"SELECT 
`cti`.CountyID AS ID, `cti`.CountyName AS Name, `cti`.StateID AS ParentID FROM `cti`

WHERE `cti`.CountyID = \'/*recordID*/\'";s:11:"parentField";s:15:"IncurredStateID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"lpd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:12:"IncurredCity";O:9:"editfield":14:{s:4:"name";s:12:"IncurredCity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:18:"IncurredPostalCode";O:9:"editfield":14:{s:4:"name";s:18:"IncurredPostalCode";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"30";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Product or Service Loss");

//field value array
$data = array(
        'LossProdServID' => '',
         'IncidentReportID' => '',
         'IncidentReport' => '',
         'EventDate' => '',
         'IncurredTime' => '',
         'Organization' => '',
         'LossProdServDesc' => '',
         'Likelihood' => '',
         'Severity' => '',
         'RiskRecommendation' => '',
         'OnCoPropID' => '',
         'OrganizationID' => '',
         'LocationID' => '',
         'LocalClaimManagerID' => '',
         'IncurredLocationDesc' => '',
         'IncurredAddress1' => '',
         'IncurredAddress2' => '',
         'IncurredCountryID' => '',
         'IncurredStateID' => '',
         'IncurredCountyID' => '',
         'IncurredCity' => '',
         'IncurredPostalCode' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossProdServID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "LossStatus";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lpd`.LossProdServID,
   `clm1`.IncidentReportID AS IncidentReportID,
   NULLIF(CONCAT(IFNULL(`ire1`.IncidentName,'')),'') AS IncidentReport,
   `dat1`.RelatedDate AS EventDate,
   `dat5`.RelatedDate AS IncurredTime,
   `org1`.Name AS Organization,
   `lpd`.LossProdServDesc,
   NULLIF(CONCAT(IFNULL(`rskl1`.LikelihoodValue,''),' - ',IFNULL(`rskl1`.RiskLikelihoodTerm,''),': ',IFNULL(`rskl1`.RiskLikelihood,'')),' - : ') AS Likelihood,
   NULLIF(CONCAT(IFNULL(`rsks2`.SeverityValue,''),' - ',IFNULL(`rsks2`.RiskSeverityTerm,''),': Loss cost of ',IFNULL(ROUND(`rsks2`.SeverityLowCost, 2),''),' to ',IFNULL(ROUND(`rsks2`.SeverityHighCost, 2),'')),' - : Loss cost of  to ') AS Severity,
   (SELECT RiskRecommendation
FROM rskx
WHERE `rskx`.IndexValue <= IFNULL(`rskl1`.LikelihoodValue,0) * IFNULL(IF(`csc1`.SeverityValue > `rsks2`.SeverityValue, `csc1`.SeverityValue, `rsks2`.SeverityValue),0)
ORDER BY `rskx`.IndexValue DESC
LIMIT 1) AS RiskRecommendation,
   `cod5`.Description AS OnCoProp,
   `clm1`.OnCoPropID AS OnCoPropID,
   `lpd`.OrganizationID,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `orgla1`.LocationID AS LocationID,
   `ppl6`.DisplayName AS LocalClaimManager,
   `acc3`.PersonAccountableID AS LocalClaimManagerID,
   `clm1`.IncurredLocationDesc AS IncurredLocationDesc,
   `clm1`.IncurredAddress1 AS IncurredAddress1,
   `clm1`.IncurredAddress2 AS IncurredAddress2,
   `ctr1`.CountryName AS IncurredCountry,
   `sta1`.CountryID AS IncurredCountryID,
   `sta1`.StateName AS IncurredState,
   `cti1`.StateID AS IncurredStateID,
   `cti1`.CountyName AS IncurredCounty,
   `clm1`.IncurredCountyID AS IncurredCountyID,
   `clm1`.IncurredCity AS IncurredCity,
   `clm1`.IncurredPostalCode AS IncurredPostalCode,
   NULLIF(CONCAT(IFNULL(`ppl2`.DisplayName,''),' submitting a complaint on ',IFNULL(`dat5`.RelatedDate,'')),' submitting a complaint on ') AS RecordLabel
FROM `lpd`
   
     LEFT OUTER JOIN `clm` AS clm1 
    ON (`lpd`.LossProdServID = `clm1`.RelatedRecordID 
     AND `clm1`.RelatedModuleID = 'lpd'
     AND `clm1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`lpd`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `rskxa` AS rskxa1 
    ON (`lpd`.LossProdServID = `rskxa1`.SourceRecordID 
     AND `rskxa1`.SourceModuleID = 'lpd'
     AND `rskxa1`._Deleted = 0)
     LEFT OUTER JOIN `csc` AS csc1 
    ON (`lpd`.LossProdServID = `csc1`.RecordID 
     AND `csc1`.ModuleID = 'lpd'
     AND `csc1`._Deleted = 0)
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lpd`.LossProdServID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lpd'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '52')
     LEFT OUTER JOIN `ire` AS ire1 
   ON (`clm1`.IncidentReportID = `ire1`.IncidentReportID )
     LEFT OUTER JOIN `dat` AS dat5 
    ON (`clm1`.ClaimID = `dat5`.SourceRecordID 
     AND `dat5`.SourceModuleID = 'clm'
     AND `dat5`._Deleted = 0
     AND `dat5`.DateDescriptorID = '34')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`clm1`.OnCoPropID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '8')
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`clm1`.ClaimID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'clm'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `acc` AS acc3 
    ON (`clm1`.ClaimID = `acc3`.SourceRecordID 
     AND `acc3`.SourceModuleID = 'clm'
     AND `acc3`._Deleted = 0
     AND `acc3`.AccountabilityDescriptorID = '178')
     LEFT OUTER JOIN `ppl` AS ppl6 
   ON (`acc3`.PersonAccountableID = `ppl6`.PersonID )
     LEFT OUTER JOIN `cti` AS cti1 
   ON (`clm1`.IncurredCountyID = `cti1`.CountyID )
     LEFT OUTER JOIN `rskl` AS rskl1 
   ON (`rskxa1`.LikelihoodID = `rskl1`.LikelihoodID )
     LEFT OUTER JOIN `rsks` AS rsks2 
   ON (`rskxa1`.SeverityID = `rsks2`.SeverityID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ire1`.IncidentReportID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ire'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '16')
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `sta` AS sta1 
   ON (`cti1`.StateID = `sta1`.StateID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
     LEFT OUTER JOIN `ctr` AS ctr1 
   ON (`sta1`.CountryID = `ctr1`.CountryID )
WHERE
   lpd.LossProdServID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Product or Service Loss");
        $screenPhrase = gettext("Location|Edit summary information about the location of the product and/or service loss");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Product or Service Loss");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossProdServID' => gettext("Record ID|An automatically assigned number used to track losses associated with products and/or services"),
   'IncidentReportID' => gettext("Incident Report|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'IncidentReport' => gettext("Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'EventDate' => gettext("Event Date|Date the situation or incident occurred"),
   'IncurredTime' => gettext("Incurred Date|Date the product or service loss was incurred"),
   'Organization' => gettext("Organization|The organization which produces the product and/or service which may have caused the loss. Also the organization accountable for the mitigation of this loss and control of future losses from the same or similar products and/or services"),
   'LossProdServDesc' => gettext("Description|A detailed description of the product and/or service loss"),
   'Likelihood' => gettext("Risk Likelihood|A description of the risk likelihood based on a combination of field values assigned from within the Risk Likelihoods module"),
   'Severity' => gettext("Risk Severity|A description of the risk severity based on a combination of field values assigned from within the Risk Severities module"),
   'RiskRecommendation' => gettext("Recommended Action|An automatically assigned recommendation, based on the values assigned for Likelihood and Severity"),
   'OnCoPropID' => gettext("On Company Property|This box should be checked if the loss occurred on company property"),
   'OrganizationID' => gettext("Organization|The organization which produces the product and/or service which may have caused the loss. Also the organization accountable for the mitigation of this loss and control of future losses from the same or similar products and/or services"),
   'LocationID' => gettext("Location|Specific location within the facility where the product or service loss occurred"),
   'LocalClaimManagerID' => gettext("Local Claim Manager|The individual assigned primary accountability for managing this claim and mitigating the associated loss"),
   'IncurredLocationDesc' => gettext("Location Description|A detailed description of the location where the loss occurred"),
   'IncurredAddress1' => gettext("Incurred Address|First physical street address of the location where the product or service loss occurred"),
   'IncurredAddress2' => gettext("Incurred Address|Second physical street address of the location where the product or service loss occurred; such as, suite number or p.o. box"),
   'IncurredCountryID' => gettext("Incurred Country|The name of the country where the loss was incurred"),
   'IncurredStateID' => gettext("Incurred State|The name of the state where the loss was incurred"),
   'IncurredCountyID' => gettext("Incurred County|A combined field used to track and associate counties"),
   'IncurredCity' => gettext("Incurred City|City where the loss occurred"),
   'IncurredPostalCode' => gettext("Incurred Postal Code|Postal code used to direct mail to the physical street address where the loss occurred")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['OnCoPropID'], ShortPhrase($phrases['OnCoPropID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OnCoPropID']->invalid = TRUE;
            }
$vMsg = Validate($data['OrganizationID'], ShortPhrase($phrases['OrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredLocationDesc'], ShortPhrase($phrases['IncurredLocationDesc']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredLocationDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredAddress1'], ShortPhrase($phrases['IncurredAddress1']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredAddress1']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredAddress2'], ShortPhrase($phrases['IncurredAddress2']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredAddress2']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredCountyID'], ShortPhrase($phrases['IncurredCountyID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredCountyID']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredCity'], ShortPhrase($phrases['IncurredCity']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredCity']->invalid = TRUE;
            }
$vMsg = Validate($data['IncurredPostalCode'], ShortPhrase($phrases['IncurredPostalCode']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['IncurredPostalCode']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Product or Service Losses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Product or Service Loss") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a product and/or service loss") );
      $tempTabs['ProductsServices'] = array( "edit.php?scr=ProductsServices&$tabsQS", gettext("Products|Associate products and/or services with the product and/or service loss") );
      $tempTabs['Claim'] = array( "edit.php?scr=Claim&$tabsQS", gettext("Claim|Edit summary information about the product and/or service loss") );
      $tempTabs['LossLocation'] = array( "", gettext("Location|Edit summary information about the location of the product and/or service loss") );
      $tempTabs['LossStatus'] = array( "edit.php?scr=LossStatus&$tabsQS", gettext("Status|Edit summary information about the status of the product and/or service loss") );
      $tempTabs['LossLegitimacy'] = array( "edit.php?scr=LossLegitimacy&$tabsQS", gettext("Legitimacy|Edit summary information about the legitimacy of the product and/or service loss") );
      $tempTabs['RiskMatrix'] = array( "edit.php?scr=RiskMatrix&$tabsQS", gettext("Risk Matrix|Edit risk matrix values associated with the product and/or service loss") );
      $tempTabs['EventLog'] = array( "edit.php?scr=EventLog&$tabsQS", gettext("Events|Associate ongoing events with the product and/or service loss") );
      $tempTabs['Documentation'] = array( "edit.php?scr=Documentation&$tabsQS", gettext("Documentation|Track the status of documentation delivery requirements associated with a product and/or service loss") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the product and/or service loss") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the product and/or service loss") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the product and/or service loss") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the product and/or service loss") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['LossLocation'] = array( "", gettext("New Product or Service Loss") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>