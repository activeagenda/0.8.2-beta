<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:9:"RevenueID";O:9:"viewfield":16:{s:4:"name";s:9:"RevenueID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Revenue Generated|The amount of revenue generated during a specified period of time";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ProductorServiceID";O:14:"codecombofield":27:{s:4:"name";s:18:"ProductorServiceID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'5\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:140:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'5\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:24:"ProductServiceCategoryID";a:3:{s:4:"name";s:24:"ProductServiceCategoryID";s:8:"findMode";s:4:"text";s:15:"listParentField";s:18:"ProductorServiceID";}}s:8:"moduleID";s:4:"opdr";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"5";}s:24:"ProductServiceCategoryID";O:14:"codecombofield":27:{s:4:"name";s:24:"ProductServiceCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'6\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:364:"SELECT DISTINCT
`opdpt`.ProductServiceCategoryID AS ID, `cod1`.Description AS Name, `opdpt`.ProductorServiceID AS ParentID
FROM `opdpt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt`.ProductServiceCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'6\')
WHERE `opdpt`._Deleted = 0
AND `opdpt`.ProductServiceCategoryID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:314:"SELECT DISTINCT
`opdpt`.ProductServiceCategoryID AS ID, `cod1`.Description AS Name, `opdpt`.ProductorServiceID AS ParentID
FROM `opdpt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt`.ProductServiceCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'6\')
WHERE `opdpt`.ProductServiceCategoryID = \'/*recordID*/\'";s:11:"parentField";s:18:"ProductorServiceID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"ProductServiceTypeID";a:2:{s:4:"name";s:20:"ProductServiceTypeID";s:15:"listParentField";s:24:"ProductServiceCategoryID";}}s:8:"moduleID";s:4:"opdr";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"6";}s:20:"ProductServiceTypeID";O:10:"combofield":26:{s:4:"name";s:20:"ProductServiceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"opdpt";s:10:"foreignKey";s:20:"ProductServiceTypeID";s:12:"foreignField";s:18:"ProductServiceType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:217:"SELECT 
`opdpt`.ProductServiceTypeID AS ID, NULLIF(CONCAT(IFNULL(`opdpt`.ProductServiceTypeTitle,\'\')),\'\') AS Name, `opdpt`.ProductServiceCategoryID AS ParentID FROM `opdpt`
WHERE opdpt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:225:"SELECT 
`opdpt`.ProductServiceTypeID AS ID, NULLIF(CONCAT(IFNULL(`opdpt`.ProductServiceTypeTitle,\'\')),\'\') AS Name, `opdpt`.ProductServiceCategoryID AS ParentID FROM `opdpt`

WHERE `opdpt`.ProductServiceTypeID = \'/*recordID*/\'";s:11:"parentField";s:24:"ProductServiceCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"ProdServID";a:1:{s:4:"name";s:10:"ProdServID";}}s:8:"moduleID";s:4:"opdr";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"ProdServID";O:10:"combofield":26:{s:4:"name";s:10:"ProdServID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"opdps";s:10:"foreignKey";s:10:"ProdServID";s:12:"foreignField";s:8:"ProdServ";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:239:"SELECT 
`opdps`.ProdServID AS ID, NULLIF(CONCAT(IFNULL(`opdps`.ProdServName,\'\'),\' | \',IFNULL(`opdps`.ProdServTrackingNo,\'\')),\' | \') AS Name, `opdps`.ProductServiceTypeID AS ParentID FROM `opdps`
WHERE opdps._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:237:"SELECT 
`opdps`.ProdServID AS ID, NULLIF(CONCAT(IFNULL(`opdps`.ProdServName,\'\'),\' | \',IFNULL(`opdps`.ProdServTrackingNo,\'\')),\' | \') AS Name, `opdps`.ProductServiceTypeID AS ParentID FROM `opdps`

WHERE `opdps`.ProdServID = \'/*recordID*/\'";s:11:"parentField";s:20:"ProductServiceTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:4:{s:19:"RevenueOrganization";a:1:{s:4:"name";s:19:"RevenueOrganization";}s:12:"ProdServDesc";a:1:{s:4:"name";s:12:"ProdServDesc";}s:18:"ProdServTrackingNo";a:1:{s:4:"name";s:18:"ProdServTrackingNo";}s:5:"SKUNo";a:1:{s:4:"name";s:5:"SKUNo";}}s:8:"moduleID";s:4:"opdr";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:30:"`opdps`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:19:"RevenueOrganization";O:9:"viewfield":16:{s:4:"name";s:19:"RevenueOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Organization|The name of the organization producing the product and/or service";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"ProdServDesc";O:9:"viewfield":16:{s:4:"name";s:12:"ProdServDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Description|A detailed description of the product and/or service";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:18:"ProdServTrackingNo";O:9:"viewfield":16:{s:4:"name";s:18:"ProdServTrackingNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Tracking Number|The unique tracking number assigned to the product or service";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:5:"SKUNo";O:9:"viewfield":16:{s:4:"name";s:5:"SKUNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"SKU Number|Stock Keeping Unit number associated with a product for inventory purposes";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ProdServID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:9:"BeginDate";O:9:"datefield":15:{s:4:"name";s:9:"BeginDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:7:"EndDate";O:9:"datefield":15:{s:4:"name";s:7:"EndDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"RevenueAmount";O:10:"moneyfield":18:{s:4:"name";s:13:"RevenueAmount";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:14:"Money notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Revenue Generated");

//field value array
$data = array(
        'RevenueID' => '',
         'ProductorServiceID' => '',
         'ProductServiceCategoryID' => '',
         'ProductServiceTypeID' => '',
         'ProdServID' => '',
         'RevenueOrganization' => '',
         'ProdServDesc' => '',
         'ProdServTrackingNo' => '',
         'SKUNo' => '',
         'BeginDate' => '',
         'EndDate' => '',
         'RevenueAmount' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'RevenueID';

    $ownerField = 'RevenueOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `opdr`.RevenueID,
   `cod1`.Description AS ProductorService,
   `opdpt1`.ProductorServiceID AS ProductorServiceID,
   `cod2`.Description AS ProductServiceCategory,
   `opdpt1`.ProductServiceCategoryID AS ProductServiceCategoryID,
   NULLIF(CONCAT(IFNULL(`opdpt1`.ProductServiceTypeTitle,'')),'') AS ProductServiceType,
   `opdps1`.ProductServiceTypeID AS ProductServiceTypeID,
   NULLIF(CONCAT(IFNULL(`opdps1`.ProdServName,''),' | ',IFNULL(`opdps1`.ProdServTrackingNo,'')),' | ') AS ProdServ,
   `opdr`.ProdServID,
   `org1`.Name AS RevenueOrganization,
   `opdps1`.ProdServDesc AS ProdServDesc,
   `opdps1`.ProdServTrackingNo AS ProdServTrackingNo,
   `opdps1`.SKUNo AS SKUNo,
   `opdr`.BeginDate,
   `opdr`.EndDate,
   `opdr`.RevenueAmount,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`opdpt1`.ProductServiceTypeTitle,'')),''),''),' | ',IFNULL(ROUND(`opdr`.RevenueAmount, 2),''),' |   ',IFNULL(`org1`.Name,'')),' |  |   ') AS RecordLabel,
   `opdps1`.OrganizationID AS RevenueOrganizationID
FROM `opdr`
   
     LEFT OUTER JOIN `opdps` AS opdps1 
   ON (`opdr`.ProdServID = `opdps1`.ProdServID )
     LEFT OUTER JOIN `opdpt` AS opdpt1 
   ON (`opdps1`.ProductServiceTypeID = `opdpt1`.ProductServiceTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`opdps1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdpt1`.ProductorServiceID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '5')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`opdpt1`.ProductServiceCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '6')
WHERE
   opdr.RevenueID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Revenue Generated");
        $screenPhrase = gettext("Form|Edit summary information about revenues generated during a stated period of time");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Revenues Generated");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'RevenueID' => gettext("Revenue Generated|The amount of revenue generated during a specified period of time"),
   'ProductorServiceID' => gettext("Product or Service|Whether this is a product or service"),
   'ProductServiceCategoryID' => gettext("Category|A broad categoy used to group products or services of similar types"),
   'ProductServiceTypeID' => gettext("Product or Service Type|A combined field used to describe this product or service type when associating it with other records"),
   'ProdServID' => gettext("Product or Service|A combined field used to describe this product or service when associating it with other records"),
   'RevenueOrganization' => gettext("Organization|The name of the organization producing the product and/or service"),
   'ProdServDesc' => gettext("Description|A detailed description of the product and/or service"),
   'ProdServTrackingNo' => gettext("Tracking Number|The unique tracking number assigned to the product or service"),
   'SKUNo' => gettext("SKU Number|Stock Keeping Unit number associated with a product for inventory purposes"),
   'BeginDate' => gettext("Begin Date|The beginning date of the payroll period"),
   'EndDate' => gettext("End Date|The ending date of the payroll period"),
   'RevenueAmount' => gettext("Revenue|The amount of revenue generated during a specified period of time stated in the currency assigned to the site.")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['BeginDate'], ShortPhrase($phrases['BeginDate']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BeginDate']->invalid = TRUE;
            }
$vMsg = Validate($data['EndDate'], ShortPhrase($phrases['EndDate']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EndDate']->invalid = TRUE;
            }
$vMsg = Validate($data['RevenueAmount'], ShortPhrase($phrases['RevenueAmount']), 'Money notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['RevenueAmount']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Revenues Generated"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Revenue Generated") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about revenues generated during a stated period of time") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Revenue Generated") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"BeginDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_BeginDate\"
});
Calendar.setup({
   inputField : \"EndDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_EndDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>