<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:18:{s:8:"CourseID";O:9:"viewfield":16:{s:4:"name";s:8:"CourseID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Record ID|An automatically assigned number used to track training courses available to the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"CourseCode";O:9:"editfield":14:{s:4:"name";s:10:"CourseCode";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:11:"CourseTitle";O:9:"editfield":14:{s:4:"name";s:11:"CourseTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:10:"CourseDesc";O:9:"memofield":15:{s:4:"name";s:10:"CourseDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:9:"CourseObj";O:9:"memofield":15:{s:4:"name";s:9:"CourseObj";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"TrainingCategoryID";O:14:"codecombofield":27:{s:4:"name";s:18:"TrainingCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'59\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'59\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"TrainingTypeID";a:2:{s:4:"name";s:14:"TrainingTypeID";s:15:"listParentField";s:18:"TrainingCategoryID";}}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"59";}s:14:"TrainingTypeID";O:10:"combofield":26:{s:4:"name";s:14:"TrainingTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"trat";s:10:"foreignKey";s:14:"TrainingTypeID";s:12:"foreignField";s:12:"TrainingType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:352:"SELECT 
`trat`.TrainingTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' - \',IFNULL(`trat`.TrainingTypeTitle,\'\')),\' - \') AS Name, `trat`.TrainingCategoryID AS ParentID FROM `trat`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`trat`.TrainingCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'59\')
WHERE trat._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:354:"SELECT 
`trat`.TrainingTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' - \',IFNULL(`trat`.TrainingTypeTitle,\'\')),\' - \') AS Name, `trat`.TrainingCategoryID AS ParentID FROM `trat`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`trat`.TrainingCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'59\')

WHERE `trat`.TrainingTypeID = \'/*recordID*/\'";s:11:"parentField";s:18:"TrainingCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"TrainingTypeDesc";a:1:{s:4:"name";s:16:"TrainingTypeDesc";}}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"TrainingTypeDesc";O:9:"viewfield":16:{s:4:"name";s:16:"TrainingTypeDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Training Type Description|A detailed description of the training type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"TrainingTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:10:"OrgLevelID";O:14:"codecombofield":27:{s:4:"name";s:10:"OrgLevelID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'22\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'22\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"22";}s:18:"RegulatoryRequired";O:13:"checkboxfield":14:{s:4:"name";s:18:"RegulatoryRequired";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"MinClassSize";O:9:"editfield":14:{s:4:"name";s:12:"MinClassSize";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:12:"MaxClassSize";O:9:"editfield":14:{s:4:"name";s:12:"MaxClassSize";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:8:"Duration";O:9:"editfield":14:{s:4:"name";s:8:"Duration";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:18:"TimeUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:18:"TimeUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"TimeUnitID";a:1:{s:4:"name";s:10:"TimeUnitID";}}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"TimeUnitID";O:10:"combofield":26:{s:4:"name";s:10:"TimeUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:18:"TimeUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:8:"Validity";O:9:"editfield":14:{s:4:"name";s:8:"Validity";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:22:"ValidityUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:22:"ValidityUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"ValidityUnitID";a:1:{s:4:"name";s:14:"ValidityUnitID";}}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"ValidityUnitID";O:10:"combofield":26:{s:4:"name";s:14:"ValidityUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:22:"ValidityUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:35:"Number notEmpty notZero notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:10:"CoursePrep";O:9:"memofield":15:{s:4:"name";s:10:"CoursePrep";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"CourseStatusID";O:14:"codecombofield":27:{s:4:"name";s:14:"CourseStatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'128\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'128\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"tra";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"128";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Training Course");

//field value array
$data = array(
        'CourseID' => '',
         'CourseCode' => '',
         'CourseTitle' => '',
         'CourseDesc' => '',
         'CourseObj' => '',
         'TrainingCategoryID' => '',
         'TrainingTypeID' => '',
         'TrainingTypeDesc' => '',
         'OrgLevelID' => '',
         'RegulatoryRequired' => '',
         'MinClassSize' => '',
         'MaxClassSize' => '',
         'TimeUnitCategoryID' => '',
         'TimeUnitID' => '',
         'Duration' => '',
         'ValidityUnitCategoryID' => '',
         'ValidityUnitID' => '',
         'Validity' => '',
         'CoursePrep' => '',
         'OrganizationID' => '',
         'PersonAccountableID' => '',
         'CourseStatusID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'CourseID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Classes";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `tra`.CourseID,
   `tra`.CourseCode,
   `tra`.CourseTitle,
   `tra`.CourseDesc,
   `tra`.CourseObj,
   `cod1`.Description AS TrainingCategory,
   `trat1`.TrainingCategoryID AS TrainingCategoryID,
   NULLIF(CONCAT(IFNULL(`cod2`.Description,''),' - ',IFNULL(`trat1`.TrainingTypeTitle,'')),' - ') AS TrainingType,
   `tra`.TrainingTypeID,
   `trat1`.TrainingTypeDesc AS TrainingTypeDesc,
   `cod3`.Description AS OrgLevel,
   `tra`.OrgLevelID,
   `tra`.RegulatoryRequired,
   `tra`.MinClassSize,
   `tra`.MaxClassSize,
   `cod4`.Description AS TimeUnitCategory,
   `uts1`.UnitCategoryID AS TimeUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),'') AS TimeUnit,
   `tra`.TimeUnitID,
   `tra`.Duration,
   `cod5`.Description AS ValidityUnitCategory,
   `uts2`.UnitCategoryID AS ValidityUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts2`.UnitName,'')),'') AS ValidityUnit,
   `tra`.ValidityUnitID,
   `tra`.Validity,
   `tra`.CoursePrep,
   `org1`.Name AS Organization,
   `tra`.OrganizationID,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `cod6`.Description AS CourseStatus,
   `tra`.CourseStatusID,
   NULLIF(CONCAT(IFNULL(`tra`.CourseTitle,''),' | ',IFNULL(`cod3`.Description,''),' | ',IFNULL(`tra`.CourseCode,''),' | ',IFNULL(`org1`.Name,'')),' |  |  | ') AS RecordLabel
FROM `tra`
   
     LEFT OUTER JOIN `trat` AS trat1 
   ON (`tra`.TrainingTypeID = `trat1`.TrainingTypeID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`tra`.OrgLevelID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '22')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`tra`.TimeUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`tra`.ValidityUnitID = `uts2`.UnitID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`tra`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`tra`.CourseID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'tra'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '87')
     LEFT OUTER JOIN `cod` AS cod6 
   ON (`tra`.CourseStatusID = `cod6`.CodeID 
     AND `cod6`.CodeTypeID = '128')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`trat1`.TrainingCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '59')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`trat1`.TrainingCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '59')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`uts1`.UnitCategoryID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`uts2`.UnitCategoryID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '37')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   tra.CourseID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Training Course");
        $screenPhrase = gettext("Form|Edit summary information about a training course");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Training Courses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'CourseID' => gettext("Record ID|An automatically assigned number used to track training courses available to the organization"),
   'CourseCode' => gettext("Course Code|A unique code used to identify a course offering. A course code can include numbers, letters and special characters; such as, dashes and periods"),
   'CourseTitle' => gettext("Title|A brief name used to identify the course offering"),
   'CourseDesc' => gettext("Description|A detailed description of the course"),
   'CourseObj' => gettext("Objective|A detailed description of the course objective. The course objective should reflect the knowledge expected of attendees as they complete the course"),
   'TrainingCategoryID' => gettext("Training Category|A word or short phrase used to describe the category of training"),
   'TrainingTypeID' => gettext("Training Type|A combined field used to describe this training type when associating it with other records"),
   'TrainingTypeDesc' => gettext("Training Type Description|A detailed description of the training type"),
   'OrgLevelID' => gettext("Organization Level|The hierarchical level of the organization"),
   'RegulatoryRequired' => gettext("Regulatory Required|Whether this training course is required to satisfy a regulatory requirement"),
   'MinClassSize' => gettext("Minimum Class Size|The minimum number of attendees required for a class to be conducted"),
   'MaxClassSize' => gettext("Maximum Class Size|The maximum number of attendees allowed for this course"),
   'Duration' => gettext("Duration|The number of hours required to conduct the course"),
   'Validity' => gettext("Validity Period|The amount of time that may pass before the training course satisfaction is no longer valid"),
   'CoursePrep' => gettext("Preparation|A detailed description of the preparation required by attendees of the course in advance of class attendance"),
   'OrganizationID' => gettext("Organization|The organization with primary responsibility for the design, development, and support for this course throughout the enterprise"),
   'PersonAccountableID' => gettext("Person Accountable|The person responsible for maintaining course content currency and quality"),
   'CourseStatusID' => gettext("Status|Status of the course curriculum and level of completion")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['CourseCode'], ShortPhrase($phrases['CourseCode']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CourseCode']->invalid = TRUE;
            }
$vMsg = Validate($data['CourseTitle'], ShortPhrase($phrases['CourseTitle']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CourseTitle']->invalid = TRUE;
            }
$vMsg = Validate($data['CourseDesc'], ShortPhrase($phrases['CourseDesc']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CourseDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['CourseObj'], ShortPhrase($phrases['CourseObj']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CourseObj']->invalid = TRUE;
            }
$vMsg = Validate($data['OrgLevelID'], ShortPhrase($phrases['OrgLevelID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrgLevelID']->invalid = TRUE;
            }
$vMsg = Validate($data['RegulatoryRequired'], ShortPhrase($phrases['RegulatoryRequired']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['RegulatoryRequired']->invalid = TRUE;
            }
$vMsg = Validate($data['MinClassSize'], ShortPhrase($phrases['MinClassSize']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['MinClassSize']->invalid = TRUE;
            }
$vMsg = Validate($data['MaxClassSize'], ShortPhrase($phrases['MaxClassSize']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['MaxClassSize']->invalid = TRUE;
            }
$vMsg = Validate($data['Duration'], ShortPhrase($phrases['Duration']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Duration']->invalid = TRUE;
            }
$vMsg = Validate($data['Validity'], ShortPhrase($phrases['Validity']), 'Number notEmpty notZero notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Validity']->invalid = TRUE;
            }
$vMsg = Validate($data['CoursePrep'], ShortPhrase($phrases['CoursePrep']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CoursePrep']->invalid = TRUE;
            }
$vMsg = Validate($data['OrganizationID'], ShortPhrase($phrases['OrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['CourseStatusID'], ShortPhrase($phrases['CourseStatusID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CourseStatusID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Training Courses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Training Course") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a training course") );
      $tempTabs['Classes'] = array( "edit.php?scr=Classes&$tabsQS", gettext("Classes|Associate scheduled classes with a training course") );
      $tempTabs['KSAs'] = array( "edit.php?scr=KSAs&$tabsQS", gettext("Qualifications|Associate knowledge, skill, and experience qualification levels with the training course") );
      $tempTabs['Materials'] = array( "edit.php?scr=Materials&$tabsQS", gettext("Materials|Associate training materials with the training course") );
      $tempTabs['Providers'] = array( "edit.php?scr=Providers&$tabsQS", gettext("Providers|Associate training providers with the training course") );
      $tempTabs['Instructors'] = array( "edit.php?scr=Instructors&$tabsQS", gettext("Instructors|Associate training instructors with the training course") );
      $tempTabs['Prerequisites'] = array( "edit.php?scr=Prerequisites&$tabsQS", gettext("Prerequisites|Associate course prerequisites with the training course") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate agreements with the training course") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the training course") );
      $tempTabs['Consequences'] = array( "edit.php?scr=Consequences&$tabsQS", gettext("Consequences|Associate business consequences with the training course") );
      $tempTabs['BusinessContinuation'] = array( "edit.php?scr=BusinessContinuation&$tabsQS", gettext("Continuity|Associate business continuity requirements with the training course") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the training course") );
      $tempTabs['Equipment'] = array( "edit.php?scr=Equipment&$tabsQS", gettext("Equipment|Associate equipment with the training course") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the training course") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the training course") );
      $tempTabs['JobTitles'] = array( "edit.php?scr=JobTitles&$tabsQS", gettext("Job Titles|Associate job titles with the training course") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the training course") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the training course") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Associate level responsibilities with the training course") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the training course") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the training course") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the training course") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the training course") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with a training course") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with a training course") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with a training course") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Course") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>