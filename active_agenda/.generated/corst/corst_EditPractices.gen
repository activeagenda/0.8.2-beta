<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:7:{s:25:"CorrectiveSituationTypeID";O:9:"viewfield":16:{s:4:"name";s:25:"CorrectiveSituationTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:128:"Record ID|An automatically assigned number used to track corrective action corrective situation type types across the enterprise";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"PolicyOrganization";O:9:"viewfield":16:{s:4:"name";s:18:"PolicyOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Policy Organization|The organization responsible for the establishment and enforcement of consistent employment practices";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:120:"Person Accountable|The person assigned primary accountability for advising and enforcing consistent employment practices";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:27:"CorrectiveSituationCategory";O:9:"viewfield":16:{s:4:"name";s:27:"CorrectiveSituationCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Category|A broadly defined title or phrase used to group similar corrective situation types requiring corrective action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"CorrectiveSituationTitle";O:9:"viewfield":16:{s:4:"name";s:24:"CorrectiveSituationTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Title|A title or phrase used to describe a specific corrective situation type requiring corrective action";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"WorkRuleNo";O:9:"viewfield":16:{s:4:"name";s:10:"WorkRuleNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Work Rule Number|Work rule or policy number associated with the corrective situation type to be addressed";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:30:"CorrectiveSituationDescription";O:9:"viewfield":16:{s:4:"name";s:30:"CorrectiveSituationDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Description|A general description of a corrective situation type requiring corrective action";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Corrective Situation Type");

//field value array
$data = array(
        'CorrectiveSituationTypeID' => '',
         'PolicyOrganization' => '',
         'PersonAccountable' => '',
         'CorrectiveSituationCategory' => '',
         'CorrectiveSituationTitle' => '',
         'WorkRuleNo' => '',
         'CorrectiveSituationDescription' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:721:"SELECT 
   `corcp`.CorrectivePracticeID,
   `cod1`.Description AS OccurNo,
   `corcp`.OccurNoID,
   `cod2`.Description AS CorrectivePracticeCategory,
   `corcp`.CorrectivePracticeCategoryID,
   `corcp`.CorrectivePracticeDescription,
   `corst1`.PolicyOrganizationID AS PolicyOrganizationID
FROM `corcp`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`corcp`.OccurNoID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'75\')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`corcp`.CorrectivePracticeCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'57\')
     LEFT OUTER JOIN `corst` AS corst1 
   ON (`corcp`.CorrectiveSituationTypeID = `corst1`.CorrectiveSituationTypeID )
WHERE
   corcp.CorrectivePracticeID=\'/**RowID**/\'";s:9:"getRowSQL";s:721:"SELECT 
   `corcp`.CorrectivePracticeID,
   `cod1`.Description AS OccurNo,
   `corcp`.OccurNoID,
   `cod2`.Description AS CorrectivePracticeCategory,
   `corcp`.CorrectivePracticeCategoryID,
   `corcp`.CorrectivePracticeDescription,
   `corst1`.PolicyOrganizationID AS PolicyOrganizationID
FROM `corcp`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`corcp`.OccurNoID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'75\')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`corcp`.CorrectivePracticeCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'57\')
     LEFT OUTER JOIN `corst` AS corst1 
   ON (`corcp`.CorrectiveSituationTypeID = `corst1`.CorrectiveSituationTypeID )
WHERE
   corcp.CorrectivePracticeID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:0;s:10:"FormFields";a:0:{}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:20:"CorrectivePracticeID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"corcp";s:6:"phrase";s:20:"Consistent Practices";s:6:"number";i:1;s:6:"Fields";a:4:{s:20:"CorrectivePracticeID";O:14:"invisiblefield":11:{s:4:"name";s:20:"CorrectivePracticeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Record ID|An automatically assigned number used to assign consistent corrective practices";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"corcp";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:9:"OccurNoID";O:14:"coderadiofield":29:{s:4:"name";s:9:"OccurNoID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Occurrence|The number of times the situation must occur to result in the assigned consistent practice";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'75\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'75\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"corcp";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:28:"CorrectivePracticeCategoryID";O:14:"codecombofield":27:{s:4:"name";s:28:"CorrectivePracticeCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Category|A brief phrase used to describe a category of corrective action practices";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"corcp";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'57\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'57\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"corcp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"57";}s:29:"CorrectivePracticeDescription";O:9:"memofield":15:{s:4:"name";s:29:"CorrectivePracticeDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Description|A general description of a corrective situation type requiring corrective action";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:8:"countSQL";s:124:"SELECT 
    count(*) 
FROM `corcp`
   
WHERE corcp._Deleted = 0
   AND `corcp`.CorrectiveSituationTypeID = \'/**RecordID**/\'
";s:7:"listSQL";s:728:"SELECT 
   `corcp`.CorrectivePracticeID,
`corst1`.PolicyOrganizationID AS PolicyOrganizationID,
`cod1`.Description AS OccurNo,
`corcp`.OccurNoID,
`cod2`.Description AS CorrectivePracticeCategory,
`corcp`.CorrectivePracticeCategoryID,
`corcp`.CorrectivePracticeDescription
FROM `corcp`

   LEFT OUTER JOIN `corst` AS corst1 
   ON (`corcp`.CorrectiveSituationTypeID = `corst1`.CorrectiveSituationTypeID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`corcp`.OccurNoID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'75\')
   LEFT OUTER JOIN `cod` AS cod2 
   ON (`corcp`.CorrectivePracticeCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'57\')
WHERE corcp._Deleted = 0
AND `corcp`.CorrectiveSituationTypeID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:25:"CorrectiveSituationTypeID";s:9:"parentKey";s:25:"CorrectiveSituationTypeID";s:8:"PKFields";a:1:{i:0;s:20:"CorrectivePracticeID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'CorrectiveSituationTypeID';

    $ownerField = 'PolicyOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Guidance";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `corst`.CorrectiveSituationTypeID,
   `org1`.Name AS PolicyOrganization,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS CorrectiveSituationCategory,
   `corst`.CorrectiveSituationTitle,
   `corst`.WorkRuleNo,
   `corst`.CorrectiveSituationDescription,
   NULLIF(CONCAT(IFNULL(`cod1`.Description,''),' | ',IFNULL(`corst`.CorrectiveSituationTitle,''),' | ',IFNULL(`org1`.Name,'')),' |  | ') AS RecordLabel,
   `corst`.PolicyOrganizationID
FROM `corst`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`corst`.PolicyOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`corst`.CorrectiveSituationTypeID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'corst'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '22')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`corst`.CorrectiveSituationCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '58')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   corst.CorrectiveSituationTypeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Corrective Situation Type");
        $screenPhrase = gettext("Practices|Associate employment practice requirements with the corrective action situation");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Corrective Situation Types");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'CorrectiveSituationTypeID' => gettext("Record ID|An automatically assigned number used to track corrective action corrective situation type types across the enterprise"),
   'PolicyOrganization' => gettext("Policy Organization|The organization responsible for the establishment and enforcement of consistent employment practices"),
   'PersonAccountable' => gettext("Person Accountable|The person assigned primary accountability for advising and enforcing consistent employment practices"),
   'CorrectiveSituationCategory' => gettext("Category|A broadly defined title or phrase used to group similar corrective situation types requiring corrective action"),
   'CorrectiveSituationTitle' => gettext("Title|A title or phrase used to describe a specific corrective situation type requiring corrective action"),
   'WorkRuleNo' => gettext("Work Rule Number|Work rule or policy number associated with the corrective situation type to be addressed"),
   'CorrectiveSituationDescription' => gettext("Description|A general description of a corrective situation type requiring corrective action")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Corrective Situation Types"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Corrective Situation Type") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the corrective action situation type") );
      $tempTabs['Practices'] = array( "", gettext("Practices|Associate employment practice requirements with the corrective action situation") );
      $tempTabs['Guidance'] = array( "edit.php?scr=Guidance&$tabsQS", gettext("Guidance|Associate guidance with the corrective action situation") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the corrective action situation") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the corrective action situation") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the corrective action situation") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the corrective action situation") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Practices'] = array( "", gettext("New Situation Type") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>