<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:23:"SituationResponseStepID";O:9:"viewfield":16:{s:4:"name";s:23:"SituationResponseStepID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Step ID|An automatically assigned number used to associate response steps with organization specific situations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:138:"SELECT 
`org`.OrganizationID AS ID, NULLIF(CONCAT(IFNULL(`org`.Name,\'\')),\'\') AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:140:"SELECT 
`org`.OrganizationID AS ID, NULLIF(CONCAT(IFNULL(`org`.Name,\'\')),\'\') AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:15:"SituationTypeID";O:14:"codecombofield":27:{s:4:"name";s:15:"SituationTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'26\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'26\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"SituationID";a:1:{s:4:"name";s:11:"SituationID";}}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"26";}s:11:"SituationID";O:10:"combofield":26:{s:4:"name";s:11:"SituationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"sit";s:10:"foreignKey";s:11:"SituationID";s:12:"foreignField";s:9:"Situation";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:305:"SELECT 
`sit`.SituationID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,\'\')),\'\'),\'\')),\'\') AS Name, `sit`.SituationTypeID AS ParentID FROM `sit`
 
 LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit`.SituationTypeID = `sitt1`.SituationTypeID )
WHERE sit._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:304:"SELECT 
`sit`.SituationID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,\'\')),\'\'),\'\')),\'\') AS Name, `sit`.SituationTypeID AS ParentID FROM `sit`
 
 LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit`.SituationTypeID = `sitt1`.SituationTypeID )

WHERE `sit`.SituationID = \'/*recordID*/\'";s:11:"parentField";s:15:"SituationTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`sit`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:17:"ResourcePurposeID";O:14:"codecombofield":27:{s:4:"name";s:17:"ResourcePurposeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'42\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'42\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"ResourceTypeID";a:1:{s:4:"name";s:14:"ResourceTypeID";}}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"42";}s:14:"ResourceTypeID";O:10:"combofield":26:{s:4:"name";s:14:"ResourceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"prtt";s:10:"foreignKey";s:19:"ParticipationTypeID";s:12:"foreignField";s:17:"ParticipationType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:204:"SELECT 
`prtt`.ParticipationTypeID AS ID, NULLIF(CONCAT(IFNULL(`prtt`.ParticipationTitle,\'\')),\'\') AS Name, `prtt`.ParticipationPurposeID AS ParentID FROM `prtt`
WHERE prtt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:211:"SELECT 
`prtt`.ParticipationTypeID AS ID, NULLIF(CONCAT(IFNULL(`prtt`.ParticipationTitle,\'\')),\'\') AS Name, `prtt`.ParticipationPurposeID AS ParentID FROM `prtt`

WHERE `prtt`.ParticipationTypeID = \'/*recordID*/\'";s:11:"parentField";s:17:"ResourcePurposeID";s:21:"parentListModuleField";s:22:"ParticipationPurposeID";s:11:"childFields";a:1:{s:19:"SituationResponseID";a:1:{s:4:"name";s:19:"SituationResponseID";}}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:19:"SituationResponseID";O:10:"combofield":26:{s:4:"name";s:19:"SituationResponseID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"sitrp";s:10:"foreignKey";s:19:"SituationResponseID";s:12:"foreignField";s:17:"SituationResponse";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:725:"SELECT 
`sitrp`.SituationResponseID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,\'\')),\'\'),\'\')),\'\'),\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`prtt1`.ParticipationTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`org1`.Name,\'\')),\' |  | \') AS Name, `sitrp`.ResourceTypeID AS ParentID FROM `sitrp`
 
 LEFT OUTER JOIN `sit` AS sit1 
   ON (`sitrp`.SituationID = `sit1`.SituationID )
 LEFT OUTER JOIN `prtt` AS prtt1 
   ON (`sitrp`.ResourceTypeID = `prtt1`.ParticipationTypeID )
 LEFT OUTER JOIN `org` AS org1 
   ON (`sit1`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit1`.SituationTypeID = `sitt1`.SituationTypeID )
WHERE sitrp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:732:"SELECT 
`sitrp`.SituationResponseID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,\'\')),\'\'),\'\')),\'\'),\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`prtt1`.ParticipationTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`org1`.Name,\'\')),\' |  | \') AS Name, `sitrp`.ResourceTypeID AS ParentID FROM `sitrp`
 
 LEFT OUTER JOIN `sit` AS sit1 
   ON (`sitrp`.SituationID = `sit1`.SituationID )
 LEFT OUTER JOIN `prtt` AS prtt1 
   ON (`sitrp`.ResourceTypeID = `prtt1`.ParticipationTypeID )
 LEFT OUTER JOIN `org` AS org1 
   ON (`sit1`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit1`.SituationTypeID = `sitt1`.SituationTypeID )

WHERE `sitrp`.SituationResponseID = \'/*recordID*/\'";s:11:"parentField";s:14:"ResourceTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"sitrs";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`sit1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:17:"ResponseStepOrder";O:9:"editfield":14:{s:4:"name";s:17:"ResponseStepOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:35:"Number notZero notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:12:"ResponseStep";O:9:"memofield":15:{s:4:"name";s:12:"ResponseStep";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Situation Response Step");

//field value array
$data = array(
        'SituationResponseStepID' => '',
         'OrganizationID' => '',
         'SituationTypeID' => '',
         'SituationID' => '',
         'ResourcePurposeID' => '',
         'ResourceTypeID' => '',
         'SituationResponseID' => '',
         'ResponseStepOrder' => '',
         'ResponseStep' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'SituationResponseStepID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `sitrs`.SituationResponseStepID,
   NULLIF(CONCAT(IFNULL(`org1`.Name,'')),'') AS Organization,
   `sit1`.OrganizationID AS OrganizationID,
   `cod1`.Description AS SituationType,
   `sit1`.SituationTypeID AS SituationTypeID,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,'')),''),'')),'') AS Situation,
   `sitrp1`.SituationID AS SituationID,
   `cod2`.Description AS ResourcePurpose,
   `prtt1`.ParticipationPurposeID AS ResourcePurposeID,
   NULLIF(CONCAT(IFNULL(`prtt1`.ParticipationTitle,'')),'') AS ResourceType,
   `sitrp1`.ResourceTypeID AS ResourceTypeID,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt2`.SituationTitle,'')),''),'')),''),''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`prtt2`.ParticipationTitle,'')),''),''),' | ',IFNULL(`org2`.Name,'')),' |  | ') AS SituationResponse,
   `sitrs`.SituationResponseID,
   `sitrs`.ResponseStepOrder,
   `sitrs`.ResponseStep,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`org1`.Name,'')),''),''),' | ',IFNULL(`cod1`.Description,''),' | ',IFNULL(`cod2`.Description,'')),' |  | ') AS RecordLabel
FROM `sitrs`
   
     LEFT OUTER JOIN `sitrp` AS sitrp1 
   ON (`sitrs`.SituationResponseID = `sitrp1`.SituationResponseID )
     LEFT OUTER JOIN `sit` AS sit1 
   ON (`sitrp1`.SituationID = `sit1`.SituationID )
     LEFT OUTER JOIN `prtt` AS prtt1 
   ON (`sitrp1`.ResourceTypeID = `prtt1`.ParticipationTypeID )
     LEFT OUTER JOIN `sit` AS sit2 
   ON (`sitrp1`.SituationID = `sit2`.SituationID )
     LEFT OUTER JOIN `prtt` AS prtt2 
   ON (`sitrp1`.ResourceTypeID = `prtt2`.ParticipationTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`sit1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`sit1`.SituationTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '26')
     LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`sit1`.SituationTypeID = `sitt1`.SituationTypeID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`prtt1`.ParticipationPurposeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '42')
     LEFT OUTER JOIN `org` AS org2 
   ON (`sit2`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `sitt` AS sitt2 
   ON (`sit2`.SituationTypeID = `sitt2`.SituationTypeID )
WHERE
   sitrs.SituationResponseStepID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Situation Response Step");
        $screenPhrase = gettext("Form|Edit summary information about an incident response step associated with a local situation");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Situation Response Steps");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'SituationResponseStepID' => gettext("Step ID|An automatically assigned number used to associate response steps with organization specific situations"),
   'OrganizationID' => gettext("Organization|The name of the organization assigning the human resource to local situations"),
   'SituationTypeID' => gettext("Situation Type|A word or phrase used to categorize situtaions encountered by the organization"),
   'SituationID' => gettext("Situation|A combined field used to describe this situation when associating it with other records"),
   'ResourcePurposeID' => gettext("Resource Purpose|A word or short phrase used to describe the purpose for this resource type"),
   'ResourceTypeID' => gettext("Resource Type|A combined field used to describe this resource type when associating it with other records"),
   'SituationResponseID' => gettext("Situation Response|A combined field used to describe this situation response procedure when associating it with other records"),
   'ResponseStepOrder' => gettext("Order|The list order of this situation response step"),
   'ResponseStep' => gettext("Step|A step required of this resource in response to the situation")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['SituationResponseID'], ShortPhrase($phrases['SituationResponseID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SituationResponseID']->invalid = TRUE;
            }
$vMsg = Validate($data['ResponseStepOrder'], ShortPhrase($phrases['ResponseStepOrder']), 'Number notZero notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ResponseStepOrder']->invalid = TRUE;
            }
$vMsg = Validate($data['ResponseStep'], ShortPhrase($phrases['ResponseStep']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ResponseStep']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Situation Response Steps"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Situation Response Step") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about an incident response step associated with a local situation") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Situation Response Step") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>