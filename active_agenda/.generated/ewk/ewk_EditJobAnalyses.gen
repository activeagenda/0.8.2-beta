<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:11:{s:14:"ElevatedWorkID";O:9:"viewfield":16:{s:4:"name";s:14:"ElevatedWorkID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Record ID|An automatically assigned number used to track elevated work activity throughout the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ElevatedWorkTypeID";O:14:"invisiblefield":11:{s:4:"name";s:18:"ElevatedWorkTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"ElevatedWorkType";O:9:"viewfield":16:{s:4:"name";s:16:"ElevatedWorkType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Elevated Work Type|A title or phrase used to describe the type of elevated work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ElevatedWorkTitle";O:9:"viewfield":16:{s:4:"name";s:17:"ElevatedWorkTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Elevated Work Title|A word or short phrase used to identify the elevated work activity";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"ElevatedWorkDesc";O:9:"viewfield":16:{s:4:"name";s:16:"ElevatedWorkDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:122:"Description|A detailed description of this elevated work activity and any special characteristics associated with the work";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Organization|The name of the organization where the elevated work activity occurs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Location|Specific area within the facility where the elevated work activity occurs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Person Accountable|The individual assigned primary accountability for managing the risks associated with the elevated work activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ContactCard";O:9:"viewfield":16:{s:4:"name";s:11:"ContactCard";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:148:"Contact Card|A combined field used to display basic contact information for the person managing the risks associated with the elevated work activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"EmergencyPhone";O:9:"viewfield":16:{s:4:"name";s:14:"EmergencyPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Emergency Phone|Telephone number to be called in the case of a elevated work emergency";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Last Review|The date of the last formal review of the elevated work activity";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Elevated Work Activity");

//field value array
$data = array(
        'ElevatedWorkID' => '',
         'ElevatedWorkTypeID' => '',
         'ElevatedWorkType' => '',
         'ElevatedWorkTitle' => '',
         'ElevatedWorkDesc' => '',
         'Organization' => '',
         'Location' => '',
         'PersonAccountable' => '',
         'ContactCard' => '',
         'EmergencyPhone' => '',
         'LastReviewDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:672:"SELECT 
   `jana`.JobAnalysisAssocID,
   `org1`.Name AS Organization,
   `jan1`.OrganizationID AS OrganizationID,
   NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis,
   `jana`.JobAnalysisID,
   `cod1`.Description AS Function,
   `jan1`.JobAnalysisDesc AS JobAnalysisDesc,
   `jana`.MannerAffected
FROM `jana`
   
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jana`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`jan1`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'4\')
WHERE
   jana.JobAnalysisAssocID=\'/**RowID**/\'";s:9:"getRowSQL";s:454:"SELECT 
   `jana`.JobAnalysisAssocID,
   `org1`.Name AS Organization,
   NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis,
   `jana`.MannerAffected,
   `jan1`.OrganizationID AS OrganizationID
FROM `jana`
   
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jana`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
WHERE
   jana.JobAnalysisAssocID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:6:{s:18:"JobAnalysisAssocID";O:14:"invisiblefield":11:{s:4:"name";s:18:"JobAnalysisAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Record ID|An automatically assigned number used to associate job analyses with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:146:"Organization|The organization with primary responsibility for developing and maintaining the job analysis and providing necessary training support";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"JobAnalysisID";a:1:{s:4:"name";s:13:"JobAnalysisID";}}s:8:"moduleID";s:4:"jana";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:13:"JobAnalysisID";O:10:"combofield":26:{s:4:"name";s:13:"JobAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Job Analysis|A description of the job analysis based on a combination of field values assigned from within the Job Analyses module";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"jan";s:10:"foreignKey";s:13:"JobAnalysisID";s:12:"foreignField";s:11:"JobAnalysis";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:183:"SELECT 
`jan`.JobAnalysisID AS ID, NULLIF(CONCAT(IFNULL(`jan`.JobAnalysisTitle,\'\')),\'\') AS Name, `jan`.OrganizationID AS ParentID FROM `jan`
WHERE jan._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:184:"SELECT 
`jan`.JobAnalysisID AS ID, NULLIF(CONCAT(IFNULL(`jan`.JobAnalysisTitle,\'\')),\'\') AS Name, `jan`.OrganizationID AS ParentID FROM `jan`

WHERE `jan`.JobAnalysisID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:8:"Function";a:1:{s:4:"name";s:8:"Function";}s:15:"JobAnalysisDesc";a:1:{s:4:"name";s:15:"JobAnalysisDesc";}}s:8:"moduleID";s:4:"jana";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`jan`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:8:"Function";O:9:"viewfield":16:{s:4:"name";s:8:"Function";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Function|The functional purpose of the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"JobAnalysisID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:15:"JobAnalysisDesc";O:9:"viewfield":16:{s:4:"name";s:15:"JobAnalysisDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:190:"Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very importnat to others interested in assigning this job to different job titles";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"JobAnalysisID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"MannerAffected";O:9:"memofield":15:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Manner Affected|The manner in which the related record is affected by the job analysis";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:18:"JobAnalysisAssocID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"jana";s:6:"phrase";s:12:"Job Analyses";s:6:"number";i:1;s:6:"Fields";a:4:{s:18:"JobAnalysisAssocID";O:14:"invisiblefield":11:{s:4:"name";s:18:"JobAnalysisAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Record ID|An automatically assigned number used to associate job analyses with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:146:"Organization|The organization with primary responsibility for developing and maintaining the job analysis and providing necessary training support";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"JobAnalysis";O:9:"viewfield":16:{s:4:"name";s:11:"JobAnalysis";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Job Analysis|A description of the job analysis based on a combination of field values assigned from within the Job Analyses module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"MannerAffected";O:9:"viewfield":16:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Manner Affected|The manner in which the related record is affected by the job analysis";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jana";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:146:"SELECT 
    count(*) 
FROM `jana`
   
WHERE jana._Deleted = 0
   AND `jana`.RelatedModuleID = \'ewk\'
AND `jana`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:495:"SELECT 
   `jana`.JobAnalysisAssocID,
`jan1`.OrganizationID AS OrganizationID,
`org1`.Name AS Organization,
NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis,
`jana`.MannerAffected
FROM `jana`

   LEFT OUTER JOIN `jan` AS jan1 
   ON (`jana`.JobAnalysisID = `jan1`.JobAnalysisID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
WHERE jana._Deleted = 0
AND `jana`.RelatedModuleID = \'ewk\'
AND `jana`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:14:"ElevatedWorkID";s:8:"PKFields";a:1:{i:0;s:18:"JobAnalysisAssocID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"ewk";}}');


    /**guidanceGrid**/

    $PKField = 'ElevatedWorkID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ewk`.ElevatedWorkID,
   `ewk`.ElevatedWorkTypeID,
   NULLIF(CONCAT(IFNULL(`ewkt1`.ElevatedWorkTitle,'')),'') AS ElevatedWorkType,
   `ewk`.ElevatedWorkTitle,
   `ewk`.ElevatedWorkDesc,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `ppl1`.DisplayName AS PersonAccountable,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkPhone,''),', ext. ',IFNULL(`ppl1`.WorkExtension,''),' (work)','<br />',IFNULL(`ppl1`.MobilePhone,''),' (mobile)','<br />',IFNULL(`ppl1`.WorkFax,''),' (fax)',' <br /><a href=\"mailto:',IFNULL(`ppl1`.WorkEmail,''),'\">',IFNULL(`ppl1`.WorkEmail,''),'</a>'),', ext.  (work)<br /> (mobile)<br /> (fax) <br /><a href=\\\"mailto:\\\"></a>') AS ContactCard,
   `ewk`.EmergencyPhone,
   `dat1`.RelatedDate AS LastReviewDate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ewkt1`.ElevatedWorkTitle,'')),''),''),' | ',IFNULL(`ewk`.ElevatedWorkTitle,'')),' | ') AS RecordLabel,
   `ewk`.OrganizationID
FROM `ewk`
   
     LEFT OUTER JOIN `ewkt` AS ewkt1 
   ON (`ewk`.ElevatedWorkTypeID = `ewkt1`.ElevatedWorkTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`ewk`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`ewk`.ElevatedWorkID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'ewk'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`ewk`.ElevatedWorkID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'ewk'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '188')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ewk`.ElevatedWorkID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ewk'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '20')
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   ewk.ElevatedWorkID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Elevated Work Activity");
        $screenPhrase = gettext("Job Analyses|Associate job analyses with the elevated work activity");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Elevated Work");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ElevatedWorkID' => gettext("Record ID|An automatically assigned number used to track elevated work activity throughout the organization"),
   'ElevatedWorkTypeID' => gettext("Elevated Work Type|A title or phrase used to describe the type of elevated work"),
   'ElevatedWorkType' => gettext("Elevated Work Type|A title or phrase used to describe the type of elevated work"),
   'ElevatedWorkTitle' => gettext("Elevated Work Title|A word or short phrase used to identify the elevated work activity"),
   'ElevatedWorkDesc' => gettext("Description|A detailed description of this elevated work activity and any special characteristics associated with the work"),
   'Organization' => gettext("Organization|The name of the organization where the elevated work activity occurs"),
   'Location' => gettext("Location|Specific area within the facility where the elevated work activity occurs"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the risks associated with the elevated work activity"),
   'ContactCard' => gettext("Contact Card|A combined field used to display basic contact information for the person managing the risks associated with the elevated work activity"),
   'EmergencyPhone' => gettext("Emergency Phone|Telephone number to be called in the case of a elevated work emergency"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the elevated work activity")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Elevated Work Activities"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Elevated Work Activity") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a elevated work activity") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the elevated work activity") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Checklist|Associate checklist items with the elevated work activity") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the elevated work activity") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the elevated work activity") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the elevated work activity") );
      $tempTabs['JobAnalyses'] = array( "", gettext("Job Analyses|Associate job analyses with the elevated work activity") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the elevated work activity") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the elevated work activity") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the elevated work activity") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with a elevated work activity") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['JobAnalyses'] = array( "", gettext("New Activity") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>