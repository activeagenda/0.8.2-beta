<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:9:"ControlID";O:9:"viewfield":16:{s:4:"name";s:9:"ControlID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:91:"Record ID|An automatically assigned number used to associate locations with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"RelatedModuleRecord";O:9:"viewfield":16:{s:4:"name";s:19:"RelatedModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Related Record|A combined field used to display the related module name and record ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:17:"RelatedRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"RelatedRecordDescription";O:9:"viewfield":16:{s:4:"name";s:24:"RelatedRecordDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Record Description|A description of the related record based on a combination of field values assigned from within the related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"AssignedOrganization";O:9:"viewfield":16:{s:4:"name";s:20:"AssignedOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Assigned Organization|The organization being assigned the control methodology";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Person Accountable|The individual assigned primary accountability for ensuring adherence to the assigned control method";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ControlCategory";O:9:"viewfield":16:{s:4:"name";s:15:"ControlCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:120:"Control Category|A method of grouping control techniques used to avoid, remedy, or mitigate known or anticipated hazards";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ControlTitle";O:9:"viewfield":16:{s:4:"name";s:12:"ControlTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Control Title|A short title used to specifically describe the assigned control";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ControlDesc";O:9:"viewfield":16:{s:4:"name";s:11:"ControlDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Control|A detailed description of the control method to be associated or assigned";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"ControlStatus";O:9:"viewfield":16:{s:4:"name";s:13:"ControlStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Status|The present status of the assigned control method";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ControlStatusDate";O:9:"viewfield":16:{s:4:"name";s:17:"ControlStatusDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Status Date|The specific date of the hazard control";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Control");

//field value array
$data = array(
        'ControlID' => '',
         'RelatedModuleRecord' => '',
         'RelatedRecordDescription' => '',
         'AssignedOrganization' => '',
         'PersonAccountable' => '',
         'ControlCategory' => '',
         'ControlTitle' => '',
         'ControlDesc' => '',
         'ControlStatus' => '',
         'ControlStatusDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:666:"SELECT 
   `oppa`.OperatingPermitAssocID,
   `org1`.Name AS Organization,
   `opp1`.OrganizationID AS OrganizationID,
   `cod1`.Description AS PermitType,
   `opp1`.PermitTypeID AS PermitTypeID,
   NULLIF(CONCAT(IFNULL(`opp1`.PermitName,\'\')),\'\') AS OppPermit,
   `oppa`.OppPermitID,
   `oppa`.MannerAffected
FROM `oppa`
   
     LEFT OUTER JOIN `opp` AS opp1 
   ON (`oppa`.OppPermitID = `opp1`.OppPermitID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`opp1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`opp1`.PermitTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'207\')
WHERE
   oppa.OperatingPermitAssocID=\'/**RowID**/\'";s:9:"getRowSQL";s:533:"SELECT 
   `oppa`.OperatingPermitAssocID,
   `org1`.Name AS Organization,
   `cod1`.Description AS PermitType,
   NULLIF(CONCAT(IFNULL(`opp1`.PermitName,\'\')),\'\') AS OppPermit
FROM `oppa`
   
     LEFT OUTER JOIN `opp` AS opp1 
   ON (`oppa`.OppPermitID = `opp1`.OppPermitID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`opp1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`opp1`.PermitTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'207\')
WHERE
   oppa.OperatingPermitAssocID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:5:{s:22:"OperatingPermitAssocID";O:14:"invisiblefield":11:{s:4:"name";s:22:"OperatingPermitAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:138:"Record ID|An automatically assigned number used to associate operating permits with equipment and activities requiring a permit to operate";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:115:"Organization|The name of the organization responsible for application for, and maintenance of, the operating permit";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:12:"PermitTypeID";a:1:{s:4:"name";s:12:"PermitTypeID";}}s:8:"moduleID";s:4:"oppa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:12:"PermitTypeID";O:10:"combofield":26:{s:4:"name";s:12:"PermitTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Permit Type|A classification used to group permits of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'207\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:322:"SELECT DISTINCT
`opp`.PermitTypeID AS ID, NULLIF(CONCAT(IFNULL(`oppt1`.PermitTypeName,\'\')),\'\') AS Name, `opp`.OrganizationID AS ParentID
FROM `opp`

LEFT OUTER JOIN `oppt` AS oppt1 
   ON (`opp`.PermitTypeID = `oppt1`.PermitTypeID )
WHERE `opp`._Deleted = 0
AND `opp`.PermitTypeID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:274:"SELECT DISTINCT
`opp`.PermitTypeID AS ID, NULLIF(CONCAT(IFNULL(`oppt1`.PermitTypeName,\'\')),\'\') AS Name, `opp`.OrganizationID AS ParentID
FROM `opp`

LEFT OUTER JOIN `oppt` AS oppt1 
   ON (`opp`.PermitTypeID = `oppt1`.PermitTypeID )
WHERE `opp`.PermitTypeID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"OppPermitID";a:2:{s:4:"name";s:11:"OppPermitID";s:15:"listParentField";s:12:"PermitTypeID";}}s:8:"moduleID";s:4:"oppa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:11:"OppPermitID";O:10:"combofield":26:{s:4:"name";s:11:"OppPermitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Permit|A combined field used to describe this operating permit when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"opp";s:10:"foreignKey";s:11:"OppPermitID";s:12:"foreignField";s:9:"OppPermit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:173:"SELECT 
`opp`.OppPermitID AS ID, NULLIF(CONCAT(IFNULL(`opp`.PermitName,\'\')),\'\') AS Name, `opp`.PermitTypeID AS ParentID FROM `opp`
WHERE opp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:172:"SELECT 
`opp`.OppPermitID AS ID, NULLIF(CONCAT(IFNULL(`opp`.PermitName,\'\')),\'\') AS Name, `opp`.PermitTypeID AS ParentID FROM `opp`

WHERE `opp`.OppPermitID = \'/*recordID*/\'";s:11:"parentField";s:12:"PermitTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"oppa";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`opp`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:14:"MannerAffected";O:9:"memofield":15:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Manner Affected|The manner in which the related record is affected by the operating permit";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:22:"OperatingPermitAssocID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"oppa";s:6:"phrase";s:17:"Operating Permits";s:6:"number";i:1;s:6:"Fields";a:4:{s:22:"OperatingPermitAssocID";O:14:"invisiblefield":11:{s:4:"name";s:22:"OperatingPermitAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:138:"Record ID|An automatically assigned number used to associate operating permits with equipment and activities requiring a permit to operate";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:115:"Organization|The name of the organization responsible for application for, and maintenance of, the operating permit";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PermitType";O:9:"viewfield":16:{s:4:"name";s:10:"PermitType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Permit Type|A classification used to group permits of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"OppPermit";O:9:"viewfield":16:{s:4:"name";s:9:"OppPermit";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Permit|A combined field used to describe this operating permit when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"oppa";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:146:"SELECT 
    count(*) 
FROM `oppa`
   
WHERE oppa._Deleted = 0
   AND `oppa`.RelatedModuleID = \'cnt\'
AND `oppa`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:571:"SELECT 
   `oppa`.OperatingPermitAssocID,
`org1`.Name AS Organization,
`cod1`.Description AS PermitType,
NULLIF(CONCAT(IFNULL(`opp1`.PermitName,\'\')),\'\') AS OppPermit
FROM `oppa`

   LEFT OUTER JOIN `opp` AS opp1 
   ON (`oppa`.OppPermitID = `opp1`.OppPermitID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`opp1`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`opp1`.PermitTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'207\')
WHERE oppa._Deleted = 0
AND `oppa`.RelatedModuleID = \'cnt\'
AND `oppa`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:9:"ControlID";s:8:"PKFields";a:1:{i:0;s:22:"OperatingPermitAssocID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"cnt";}}');


    /**guidanceGrid**/

    $PKField = 'ControlID';

    $ownerField = 'AssignedOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "BestPractices";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `cnt`.ControlID,
   CONCAT('internal:view.php?mdl=',`cnt`.RelatedModuleID,'&rid=',`cnt`.RelatedRecordID) AS RelatedRecordLink,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' Module (Record ID: ',IFNULL(`cnt`.RelatedRecordID,''),')'),' Module (Record ID: )') AS RelatedModuleRecord,
   `rdc1`.Value AS RelatedRecordDescription,
   `org1`.Name AS AssignedOrganization,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS ControlCategory,
   `cnt`.ControlTitle,
   `cnt`.ControlDesc,
   `cod2`.Description AS ControlStatus,
   `dat1`.RelatedDate AS ControlStatusDate,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`cnt`.ControlTitle,''),' | ',IFNULL(`mod1`.Name,''),' | ',IFNULL(`rdc1`.Value,'')),' |  |  | ') AS RecordLabel,
   `cnt`.AssignedOrganizationID
FROM `cnt`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`cnt`.RelatedModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`cnt`.RelatedRecordID = rdc1.RecordID AND `cnt`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `org` AS org1 
   ON (`cnt`.AssignedOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`cnt`.ControlID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'cnt'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '20')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`cnt`.ControlCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '121')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`cnt`.ControlStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '30')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`cnt`.ControlID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'cnt'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '15')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   cnt.ControlID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Control");
        $screenPhrase = gettext("Permits|Associate permits with the hazard control system");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Controls");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ControlID' => gettext("Record ID|An automatically assigned number used to associate locations with related records"),
   'RelatedModuleRecord' => gettext("Related Record|A combined field used to display the related module name and record ID"),
   'RelatedRecordDescription' => gettext("Record Description|A description of the related record based on a combination of field values assigned from within the related module"),
   'AssignedOrganization' => gettext("Assigned Organization|The organization being assigned the control methodology"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for ensuring adherence to the assigned control method"),
   'ControlCategory' => gettext("Control Category|A method of grouping control techniques used to avoid, remedy, or mitigate known or anticipated hazards"),
   'ControlTitle' => gettext("Control Title|A short title used to specifically describe the assigned control"),
   'ControlDesc' => gettext("Control|A detailed description of the control method to be associated or assigned"),
   'ControlStatus' => gettext("Status|The present status of the assigned control method"),
   'ControlStatusDate' => gettext("Status Date|The specific date of the hazard control")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Controls"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Control") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a control and/or assignment associated with a related record") );
      $tempTabs['Equipment'] = array( "edit.php?scr=Equipment&$tabsQS", gettext("Equipment|Associate equipment with the hazard control system") );
      $tempTabs['Permits'] = array( "", gettext("Permits|Associate permits with the hazard control system") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the hazard control system") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Permits'] = array( "", gettext("New Control") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>