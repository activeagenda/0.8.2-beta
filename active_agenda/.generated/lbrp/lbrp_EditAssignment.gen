<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:31:{s:17:"LineBreakPermitID";O:9:"viewfield":16:{s:4:"name";s:17:"LineBreakPermitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Work Order|The work order associated with the line break activity when applicable";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"LineBreakID";O:14:"invisiblefield":11:{s:4:"name";s:11:"LineBreakID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:9:"JobNumber";O:9:"viewfield":16:{s:4:"name";s:9:"JobNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:150:"Job Number|The unique number assigned to the job requiring a line break. This number is typically assigned by an engineering or maintenance dapartment";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"PermitNumber";O:9:"viewfield":16:{s:4:"name";s:12:"PermitNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:243:"Permit Number|The unique number assigned to the permit used for line breaking and placed at the line break area during the event.  The permit ID can be used as the permit number because it is a unique, automatically generated, numbering system";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"WorkOrder";O:9:"viewfield":16:{s:4:"name";s:9:"WorkOrder";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Work Order|The work order associated with the line break activity when applicable";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"RequestTime";O:9:"viewfield":16:{s:4:"name";s:11:"RequestTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Request Date|The date and time the hot work permit was requested";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"LineBreakTime";O:9:"viewfield":16:{s:4:"name";s:13:"LineBreakTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Line Break Date|The date and time the line break is scheduled to occur";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LineBreakShift";O:9:"viewfield":16:{s:4:"name";s:14:"LineBreakShift";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Line Break Shift|The shift during which the line break occurred";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationTime";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:143:"Expiration Date|The date and time the line break permit is scheduled to expire and no longer be valid to authorize the line breaking activities";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Organization|The name of the organization where the line breaking activity occurs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Location|Specific area within the facility where the line breaking activity occurs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"LineBreakCategory";O:9:"viewfield":16:{s:4:"name";s:17:"LineBreakCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Category|A broad categoy used to group line breaks of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"LineBreakType";O:9:"viewfield":16:{s:4:"name";s:13:"LineBreakType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Line Break Type|A combined field used to describe this line break type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"LineBreak";O:9:"viewfield":16:{s:4:"name";s:9:"LineBreak";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:95:"Line Break|A combined field used to describe this line break when issuing line breaking permits";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"System";O:9:"viewfield":16:{s:4:"name";s:6:"System";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"System|The specific system involved in the line breaking activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Last Review|The date of the last formal review of the line break activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"LineBreakDesc";O:9:"viewfield":16:{s:4:"name";s:13:"LineBreakDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:123:"Description|A detailed description of this line breaking activity and any special characteristics associated with the break";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:129:"Person Accountable|The individual assigned primary accountability for managing the risks associated with this line break activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ContactCard";O:9:"viewfield":16:{s:4:"name";s:11:"ContactCard";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:153:"Accountable Contact|The contact information of the person assigned primary accountability for managing the risks associated with this line break activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"PerformerRelationship";O:9:"viewfield":16:{s:4:"name";s:21:"PerformerRelationship";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:138:"Performer Relationship|The relationship of the person performing the line break activity to the organization where the activity will occur";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"PerformedBy";O:9:"viewfield":16:{s:4:"name";s:11:"PerformedBy";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Performed By|The qualified person performing the actual line breaking activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"ERTMember";O:9:"viewfield":16:{s:4:"name";s:9:"ERTMember";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:235:"Emergency Response Team Member|The name of the emergency response team member that has been contacted in advance of the line break and who remains available in the event that a containment response or emergency rescue becomes necessary";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ERTContactCard";O:9:"viewfield":16:{s:4:"name";s:14:"ERTContactCard";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"ERT Contact|The contact information of the emergency response team member assigned to monitor the line break activity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"EmergencyPhone";O:9:"viewfield":16:{s:4:"name";s:14:"EmergencyPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Emergency Phone|Telephone number to be called in the case of a line break emergency";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:23:"PerformerRelationshipID";O:14:"coderadiofield":29:{s:4:"name";s:23:"PerformerRelationshipID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'47\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'47\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"PerformedByID";O:16:"personcombofield":29:{s:4:"name";s:13:"PerformedByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:17:"PerformedByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"PermitIssuedByID";O:16:"personcombofield":29:{s:4:"name";s:16:"PermitIssuedByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:20:"PermitIssuedByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"SupervisorID";O:16:"personcombofield":29:{s:4:"name";s:12:"SupervisorID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:16:"SupervisorID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"AttendantID";O:16:"personcombofield":29:{s:4:"name";s:11:"AttendantID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:15:"AttendantID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"AtmosphereTesterID";O:16:"personcombofield":29:{s:4:"name";s:18:"AtmosphereTesterID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:22:"AtmosphereTesterID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"ERTMemberID";O:16:"personcombofield":29:{s:4:"name";s:11:"ERTMemberID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"lbrp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:15:"ERTMemberID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Line Breaking Permit");

//field value array
$data = array(
        'LineBreakPermitID' => '',
         'LineBreakID' => '',
         'JobNumber' => '',
         'PermitNumber' => '',
         'WorkOrder' => '',
         'RequestTime' => '',
         'LineBreakTime' => '',
         'LineBreakShift' => '',
         'ExpirationTime' => '',
         'Organization' => '',
         'Location' => '',
         'LineBreakCategory' => '',
         'LineBreakType' => '',
         'LineBreak' => '',
         'System' => '',
         'LastReviewDate' => '',
         'LineBreakDesc' => '',
         'PersonAccountable' => '',
         'ContactCard' => '',
         'PerformerRelationship' => '',
         'PerformedBy' => '',
         'ERTMember' => '',
         'ERTContactCard' => '',
         'EmergencyPhone' => '',
         'PerformerRelationshipID' => '',
         'PerformedByID' => '',
         'PermitIssuedByID' => '',
         'SupervisorID' => '',
         'AttendantID' => '',
         'AtmosphereTesterID' => '',
         'ERTMemberID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LineBreakPermitID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `lbrp`.LineBreakPermitID,
   `lbrp`.LineBreakID,
   `lbrp`.JobNumber,
   `lbrp`.PermitNumber,
   NULLIF(CONCAT(IFNULL(`wrk1`.WorkOrderTitle,'')),'') AS WorkOrder,
   `dat1`.RelatedDate AS RequestTime,
   `dat2`.RelatedDate AS LineBreakTime,
   `cod1`.Description AS LineBreakShift,
   `dat3`.RelatedDate AS ExpirationTime,
   `org2`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `cod2`.Description AS LineBreakCategory,
   NULLIF(CONCAT(IFNULL(`lbrt1`.LineBreakTitle,'')),'') AS LineBreakType,
   NULLIF(CONCAT(IFNULL(`lbr1`.LineBreakTitle,'')),'') AS LineBreak,
   NULLIF(CONCAT(IFNULL(`sys1`.SystemName,'')),'') AS System,
   `dat4`.RelatedDate AS LastReviewDate,
   `lbr1`.LineBreakDesc AS LineBreakDesc,
   `ppl1`.DisplayName AS PersonAccountable,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkPhone,''),', ext. ',IFNULL(`ppl1`.WorkExtension,''),' (work)','<br />',IFNULL(`ppl1`.MobilePhone,''),' (mobile)','<br />',IFNULL(`ppl1`.WorkFax,''),' (fax)',' <br /><a href=\"mailto:',IFNULL(`ppl1`.WorkEmail,''),'\">',IFNULL(`ppl1`.WorkEmail,''),'</a>'),', ext.  (work)<br /> (mobile)<br /> (fax) <br /><a href=\\\"mailto:\\\"></a>') AS ContactCard,
   `cod3`.Description AS PerformerRelationship,
   `ppl4`.DisplayName AS PerformedBy,
   `ppl7`.DisplayName AS ERTMember,
   NULLIF(CONCAT(IFNULL(`ppl7`.WorkPhone,''),', ext. ',IFNULL(`ppl7`.WorkExtension,''),' (work)','<br />',IFNULL(`ppl7`.MobilePhone,''),' (mobile)','<br />',IFNULL(`ppl7`.WorkFax,''),' (fax)',' <br /><a href=\"mailto:',IFNULL(`ppl7`.WorkEmail,''),'\">',IFNULL(`ppl7`.WorkEmail,''),'</a>'),', ext.  (work)<br /> (mobile)<br /> (fax) <br /><a href=\\\"mailto:\\\"></a>') AS ERTContactCard,
   `lbr1`.EmergencyPhone AS EmergencyPhone,
   `lbrp`.PerformerRelationshipID,
   `inv3`.PersonInvolvedID AS PerformedByID,
   `ppl2`.DisplayName AS PermitIssuedBy,
   `inv1`.PersonInvolvedID AS PermitIssuedByID,
   `ppl3`.DisplayName AS Supervisor,
   `inv2`.PersonInvolvedID AS SupervisorID,
   `ppl5`.DisplayName AS Attendant,
   `inv4`.PersonInvolvedID AS AttendantID,
   `ppl6`.DisplayName AS AtmosphereTester,
   `inv5`.PersonInvolvedID AS AtmosphereTesterID,
   `inv6`.PersonInvolvedID AS ERTMemberID,
   NULLIF(CONCAT(IFNULL(`lbrp`.PermitNumber,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`lbrt1`.LineBreakTitle,'')),''),''),' | ',IFNULL(`org2`.Name,''),' | ',IFNULL(`dat2`.RelatedDate,'')),' |  |  | ') AS RecordLabel,
   `lbr1`.OrganizationID AS OrganizationID
FROM `lbrp`
   
     LEFT OUTER JOIN `wrk` AS wrk1 
   ON (`lbrp`.WorkOrderID = `wrk1`.WorkOrderID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`lbrp`.LineBreakPermitID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'lbrp'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '50')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`lbrp`.LineBreakPermitID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'lbrp'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '7')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`lbrp`.LineBreakShiftID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '183')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`lbrp`.LineBreakPermitID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'lbrp'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '10')
     LEFT OUTER JOIN `lbr` AS lbr1 
   ON (`lbrp`.LineBreakID = `lbr1`.LineBreakID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`lbrp`.PerformerRelationshipID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '47')
     LEFT OUTER JOIN `inv` AS inv3 
    ON (`lbrp`.LineBreakPermitID = `inv3`.SourceRecordID 
     AND `inv3`.SourceModuleID = 'lbrp'
     AND `inv3`._Deleted = 0
     AND `inv3`.InvolvementDescriptorID = '50')
     LEFT OUTER JOIN `inv` AS inv6 
    ON (`lbrp`.LineBreakPermitID = `inv6`.SourceRecordID 
     AND `inv6`.SourceModuleID = 'lbrp'
     AND `inv6`._Deleted = 0
     AND `inv6`.InvolvementDescriptorID = '23')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`lbrp`.LineBreakPermitID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'lbrp'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '49')
     LEFT OUTER JOIN `inv` AS inv2 
    ON (`lbrp`.LineBreakPermitID = `inv2`.SourceRecordID 
     AND `inv2`.SourceModuleID = 'lbrp'
     AND `inv2`._Deleted = 0
     AND `inv2`.InvolvementDescriptorID = '51')
     LEFT OUTER JOIN `inv` AS inv4 
    ON (`lbrp`.LineBreakPermitID = `inv4`.SourceRecordID 
     AND `inv4`.SourceModuleID = 'lbrp'
     AND `inv4`._Deleted = 0
     AND `inv4`.InvolvementDescriptorID = '48')
     LEFT OUTER JOIN `inv` AS inv5 
    ON (`lbrp`.LineBreakPermitID = `inv5`.SourceRecordID 
     AND `inv5`.SourceModuleID = 'lbrp'
     AND `inv5`._Deleted = 0
     AND `inv5`.InvolvementDescriptorID = '47')
     LEFT OUTER JOIN `org` AS org2 
   ON (`lbr1`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`lbr1`.LineBreakID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'lbr'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `lbrt` AS lbrt1 
   ON (`lbr1`.LineBreakTypeID = `lbrt1`.LineBreakTypeID )
     LEFT OUTER JOIN `sys` AS sys1 
   ON (`lbr1`.SystemID = `sys1`.SystemID )
     LEFT OUTER JOIN `dat` AS dat4 
    ON (`lbr1`.LineBreakID = `dat4`.SourceRecordID 
     AND `dat4`.SourceModuleID = 'lbr'
     AND `dat4`._Deleted = 0
     AND `dat4`.DateDescriptorID = '20')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`lbr1`.LineBreakID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'lbr'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '154')
     LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl4 
   ON (`inv3`.PersonInvolvedID = `ppl4`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl7 
   ON (`inv6`.PersonInvolvedID = `ppl7`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`inv2`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl5 
   ON (`inv4`.PersonInvolvedID = `ppl5`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl6 
   ON (`inv5`.PersonInvolvedID = `ppl6`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`lbrt1`.LineBreakCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '69')
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   lbrp.LineBreakPermitID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Line Breaking Permit");
        $screenPhrase = gettext("Assignments|Assign specific responsibilities for a line breaking permit");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Line Breaking Permits");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LineBreakPermitID' => gettext("Work Order|The work order associated with the line break activity when applicable"),
   'LineBreakID' => gettext("Line Break|A combined field used to describe this line break when issuing line breaking permits"),
   'JobNumber' => gettext("Job Number|The unique number assigned to the job requiring a line break. This number is typically assigned by an engineering or maintenance dapartment"),
   'PermitNumber' => gettext("Permit Number|The unique number assigned to the permit used for line breaking and placed at the line break area during the event.  The permit ID can be used as the permit number because it is a unique, automatically generated, numbering system"),
   'WorkOrder' => gettext("Work Order|The work order associated with the line break activity when applicable"),
   'RequestTime' => gettext("Request Date|The date and time the hot work permit was requested"),
   'LineBreakTime' => gettext("Line Break Date|The date and time the line break is scheduled to occur"),
   'LineBreakShift' => gettext("Line Break Shift|The shift during which the line break occurred"),
   'ExpirationTime' => gettext("Expiration Date|The date and time the line break permit is scheduled to expire and no longer be valid to authorize the line breaking activities"),
   'Organization' => gettext("Organization|The name of the organization where the line breaking activity occurs"),
   'Location' => gettext("Location|Specific area within the facility where the line breaking activity occurs"),
   'LineBreakCategory' => gettext("Category|A broad categoy used to group line breaks of similar types"),
   'LineBreakType' => gettext("Line Break Type|A combined field used to describe this line break type when associating it with other records"),
   'LineBreak' => gettext("Line Break|A combined field used to describe this line break when issuing line breaking permits"),
   'System' => gettext("System|The specific system involved in the line breaking activity"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the line break activity"),
   'LineBreakDesc' => gettext("Description|A detailed description of this line breaking activity and any special characteristics associated with the break"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the risks associated with this line break activity"),
   'ContactCard' => gettext("Accountable Contact|The contact information of the person assigned primary accountability for managing the risks associated with this line break activity"),
   'PerformerRelationship' => gettext("Performer Relationship|The relationship of the person performing the line break activity to the organization where the activity will occur"),
   'PerformedBy' => gettext("Performed By|The qualified person performing the actual line breaking activity"),
   'ERTMember' => gettext("Emergency Response Team Member|The name of the emergency response team member that has been contacted in advance of the line break and who remains available in the event that a containment response or emergency rescue becomes necessary"),
   'ERTContactCard' => gettext("ERT Contact|The contact information of the emergency response team member assigned to monitor the line break activity"),
   'EmergencyPhone' => gettext("Emergency Phone|Telephone number to be called in the case of a line break emergency"),
   'PerformerRelationshipID' => gettext("Performer Relationship|The relationship of the person performing the line break activity to the organization where the activity will occur"),
   'PerformedByID' => gettext("Performed By|The qualified person performing the actual line breaking activity"),
   'PermitIssuedByID' => gettext("Permit Issued By|The name of the person issuing the line breaking permit"),
   'SupervisorID' => gettext("Supervisor|The supervisor of the area where the line breaking permit is to occur"),
   'AttendantID' => gettext("Attendant|The name of the person assigned to attend the confined space entry and maintain contact with the entrant. The attendant is also responsible for maintaining contact with emergency responders and initiating emergency response activities if the entry person encounters difficulties"),
   'AtmosphereTesterID' => gettext("Atmosphere Tester|The name of the person conducting atmosphere testing and monitoring of the environment adjacent to the line break area"),
   'ERTMemberID' => gettext("Emergency Response Team Member|The name of the emergency response team member that has been contacted in advance of the line break and who remains available in the event that a containment response or emergency rescue becomes necessary")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['PerformerRelationshipID'], ShortPhrase($phrases['PerformerRelationshipID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PerformerRelationshipID']->invalid = TRUE;
            }
$vMsg = Validate($data['PerformedByID'], ShortPhrase($phrases['PerformedByID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PerformedByID']->invalid = TRUE;
            }
$vMsg = Validate($data['PermitIssuedByID'], ShortPhrase($phrases['PermitIssuedByID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PermitIssuedByID']->invalid = TRUE;
            }
$vMsg = Validate($data['SupervisorID'], ShortPhrase($phrases['SupervisorID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SupervisorID']->invalid = TRUE;
            }
$vMsg = Validate($data['AttendantID'], ShortPhrase($phrases['AttendantID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AttendantID']->invalid = TRUE;
            }
$vMsg = Validate($data['AtmosphereTesterID'], ShortPhrase($phrases['AtmosphereTesterID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AtmosphereTesterID']->invalid = TRUE;
            }
$vMsg = Validate($data['ERTMemberID'], ShortPhrase($phrases['ERTMemberID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ERTMemberID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Line Breaking Permits"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Line Breaking Permit") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a line breaking permit") );
      $tempTabs['Assignment'] = array( "", gettext("Assignments|Assign specific responsibilities for a line breaking permit") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the line breaking permit") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the line breaking permit") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the line breaking permit") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View forms and reports associated with line breaking permits") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Assignment'] = array( "", gettext("New Permit") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>