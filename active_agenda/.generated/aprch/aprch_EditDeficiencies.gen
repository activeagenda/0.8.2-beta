<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:8:{s:18:"ChecklistHistoryID";O:9:"viewfield":16:{s:4:"name";s:18:"ChecklistHistoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Report ID|An automatically assigned number used to track checklist review histories";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ChecklistID";O:9:"viewfield":16:{s:4:"name";s:11:"ChecklistID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Checklist|A combined field used to describe this record when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"ChecklistOrganization";O:9:"viewfield":16:{s:4:"name";s:21:"ChecklistOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Checklist Organization|The name of the organization associated with the checklist";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Checklist";O:9:"viewfield":16:{s:4:"name";s:9:"Checklist";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Checklist|A combined field used to describe this record when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"ChecklistDesc";O:9:"viewfield":16:{s:4:"name";s:13:"ChecklistDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Description|A detailed description of the checklist\'s scope, purpose, and objective";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ReviewLeader";O:9:"viewfield":16:{s:4:"name";s:12:"ReviewLeader";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:65:"Review Leader|The name of the person leading the checklist review";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ReviewDate";O:9:"viewfield":16:{s:4:"name";s:10:"ReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Review Date|Date the checklist review was performed";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Deficiencies";O:9:"viewfield":16:{s:4:"name";s:12:"Deficiencies";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:137:"Number of Deficiencies|An automatically calulated value associated with the number of deficiencies identified during the checklist review";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Checklist History");

//field value array
$data = array(
        'ChecklistHistoryID' => '',
         'ChecklistID' => '',
         'ChecklistOrganization' => '',
         'Checklist' => '',
         'ChecklistDesc' => '',
         'ReviewLeader' => '',
         'ReviewDate' => '',
         'Deficiencies' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1742:"SELECT 
   `aprcd`.ChecklistDeficiencyID,
   `org1`.Name AS ReviewOrganization,
   `apr1`.ReviewOrganizationID AS ReviewOrganizationID,
   NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS ReviewLocation,
   `orgla1`.LocationID AS ReviewLocationID,
   NULLIF(CONCAT(IFNULL(`apr1`.AssetProtectTitle,\'\')),\'\') AS AssetProtect,
   `aprcd`.AssetProtectID,
   `aprcd`.DeficiencyTitle,
   `aprcd`.Deficiency,
   `aprcd`.Remediation,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `cod1`.Description AS DeficiencyStatus,
   `aprcd`.DeficiencyStatusID
FROM `aprcd`
   
     LEFT OUTER JOIN `apr` AS apr1 
   ON (`aprcd`.AssetProtectID = `apr1`.AssetProtectID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`aprcd`.ChecklistDeficiencyID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'aprcd\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'12\')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`aprcd`.DeficiencyStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'131\')
     LEFT OUTER JOIN `org` AS org1 
   ON (`apr1`.ReviewOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr1`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'apr\'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   aprcd.ChecklistDeficiencyID=\'/**RowID**/\'";s:9:"getRowSQL";s:1185:"SELECT 
   `aprcd`.ChecklistDeficiencyID,
   `org1`.Name AS ReviewOrganization,
   NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS ReviewLocation,
   NULLIF(CONCAT(IFNULL(`apr1`.AssetProtectTitle,\'\')),\'\') AS AssetProtect,
   `aprcd`.DeficiencyTitle,
   `cod1`.Description AS DeficiencyStatus,
   `apr1`.ReviewOrganizationID AS ReviewOrganizationID
FROM `aprcd`
   
     LEFT OUTER JOIN `apr` AS apr1 
   ON (`aprcd`.AssetProtectID = `apr1`.AssetProtectID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`aprcd`.DeficiencyStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'131\')
     LEFT OUTER JOIN `org` AS org1 
   ON (`apr1`.ReviewOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr1`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'apr\'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   aprcd.ChecklistDeficiencyID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:9:{s:21:"ChecklistDeficiencyID";O:14:"invisiblefield":11:{s:4:"name";s:21:"ChecklistDeficiencyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:113:"Record ID|An automatically assigned number used to track checklist review deficiencies and remediation activities";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:20:"ReviewOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:20:"ReviewOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Review Organization|The organization where this item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"ReviewLocationID";a:1:{s:4:"name";s:16:"ReviewLocationID";}}s:8:"moduleID";s:5:"aprcd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:16:"ReviewLocationID";O:10:"combofield":26:{s:4:"name";s:16:"ReviewLocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Review Location|Specific location within the facility where the item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"orgl";s:10:"foreignKey";s:10:"LocationID";s:12:"foreignField";s:8:"Location";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:371:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE orgl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:369:"SELECT 
`orgl`.LocationID AS ID, NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl`.LocationName),\'\') AS Name, `orgl`.OrganizationID AS ParentID FROM `orgl`
 
 LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )

WHERE `orgl`.LocationID = \'/*recordID*/\'";s:11:"parentField";s:20:"ReviewOrganizationID";s:21:"parentListModuleField";s:14:"OrganizationID";s:11:"childFields";a:1:{s:14:"AssetProtectID";a:1:{s:4:"name";s:14:"AssetProtectID";}}s:8:"moduleID";s:5:"aprcd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`orgl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"AssetProtectID";O:10:"combofield":26:{s:4:"name";s:14:"AssetProtectID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Item|A combined field used to describe this checklist item when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"apr";s:10:"foreignKey";s:14:"AssetProtectID";s:12:"foreignField";s:12:"AssetProtect";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:351:"SELECT 
`apr`.AssetProtectID AS ID, NULLIF(CONCAT(IFNULL(`apr`.AssetProtectTitle,\'\')),\'\') AS Name, `orgla1`.LocationID AS ParentID FROM `apr`
 
 LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'apr\'
     AND `orgla1`._Deleted = 0)
WHERE apr._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:353:"SELECT 
`apr`.AssetProtectID AS ID, NULLIF(CONCAT(IFNULL(`apr`.AssetProtectTitle,\'\')),\'\') AS Name, `orgla1`.LocationID AS ParentID FROM `apr`
 
 LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'apr\'
     AND `orgla1`._Deleted = 0)

WHERE `apr`.AssetProtectID = \'/*recordID*/\'";s:11:"parentField";s:16:"ReviewLocationID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"aprcd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:34:"`apr`.ReviewOrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:15:"DeficiencyTitle";O:9:"editfield":14:{s:4:"name";s:15:"DeficiencyTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Deficiency Title|A short phrase or title used to identify the deficiency identified";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:10:"Deficiency";O:9:"memofield":15:{s:4:"name";s:10:"Deficiency";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Deficiency|A detailed description of the deficiency identified";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:11:"Remediation";O:9:"memofield":15:{s:4:"name";s:11:"Remediation";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Remedy|A detailed description of the remediation steps taken and/or suggested";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:122:"Person Accountable|The name of the individual assigned primary accountability for mitigating the checklist item deficiency";s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"aprcd";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:18:"DeficiencyStatusID";O:14:"codecombofield":27:{s:4:"name";s:18:"DeficiencyStatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Deficiency Status|Mitigation status of the identified deficiency";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'131\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'131\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"aprcd";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"131";}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:21:"ChecklistDeficiencyID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"aprcd";s:6:"phrase";s:22:"Checklist Deficiencies";s:6:"number";i:1;s:6:"Fields";a:6:{s:21:"ChecklistDeficiencyID";O:14:"invisiblefield":11:{s:4:"name";s:21:"ChecklistDeficiencyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:113:"Record ID|An automatically assigned number used to track checklist review deficiencies and remediation activities";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:18:"ReviewOrganization";O:9:"viewfield":16:{s:4:"name";s:18:"ReviewOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Review Organization|The organization where this item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ReviewLocation";O:9:"viewfield":16:{s:4:"name";s:14:"ReviewLocation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Review Location|Specific location within the facility where the item is located and can be reviewed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"AssetProtect";O:9:"viewfield":16:{s:4:"name";s:12:"AssetProtect";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Item|A combined field used to describe this checklist item when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"DeficiencyTitle";O:9:"viewfield":16:{s:4:"name";s:15:"DeficiencyTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Deficiency Title|A short phrase or title used to identify the deficiency identified";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"DeficiencyStatus";O:9:"viewfield":16:{s:4:"name";s:16:"DeficiencyStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Deficiency Status|Mitigation status of the identified deficiency";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"aprcd";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:117:"SELECT 
    count(*) 
FROM `aprcd`
   
WHERE aprcd._Deleted = 0
   AND `aprcd`.ChecklistHistoryID = \'/**RecordID**/\'
";s:7:"listSQL";s:1176:"SELECT 
   `aprcd`.ChecklistDeficiencyID,
`apr1`.ReviewOrganizationID AS ReviewOrganizationID,
`org1`.Name AS ReviewOrganization,
NULLIF(CONCAT_WS(\', \',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),\'\') AS ReviewLocation,
NULLIF(CONCAT(IFNULL(`apr1`.AssetProtectTitle,\'\')),\'\') AS AssetProtect,
`aprcd`.DeficiencyTitle,
`cod1`.Description AS DeficiencyStatus
FROM `aprcd`

   LEFT OUTER JOIN `apr` AS apr1 
   ON (`aprcd`.AssetProtectID = `apr1`.AssetProtectID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`aprcd`.DeficiencyStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'131\')
   LEFT OUTER JOIN `org` AS org1 
   ON (`apr1`.ReviewOrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`apr1`.AssetProtectID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = \'apr\'
     AND `orgla1`._Deleted = 0)
   LEFT OUTER JOIN `orgl` AS orgl1 
ON (`orgla1`.LocationID = `orgl1`.LocationID )
   LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
   LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE aprcd._Deleted = 0
AND `aprcd`.ChecklistHistoryID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:18:"ChecklistHistoryID";s:9:"parentKey";s:18:"ChecklistHistoryID";s:8:"PKFields";a:1:{i:0;s:21:"ChecklistDeficiencyID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'ChecklistHistoryID';

    $ownerField = 'ChecklistOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `aprch`.ChecklistHistoryID,
   `aprch`.ChecklistID,
   `org1`.Name AS ChecklistOrganization,
   NULLIF(CONCAT(IFNULL(`aprc1`.ChecklistTitle,'')),'') AS Checklist,
   `aprc1`.ChecklistDesc AS ChecklistDesc,
   `ppl1`.DisplayName AS ReviewLeader,
   `dat1`.RelatedDate AS ReviewDate,
   `aprch`.Deficiencies,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`aprc1`.ChecklistTitle,'')),''),''),' | ',IFNULL(`dat1`.RelatedDate,''),' | ',IFNULL(`aprch`.Deficiencies,'')),' |  | ') AS RecordLabel,
   `aprc1`.OrganizationID AS ChecklistOrganizationID
FROM `aprch`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`aprch`.ChecklistID = `org1`.OrganizationID )
     LEFT OUTER JOIN `aprc` AS aprc1 
   ON (`aprch`.ChecklistID = `aprc1`.ChecklistID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`aprch`.ChecklistHistoryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'aprch'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '10')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`aprch`.ChecklistHistoryID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'aprch'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '9')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE
   aprch.ChecklistHistoryID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Checklist History");
        $screenPhrase = gettext("Deficiencies|Track checklist review deficiencies");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Checklist History");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ChecklistHistoryID' => gettext("Report ID|An automatically assigned number used to track checklist review histories"),
   'ChecklistID' => gettext("Checklist|A combined field used to describe this record when associating it with other records"),
   'ChecklistOrganization' => gettext("Checklist Organization|The name of the organization associated with the checklist"),
   'Checklist' => gettext("Checklist|A combined field used to describe this record when associating it with other records"),
   'ChecklistDesc' => gettext("Description|A detailed description of the checklist's scope, purpose, and objective"),
   'ReviewLeader' => gettext("Review Leader|The name of the person leading the checklist review"),
   'ReviewDate' => gettext("Review Date|Date the checklist review was performed"),
   'Deficiencies' => gettext("Number of Deficiencies|An automatically calulated value associated with the number of deficiencies identified during the checklist review")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Checklist Histories"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Checklist History") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about checklist reviews") );
      $tempTabs['Deficiencies'] = array( "", gettext("Deficiencies|Track checklist review deficiencies") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the checklist history") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the checklist history") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Deficiencies'] = array( "", gettext("New Checklist History") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>