<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:8:{s:12:"OtherAssetID";O:9:"viewfield":16:{s:4:"name";s:12:"OtherAssetID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Asset ID|An automatically assigned number used to track assets other than chemicals, vehicals, buildings or equipment";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"OtherAssetTypeID";O:14:"invisiblefield":11:{s:4:"name";s:16:"OtherAssetTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:21:"OtherAssetInventoryID";O:14:"invisiblefield":11:{s:4:"name";s:21:"OtherAssetInventoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Organization|The name of the organization responsible for the asset";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Person Accountable|The individual assigned primary accountability for managing this asset";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OtherAssetType";O:9:"viewfield":16:{s:4:"name";s:14:"OtherAssetType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Asset Type|A method of classifying and tracking assets of different types. Asset types are assigned by the parent organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"OtherAsset";O:9:"viewfield":16:{s:4:"name";s:10:"OtherAsset";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Asset|The name of the asset to be protected";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"LossCost";O:9:"viewfield":16:{s:4:"name";s:8:"LossCost";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:188:"Loss Cost|The financial cost of losses associated with this asset at this specific location as of the Calculation Date, stated in the currency assigned to this installation of the software";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Other Asset Inventory Item");

//field value array
$data = array(
        'OtherAssetID' => '',
         'OtherAssetTypeID' => '',
         'OtherAssetInventoryID' => '',
         'Organization' => '',
         'PersonAccountable' => '',
         'OtherAssetType' => '',
         'OtherAsset' => '',
         'LossCost' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:914:"SELECT 
   `pkg`.PackagingUnitEquivalentID,
   `cod1`.Description AS FirstUnitCategory,
   `uts1`.UnitCategoryID AS FirstUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS FirstUnit,
   `pkg`.FirstUnitID,
   `pkg`.FirstUnitValue,
   `cod2`.Description AS SecondUnitCategory,
   `uts2`.UnitCategoryID AS SecondUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts2`.UnitName,\'\')),\'\') AS SecondUnit,
   `pkg`.SecondUnitID,
   `pkg`.SecondUnitValue
FROM `pkg`
   
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`pkg`.FirstUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`pkg`.SecondUnitID = `uts2`.UnitID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`uts1`.UnitCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'37\')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`uts2`.UnitCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'37\')
WHERE
   pkg.PackagingUnitEquivalentID=\'/**RowID**/\'";s:9:"getRowSQL";s:515:"SELECT 
   NULLIF(CONCAT(IFNULL(`pkg`.FirstUnitValue,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' \') AS FirstUnitEquivalent,
   NULLIF(CONCAT(IFNULL(`pkg`.SecondUnitValue,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts2`.UnitName,\'\')),\'\'),\'\')),\' \') AS SecondUnitEquivalent
FROM `pkg`
   
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`pkg`.FirstUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`pkg`.SecondUnitID = `uts2`.UnitID )
WHERE
   pkg.PackagingUnitEquivalentID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:25:"PackagingUnitEquivalentID";O:14:"invisiblefield":11:{s:4:"name";s:25:"PackagingUnitEquivalentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Record ID|An automatically assigned number used to associate packaging unit equivalents with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"FirstUnitValue";O:9:"editfield":14:{s:4:"name";s:14:"FirstUnitValue";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:19:"FirstUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:19:"FirstUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"FirstUnitID";a:1:{s:4:"name";s:11:"FirstUnitID";}}s:8:"moduleID";s:3:"pkg";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:11:"FirstUnitID";O:10:"combofield":26:{s:4:"name";s:11:"FirstUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:19:"FirstUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"pkg";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";s:124:"First Equivalent|The value associate with the first packaging unit to be normalized with the second value and packaging unit";s:8:"dataType";s:5:"float";s:8:"validate";s:35:"Number notZero notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}s:15:"SecondUnitValue";O:9:"editfield":14:{s:4:"name";s:15:"SecondUnitValue";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:20:"SecondUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:20:"SecondUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:12:"SecondUnitID";a:1:{s:4:"name";s:12:"SecondUnitID";}}s:8:"moduleID";s:3:"pkg";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:12:"SecondUnitID";O:10:"combofield":26:{s:4:"name";s:12:"SecondUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:20:"SecondUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"pkg";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";s:115:"Second Equivalent|The value associate with the second packaging unit to be normalized with the first value and unit";s:8:"dataType";s:5:"float";s:8:"validate";s:35:"Number notZero notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"10";s:9:"maxLength";s:2:"10";s:5:"align";s:4:"left";}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:25:"PackagingUnitEquivalentID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"pkg";s:6:"phrase";s:16:"Unit Equivalents";s:6:"number";i:1;s:6:"Fields";a:2:{s:19:"FirstUnitEquivalent";O:9:"viewfield":16:{s:4:"name";s:19:"FirstUnitEquivalent";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:125:"First Unit Equivalent|A combined field used to describe this packaging unit equivalent when associating it with other records";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"SecondUnitEquivalent";O:9:"viewfield":16:{s:4:"name";s:20:"SecondUnitEquivalent";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Second Unit Equivalent|A combined field used to describe this packaging unit equivalent when associating it with other records";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"pkg";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:144:"SELECT 
    count(*) 
FROM `pkg`
   
WHERE pkg._Deleted = 0
   AND `pkg`.RelatedModuleID = \'oasin\'
AND `pkg`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:591:"SELECT 
   `pkg`.PackagingUnitEquivalentID,
NULLIF(CONCAT(IFNULL(`pkg`.FirstUnitValue,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\'),\'\')),\' \') AS FirstUnitEquivalent,
NULLIF(CONCAT(IFNULL(`pkg`.SecondUnitValue,\'\'),\' \',IFNULL(NULLIF(CONCAT(IFNULL(`uts2`.UnitName,\'\')),\'\'),\'\')),\' \') AS SecondUnitEquivalent
FROM `pkg`

   LEFT OUTER JOIN `uts` AS uts1 
   ON (`pkg`.FirstUnitID = `uts1`.UnitID )
   LEFT OUTER JOIN `uts` AS uts2 
   ON (`pkg`.SecondUnitID = `uts2`.UnitID )
WHERE pkg._Deleted = 0
AND `pkg`.RelatedModuleID = \'oasin\'
AND `pkg`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:21:"OtherAssetInventoryID";s:8:"PKFields";a:1:{i:0;s:25:"PackagingUnitEquivalentID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:5:"oasin";}}');


    /**guidanceGrid**/

    $PKField = 'OtherAssetInventoryID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "FileRetention";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `oasin`.OtherAssetID,
   `oas1`.OtherAssetTypeID AS OtherAssetTypeID,
   `oasin`.OtherAssetInventoryID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS OtherAssetType,
   NULLIF(CONCAT(IFNULL(`oas1`.OtherAssetTitle,'')),'') AS OtherAsset,
   `oasin`.LossCost,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`oas1`.OtherAssetTitle,'')),''),''),' | ',IFNULL(`org1`.Name,''),' | ',IFNULL(NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),''),''),' | ',IFNULL(`oasin`.TrackingNumber,'')),' |  |  | ') AS RecordLabel,
   `oasin`.OrganizationID
FROM `oasin`
   
     LEFT OUTER JOIN `oas` AS oas1 
   ON (`oasin`.OtherAssetID = `oas1`.OtherAssetID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`oasin`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`oasin`.OtherAssetInventoryID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'oasin'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '65')
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`oasin`.OtherAssetInventoryID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'oasin'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`oas1`.OtherAssetTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '23')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   oasin.OtherAssetInventoryID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Other Asset Inventory Item");
        $screenPhrase = gettext("Equivalents|Associate an asset with equivalent packaging units");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Other Asset Inventory");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'OtherAssetID' => gettext("Asset ID|An automatically assigned number used to track assets other than chemicals, vehicals, buildings or equipment"),
   'OtherAssetTypeID' => gettext("Asset Type|A method of classifying and tracking others assets of different types. Other asset types are assigned by the parent organization"),
   'OtherAssetInventoryID' => gettext("Record ID|An automatically assigned number used to track assets inventory"),
   'Organization' => gettext("Organization|The name of the organization responsible for the asset"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing this asset"),
   'OtherAssetType' => gettext("Asset Type|A method of classifying and tracking assets of different types. Asset types are assigned by the parent organization"),
   'OtherAsset' => gettext("Asset|The name of the asset to be protected"),
   'LossCost' => gettext("Loss Cost|The financial cost of losses associated with this asset at this specific location as of the Calculation Date, stated in the currency assigned to this installation of the software")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Other Asset Inventory Items"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Other Asset Inventory Item") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an asset inventory item") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the asset") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the asset") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the asset") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the asset") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the asset") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the asset") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the asset") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Assign organizational level responsibilities to the asset") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the asset") );
      $tempTabs['BusinessContinuation'] = array( "edit.php?scr=BusinessContinuation&$tabsQS", gettext("Continuity|Associate business continuation requirements with the asset") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate business agreements and/or contracts with the asset") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the asset") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the asset") );
      $tempTabs['PackagingEquivalents'] = array( "", gettext("Equivalents|Associate an asset with equivalent packaging units") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the asset") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the asset") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the asset") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the asset") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the asset") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['PackagingEquivalents'] = array( "", gettext("New Other Asset Inventory Item") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>