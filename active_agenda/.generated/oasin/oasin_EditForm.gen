<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:23:{s:21:"OtherAssetInventoryID";O:9:"viewfield":16:{s:4:"name";s:21:"OtherAssetInventoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Record ID|An automatically assigned number used to track assets inventory";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OtherAssetType";O:9:"viewfield":16:{s:4:"name";s:14:"OtherAssetType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Asset Type|A method of classifying and tracking assets of different types. Asset types are assigned by the parent organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"OtherAsset";O:9:"viewfield":16:{s:4:"name";s:10:"OtherAsset";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Asset|The name of the asset to be protected";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Organization|The name of the organization responsible for the asset";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Location|Specific location within the facility where the asset is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"LossCost";O:9:"viewfield":16:{s:4:"name";s:8:"LossCost";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:188:"Loss Cost|The financial cost of losses associated with this asset at this specific location as of the Calculation Date, stated in the currency assigned to this installation of the software";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"TrackingNumber";O:9:"editfield":14:{s:4:"name";s:14:"TrackingNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:20:"AssetStorageMethodID";O:14:"codecombofield":27:{s:4:"name";s:20:"AssetStorageMethodID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'103\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'103\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"103";}s:8:"BaseUnit";O:9:"viewfield":16:{s:4:"name";s:8:"BaseUnit";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ReOrderQuantity";O:9:"editfield":14:{s:4:"name";s:15:"ReOrderQuantity";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:28:"ReOrderQuantityUoMCategoryID";O:10:"combofield":26:{s:4:"name";s:28:"ReOrderQuantityUoMCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"ReOrderQuantityUoMID";a:1:{s:4:"name";s:20:"ReOrderQuantityUoMID";}}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:20:"ReOrderQuantityUoMID";O:10:"combofield":26:{s:4:"name";s:20:"ReOrderQuantityUoMID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:28:"ReOrderQuantityUoMCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:13:"StartQuantity";O:9:"editfield":14:{s:4:"name";s:13:"StartQuantity";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:26:"StartQuantityUoMCategoryID";O:10:"combofield":26:{s:4:"name";s:26:"StartQuantityUoMCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"StartQuantityUoMID";a:1:{s:4:"name";s:18:"StartQuantityUoMID";}}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:18:"StartQuantityUoMID";O:10:"combofield":26:{s:4:"name";s:18:"StartQuantityUoMID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:26:"StartQuantityUoMCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:9:"StartDate";O:9:"datefield":15:{s:4:"name";s:9:"StartDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:6:"Issued";O:9:"viewfield":16:{s:4:"name";s:6:"Issued";s:10:"parentName";N;s:6:"Fields";a:1:{s:9:"IssuedUoM";O:9:"viewfield":16:{s:4:"name";s:9:"IssuedUoM";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:76:"Issued|The number of items issued or checked out from this specific location";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Returned";O:9:"viewfield":16:{s:4:"name";s:8:"Returned";s:10:"parentName";N;s:6:"Fields";a:1:{s:11:"ReturnedUoM";O:9:"viewfield":16:{s:4:"name";s:11:"ReturnedUoM";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:89:"Returned|The number of items returned or checked in to iventory at this specific location";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Added";O:9:"viewfield":16:{s:4:"name";s:5:"Added";s:10:"parentName";N;s:6:"Fields";a:1:{s:8:"AddedUoM";O:9:"viewfield":16:{s:4:"name";s:8:"AddedUoM";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:78:"Added|New items of this asset added to the inventory at this specific location";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"Transferred";O:9:"viewfield":16:{s:4:"name";s:11:"Transferred";s:10:"parentName";N;s:6:"Fields";a:1:{s:14:"TransferredUoM";O:9:"viewfield":16:{s:4:"name";s:14:"TransferredUoM";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:74:"Transferred|Items of this asset which were transferred to another location";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"PresentQuantity";O:9:"editfield":14:{s:4:"name";s:15:"PresentQuantity";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:28:"PresentQuantityUoMCategoryID";O:10:"combofield":26:{s:4:"name";s:28:"PresentQuantityUoMCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"PresentQuantityUoMID";a:1:{s:4:"name";s:20:"PresentQuantityUoMID";}}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:20:"PresentQuantityUoMID";O:10:"combofield":26:{s:4:"name";s:20:"PresentQuantityUoMID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:28:"PresentQuantityUoMCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:19:"PresentQuantityDate";O:9:"datefield":15:{s:4:"name";s:19:"PresentQuantityDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:23:"PresentQuantityPersonID";O:16:"personcombofield":29:{s:4:"name";s:23:"PresentQuantityPersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"oasin";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:27:"PresentQuantityPersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:24:"BeginningCalculationDate";O:9:"datefield":15:{s:4:"name";s:24:"BeginningCalculationDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:21:"EndingCalculationDate";O:9:"datefield":15:{s:4:"name";s:21:"EndingCalculationDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"LossQuantity";O:9:"viewfield":16:{s:4:"name";s:12:"LossQuantity";s:10:"parentName";N;s:6:"Fields";a:1:{s:15:"LossQuantityUoM";O:9:"viewfield":16:{s:4:"name";s:15:"LossQuantityUoM";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Base Unit|The unit of measure used to normalize inventory and costs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:85:"Loss Quantity|The quantity of asset which cannot be accounted for but is unavailable.";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Other Asset Inventory Item");

//field value array
$data = array(
        'OtherAssetInventoryID' => '',
         'OtherAssetType' => '',
         'OtherAsset' => '',
         'Organization' => '',
         'Location' => '',
         'LossCost' => '',
         'PersonAccountableID' => '',
         'TrackingNumber' => '',
         'AssetStorageMethodID' => '',
         'BaseUnit' => '',
         'ReOrderQuantityUoMCategoryID' => '',
         'ReOrderQuantityUoMID' => '',
         'ReOrderQuantity' => '',
         'StartQuantityUoMCategoryID' => '',
         'StartQuantityUoMID' => '',
         'StartQuantity' => '',
         'StartDate' => '',
         'IssuedUoM' => '',
         'Issued' => '',
         'ReturnedUoM' => '',
         'Returned' => '',
         'AddedUoM' => '',
         'Added' => '',
         'TransferredUoM' => '',
         'Transferred' => '',
         'PresentQuantityUoMCategoryID' => '',
         'PresentQuantityUoMID' => '',
         'PresentQuantity' => '',
         'PresentQuantityDate' => '',
         'PresentQuantityPersonID' => '',
         'BeginningCalculationDate' => '',
         'EndingCalculationDate' => '',
         'LossQuantityUoM' => '',
         'LossQuantity' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'OtherAssetInventoryID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "AssetProtection";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `oasin`.OtherAssetInventoryID,
   `cod1`.Description AS OtherAssetType,
   NULLIF(CONCAT(IFNULL(`oas1`.OtherAssetTitle,'')),'') AS OtherAsset,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `oasin`.LossCost,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `oasin`.TrackingNumber,
   `cod2`.Description AS AssetStorageMethod,
   `oasin`.AssetStorageMethodID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),'') AS BaseUnit,
   `cod3`.Description AS ReOrderQuantityUoMCategory,
   `uts2`.UnitCategoryID AS ReOrderQuantityUoMCategoryID,
   NULLIF(CONCAT(IFNULL(`uts2`.UnitName,'')),'') AS ReOrderQuantityUoM,
   `oasin`.ReOrderQuantityUoMID,
   `oasin`.ReOrderQuantity,
   `cod4`.Description AS StartQuantityUoMCategory,
   `uts3`.UnitCategoryID AS StartQuantityUoMCategoryID,
   NULLIF(CONCAT(IFNULL(`uts3`.UnitName,'')),'') AS StartQuantityUoM,
   `oasin`.StartQuantityUoMID,
   `oasin`.StartQuantity,
   `oasin`.StartDate,
   NULLIF(CONCAT(IFNULL(`uts4`.UnitName,'')),'') AS IssuedUoM,
   `oasin`.Issued,
   NULLIF(CONCAT(IFNULL(`uts5`.UnitName,'')),'') AS ReturnedUoM,
   `oasin`.Returned,
   NULLIF(CONCAT(IFNULL(`uts6`.UnitName,'')),'') AS AddedUoM,
   `oasin`.Added,
   NULLIF(CONCAT(IFNULL(`uts7`.UnitName,'')),'') AS TransferredUoM,
   `oasin`.Transferred,
   `cod9`.Description AS PresentQuantityUoMCategory,
   `uts8`.UnitCategoryID AS PresentQuantityUoMCategoryID,
   NULLIF(CONCAT(IFNULL(`uts8`.UnitName,'')),'') AS PresentQuantityUoM,
   `oasin`.PresentQuantityUoMID,
   `oasin`.PresentQuantity,
   `oasin`.PresentQuantityDate,
   `ppl2`.DisplayName AS PresentQuantityPerson,
   `inv1`.PersonInvolvedID AS PresentQuantityPersonID,
   `oasin`.BeginningCalculationDate,
   `oasin`.EndingCalculationDate,
   NULLIF(CONCAT(IFNULL(`uts9`.UnitName,'')),'') AS LossQuantityUoM,
   `oasin`.LossQuantity,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`oas1`.OtherAssetTitle,'')),''),''),' | ',IFNULL(`org1`.Name,''),' | ',IFNULL(NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),''),''),' | ',IFNULL(`oasin`.TrackingNumber,'')),' |  |  | ') AS RecordLabel,
   `oasin`.OrganizationID
FROM `oasin`
   
     LEFT OUTER JOIN `oas` AS oas1 
   ON (`oasin`.OtherAssetID = `oas1`.OtherAssetID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`oasin`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`oasin`.OtherAssetInventoryID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'oasin'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`oasin`.OtherAssetInventoryID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'oasin'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '65')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`oasin`.AssetStorageMethodID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '103')
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`oasin`.ReOrderQuantityUoMID = `uts2`.UnitID )
     LEFT OUTER JOIN `uts` AS uts3 
   ON (`oasin`.StartQuantityUoMID = `uts3`.UnitID )
     LEFT OUTER JOIN `uts` AS uts4 
   ON (`oasin`.IssuedUoMID = `uts4`.UnitID )
     LEFT OUTER JOIN `uts` AS uts5 
   ON (`oasin`.ReturnedUoMID = `uts5`.UnitID )
     LEFT OUTER JOIN `uts` AS uts6 
   ON (`oasin`.AddedUoMID = `uts6`.UnitID )
     LEFT OUTER JOIN `uts` AS uts7 
   ON (`oasin`.TransferredUoMID = `uts7`.UnitID )
     LEFT OUTER JOIN `uts` AS uts8 
   ON (`oasin`.PresentQuantityUoMID = `uts8`.UnitID )
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`oasin`.OtherAssetInventoryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'oasin'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '61')
     LEFT OUTER JOIN `uts` AS uts9 
   ON (`oasin`.LossQuantityUoMID = `uts9`.UnitID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`oas1`.OtherAssetTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '23')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`oas1`.BaseUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`uts2`.UnitCategoryID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`uts3`.UnitCategoryID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod9 
   ON (`uts8`.UnitCategoryID = `cod9`.CodeID 
     AND `cod9`.CodeTypeID = '37')
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`inv1`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   oasin.OtherAssetInventoryID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Other Asset Inventory Item");
        $screenPhrase = gettext("Form|Edit summary information about an asset inventory item");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Other Asset Inventory");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'OtherAssetInventoryID' => gettext("Record ID|An automatically assigned number used to track assets inventory"),
   'OtherAssetType' => gettext("Asset Type|A method of classifying and tracking assets of different types. Asset types are assigned by the parent organization"),
   'OtherAsset' => gettext("Asset|The name of the asset to be protected"),
   'Organization' => gettext("Organization|The name of the organization responsible for the asset"),
   'Location' => gettext("Location|Specific location within the facility where the asset is located"),
   'LossCost' => gettext("Loss Cost|The financial cost of losses associated with this asset at this specific location as of the Calculation Date, stated in the currency assigned to this installation of the software"),
   'PersonAccountableID' => gettext("Person Accountable|The individual assigned primary accountability for managing this asset"),
   'TrackingNumber' => gettext("Tracking Number|A unique number used by the organization to track specific assets"),
   'AssetStorageMethodID' => gettext("Storage Method|The specific method used to store the asset at this specific location"),
   'BaseUnit' => gettext("Base Unit|The unit of measure used to normalize inventory and costs"),
   'ReOrderQuantity' => gettext("Reorder Quantity|The inventory quantity at which the asset should be ordered to replentish the inventory at this specific location"),
   'StartQuantity' => gettext("Start Quantity|The quantity of asset at this location when tracking begins"),
   'StartDate' => gettext("Start Date|The date the start quantity was entered"),
   'Issued' => gettext("Issued|The number of items issued or checked out from this specific location"),
   'Returned' => gettext("Returned|The number of items returned or checked in to iventory at this specific location"),
   'Added' => gettext("Added|New items of this asset added to the inventory at this specific location"),
   'Transferred' => gettext("Transferred|Items of this asset which were transferred to another location"),
   'PresentQuantity' => gettext("Present Quantity|The present quantity of asset at this location. The present quantity is based on a manual count of items in inventory at this specific location"),
   'PresentQuantityDate' => gettext("Present Quantity Date|An automatically recorded date when the present quantity was appended"),
   'PresentQuantityPersonID' => gettext("Present Quantity Person|The individual determining and recording the present quantity"),
   'BeginningCalculationDate' => gettext("Beginning Calculation Date|The beginning date used for calculating pertinent indicators and losses between the beginning calculation date and ending calculation Date"),
   'EndingCalculationDate' => gettext("Ending Calculation Date|The ending date used for calculating pertinent indicators and losses between the beginning calculation date and ending calculation date"),
   'LossQuantity' => gettext("Loss Quantity|The quantity of asset which cannot be accounted for but is unavailable.")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['TrackingNumber'], ShortPhrase($phrases['TrackingNumber']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TrackingNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['AssetStorageMethodID'], ShortPhrase($phrases['AssetStorageMethodID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AssetStorageMethodID']->invalid = TRUE;
            }
$vMsg = Validate($data['ReOrderQuantity'], ShortPhrase($phrases['ReOrderQuantity']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ReOrderQuantity']->invalid = TRUE;
            }
$vMsg = Validate($data['StartQuantity'], ShortPhrase($phrases['StartQuantity']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['StartQuantity']->invalid = TRUE;
            }
$vMsg = Validate($data['StartDate'], ShortPhrase($phrases['StartDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['StartDate']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentQuantity'], ShortPhrase($phrases['PresentQuantity']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentQuantity']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentQuantityDate'], ShortPhrase($phrases['PresentQuantityDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentQuantityDate']->invalid = TRUE;
            }
$vMsg = Validate($data['PresentQuantityPersonID'], ShortPhrase($phrases['PresentQuantityPersonID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PresentQuantityPersonID']->invalid = TRUE;
            }
$vMsg = Validate($data['BeginningCalculationDate'], ShortPhrase($phrases['BeginningCalculationDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BeginningCalculationDate']->invalid = TRUE;
            }
$vMsg = Validate($data['EndingCalculationDate'], ShortPhrase($phrases['EndingCalculationDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EndingCalculationDate']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Other Asset Inventory Items"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Other Asset Inventory Item") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about an asset inventory item") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the asset") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the asset") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the asset") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the asset") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the asset") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the asset") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the asset") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Assign organizational level responsibilities to the asset") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the asset") );
      $tempTabs['BusinessContinuation'] = array( "edit.php?scr=BusinessContinuation&$tabsQS", gettext("Continuity|Associate business continuation requirements with the asset") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate business agreements and/or contracts with the asset") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the asset") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with the asset") );
      $tempTabs['PackagingEquivalents'] = array( "edit.php?scr=PackagingEquivalents&$tabsQS", gettext("Equivalents|Associate an asset with equivalent packaging units") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the asset") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the asset") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the asset") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the asset") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the asset") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Other Asset Inventory Item") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"StartDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_StartDate\"
});
Calendar.setup({
   inputField : \"PresentQuantityDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_PresentQuantityDate\"
});
Calendar.setup({
   inputField : \"BeginningCalculationDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_BeginningCalculationDate\"
});
Calendar.setup({
   inputField : \"EndingCalculationDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_EndingCalculationDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>