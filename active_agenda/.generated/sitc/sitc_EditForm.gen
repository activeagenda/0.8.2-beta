<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:18:"SituationContactID";O:9:"viewfield":16:{s:4:"name";s:18:"SituationContactID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Record ID|An automatically assigned number used to track contacts assigned to the occurrence of situations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Organization|The name of the organization at risk of encountering the defined situation";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Situation";O:9:"viewfield":16:{s:4:"name";s:9:"Situation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Situation Title|A combined field used to describe this situation when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"LocalDescription";O:9:"viewfield":16:{s:4:"name";s:16:"LocalDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Local Description|An detailed description of the local situation requiring action, communication, or response";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:95:"Contact|The name of the person assigned to the incident response role at this specific location";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"SeverityID";O:10:"combofield":26:{s:4:"name";s:10:"SeverityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"rsks";s:10:"foreignKey";s:10:"SeverityID";s:12:"foreignField";s:8:"Severity";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:324:"SELECT 
`rsks`.SeverityID AS ID, NULLIF(CONCAT(IFNULL(`rsks`.SeverityValue,\'\'),\' - \',IFNULL(`rsks`.RiskSeverityTerm,\'\'),\': Loss cost of \',IFNULL(ROUND(`rsks`.SeverityLowCost, 2),\'\'),\' to \',IFNULL(ROUND(`rsks`.SeverityHighCost, 2),\'\')),\' - : Loss cost of  to \') AS Name FROM `rsks`
WHERE rsks._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:322:"SELECT 
`rsks`.SeverityID AS ID, NULLIF(CONCAT(IFNULL(`rsks`.SeverityValue,\'\'),\' - \',IFNULL(`rsks`.RiskSeverityTerm,\'\'),\': Loss cost of \',IFNULL(ROUND(`rsks`.SeverityLowCost, 2),\'\'),\' to \',IFNULL(ROUND(`rsks`.SeverityHighCost, 2),\'\')),\' - : Loss cost of  to \') AS Name FROM `rsks`

WHERE `rsks`.SeverityID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"sitc";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"ContactImmediacy";O:9:"editfield":14:{s:4:"name";s:16:"ContactImmediacy";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:26:"ContactImmediacyCategoryID";O:10:"combofield":26:{s:4:"name";s:26:"ContactImmediacyCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:23:"ContactImmediacyUnitsID";a:1:{s:4:"name";s:23:"ContactImmediacyUnitsID";}}s:8:"moduleID";s:4:"sitc";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:23:"ContactImmediacyUnitsID";O:10:"combofield":26:{s:4:"name";s:23:"ContactImmediacyUnitsID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:26:"ContactImmediacyCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"sitc";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:14:"SpecialFactors";O:9:"memofield":15:{s:4:"name";s:14:"SpecialFactors";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"LastUpdate";O:9:"datefield":15:{s:4:"name";s:10:"LastUpdate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Situational Contact");

//field value array
$data = array(
        'SituationContactID' => '',
         'Organization' => '',
         'Situation' => '',
         'LocalDescription' => '',
         'PersonAccountable' => '',
         'SeverityID' => '',
         'ContactImmediacyCategoryID' => '',
         'ContactImmediacyUnitsID' => '',
         'ContactImmediacy' => '',
         'SpecialFactors' => '',
         'LastUpdate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'SituationContactID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `sitc`.SituationContactID,
   `org1`.Name AS Organization,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt2`.SituationTitle,'')),''),'')),'') AS Situation,
   `sit1`.LocalDescription AS LocalDescription,
   NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' - ',IFNULL(`org2`.ShortName,'')),' - ') AS PersonAccountable,
   NULLIF(CONCAT(IFNULL(`rsks1`.SeverityValue,''),' - ',IFNULL(`rsks1`.RiskSeverityTerm,''),': Loss cost of ',IFNULL(ROUND(`rsks1`.SeverityLowCost, 2),''),' to ',IFNULL(ROUND(`rsks1`.SeverityHighCost, 2),'')),' - : Loss cost of  to ') AS Severity,
   `sitc`.SeverityID,
   `cod1`.Description AS ContactImmediacyCategory,
   `uts1`.UnitCategoryID AS ContactImmediacyCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),'') AS ContactImmediacyUnits,
   `sitc`.ContactImmediacyUnitsID,
   `sitc`.ContactImmediacy,
   `sitc`.SpecialFactors,
   `sitc`.LastUpdate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`sitt2`.SituationTitle,'')),''),'')),''),''),' | ',IFNULL(`org1`.Name,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' - ',IFNULL(`org2`.ShortName,'')),' - '),''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`rsks1`.SeverityValue,''),' - ',IFNULL(`rsks1`.RiskSeverityTerm,''),': Loss cost of ',IFNULL(ROUND(`rsks1`.SeverityLowCost, 2),''),' to ',IFNULL(ROUND(`rsks1`.SeverityHighCost, 2),'')),' - : Loss cost of  to '),'')),' |  |  | ') AS RecordLabel,
   `sit1`.OrganizationID AS OrganizationID
FROM `sitc`
   
     LEFT OUTER JOIN `sit` AS sit1 
   ON (`sitc`.SituationID = `sit1`.SituationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`sitc`.SituationContactID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'sitc'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '79')
     LEFT OUTER JOIN `rsks` AS rsks1 
   ON (`sitc`.SeverityID = `rsks1`.SeverityID )
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`sitc`.ContactImmediacyUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`sit1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `sitt` AS sitt2 
   ON (`sit1`.SituationTypeID = `sitt2`.SituationTypeID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`uts1`.UnitCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '37')
     LEFT OUTER JOIN `org` AS org2 
   ON (`ppl1`.OrganizationID = `org2`.OrganizationID )
WHERE
   sitc.SituationContactID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Situational Contact");
        $screenPhrase = gettext("Form|Edit summary information about the situation contact");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Situation Contacts");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'SituationContactID' => gettext("Record ID|An automatically assigned number used to track contacts assigned to the occurrence of situations"),
   'Organization' => gettext("Organization|The name of the organization at risk of encountering the defined situation"),
   'Situation' => gettext("Situation Title|A combined field used to describe this situation when associating it with other records"),
   'LocalDescription' => gettext("Local Description|An detailed description of the local situation requiring action, communication, or response"),
   'PersonAccountable' => gettext("Contact|The name of the person assigned to the incident response role at this specific location"),
   'SeverityID' => gettext("Risk Severity|A detailed phrase used to describe the severity of a loss or risk of a loss"),
   'ContactImmediacy' => gettext("Immediacy|The amount of time which can pass before the contact is notified of the incident"),
   'SpecialFactors' => gettext("Special Factors|A detailed description of any special notification requirements associated with this contact relative to this situation and associated severity"),
   'LastUpdate' => gettext("Last Update|The date the incident contact was last updated")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['SeverityID'], ShortPhrase($phrases['SeverityID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SeverityID']->invalid = TRUE;
            }
$vMsg = Validate($data['ContactImmediacy'], ShortPhrase($phrases['ContactImmediacy']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ContactImmediacy']->invalid = TRUE;
            }
$vMsg = Validate($data['SpecialFactors'], ShortPhrase($phrases['SpecialFactors']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SpecialFactors']->invalid = TRUE;
            }
$vMsg = Validate($data['LastUpdate'], ShortPhrase($phrases['LastUpdate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['LastUpdate']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Situational Contacts"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Situational Contact") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about the situation contact") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Situational Contact") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"LastUpdate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_LastUpdate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>