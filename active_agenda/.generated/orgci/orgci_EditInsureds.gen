<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:13:"CertificateID";O:9:"viewfield":16:{s:4:"name";s:13:"CertificateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|Automatically assigned number used to track certificates of insurance";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"CertificateTitle";O:9:"viewfield":16:{s:4:"name";s:16:"CertificateTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Certificate Title|A descriptive title used to identify the certificate of insurance";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"CertificateNo";O:9:"viewfield":16:{s:4:"name";s:13:"CertificateNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:123:"Certificate Number|The number assigned to the certificate of insurance by the insurance carrier or issuing insurance broker";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:231:"Person Accountable|The individual with primary responsibility for managing the adequacy and frequency of the certificate of insurance and the risk financing relationship between the insured organization and the \'named\' organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"NamedOrg";O:9:"viewfield":16:{s:4:"name";s:8:"NamedOrg";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:315:"Policy Holder|The organization which is identified on the policy Declarations page as the Named Insured of the insurance policy. The Named Insured is required to provide and maintain currency of the policy and provide updated certificates of insurance to the Additional Insured prior to ANY lapse of policy coverage";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"PolicyType";O:9:"viewfield":16:{s:4:"name";s:10:"PolicyType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Policy Type|The type of insurance coverage provided by the carrier to the contractor and evidenced by the certificate of insurance";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"CoverageAmount";O:9:"viewfield":16:{s:4:"name";s:14:"CoverageAmount";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:197:"Coverage Amount|Amount of insurance coverage provided by the insurance carrier and evidenced by the certificate of insurance and stated in the currency assigned to this installation of the software";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Carrier";O:9:"viewfield":16:{s:4:"name";s:7:"Carrier";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Carrier|Name of the insurance carrier providing the certificate of insurance";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EffectiveDate";O:9:"viewfield":16:{s:4:"name";s:13:"EffectiveDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Effective Date|The date the insurance policy referred to in the certificate of insurance went into effect";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationDate";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Expiration Date|The date the insurance policy referred to in the certificate of insurance will no longer be in effect";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:93:"Days Remaining|The total number of days remaining before the certificate of insurance expires";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:19:"CertificateAttached";O:9:"viewfield":16:{s:4:"name";s:19:"CertificateAttached";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Certificate Attached|Whether the certificate of insurance has been attached to this record";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Certificate of Insurance");

//field value array
$data = array(
        'CertificateID' => '',
         'CertificateTitle' => '',
         'CertificateNo' => '',
         'PersonAccountable' => '',
         'NamedOrg' => '',
         'PolicyType' => '',
         'CoverageAmount' => '',
         'Carrier' => '',
         'EffectiveDate' => '',
         'ExpirationDate' => '',
         'DaysRemaining' => '',
         'CertificateAttached' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:698:"SELECT 
   `orgca`.AdditionalInsuredID,
   `org1`.Name AS Organization,
   `orgca`.OrganizationID,
   `ppl1`.DisplayName AS LocalPersonAccountable,
   `acc1`.PersonAccountableID AS LocalPersonAccountableID,
   `orgca`.Circumstances
FROM `orgca`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgca`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`orgca`.AdditionalInsuredID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'orgca\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'145\')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   orgca.AdditionalInsuredID=\'/**RowID**/\'";s:9:"getRowSQL";s:281:"SELECT 
   `orgca`.AdditionalInsuredID,
   `org1`.Name AS Organization,
   `orgca`.Circumstances,
   `orgca`.OrganizationID
FROM `orgca`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgca`.OrganizationID = `org1`.OrganizationID )
WHERE
   orgca.AdditionalInsuredID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:4:{s:19:"AdditionalInsuredID";O:14:"invisiblefield":11:{s:4:"name";s:19:"AdditionalInsuredID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:132:"Record ID|A unique number that is automatically assigned and is used to associate additional insureds with certificates of insurance";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Additional Insured|The organization named as an additional insured on the certificate of insurance";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"orgca";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:24:"LocalPersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:24:"LocalPersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:262:"Local Person Accountable|The individual with primary responsibility for managing the adequacy and frequency of the certificate of insurance and the risk financing relationship between the insured organization and the organization \'named\' as an additional insured";s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"orgca";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:28:"LocalPersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"Circumstances";O:9:"memofield":15:{s:4:"name";s:13:"Circumstances";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:156:"Circumstances|A detailed description of the circumstances which led to organization being named as an additional insured on the policy of the \'named insured";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:19:"AdditionalInsuredID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"orgca";s:6:"phrase";s:20:"Additionally Insured";s:6:"number";i:1;s:6:"Fields";a:3:{s:19:"AdditionalInsuredID";O:14:"invisiblefield":11:{s:4:"name";s:19:"AdditionalInsuredID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:132:"Record ID|A unique number that is automatically assigned and is used to associate additional insureds with certificates of insurance";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Additional Insured|The organization named as an additional insured on the certificate of insurance";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"Circumstances";O:9:"viewfield":16:{s:4:"name";s:13:"Circumstances";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:156:"Circumstances|A detailed description of the circumstances which led to organization being named as an additional insured on the policy of the \'named insured";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgca";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:112:"SELECT 
    count(*) 
FROM `orgca`
   
WHERE orgca._Deleted = 0
   AND `orgca`.CertificateID = \'/**RecordID**/\'
";s:7:"listSQL";s:290:"SELECT 
   `orgca`.AdditionalInsuredID,
`orgca`.OrganizationID,
`org1`.Name AS Organization,
`orgca`.Circumstances
FROM `orgca`

   LEFT OUTER JOIN `org` AS org1 
   ON (`orgca`.OrganizationID = `org1`.OrganizationID )
WHERE orgca._Deleted = 0
AND `orgca`.CertificateID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:13:"CertificateID";s:9:"parentKey";s:13:"CertificateID";s:8:"PKFields";a:1:{i:0;s:19:"AdditionalInsuredID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'CertificateID';

    $ownerField = '';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Insurance";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `orgci`.CertificateID,
   `orgci`.CertificateTitle,
   `orgci`.CertificateNo,
   `ppl1`.DisplayName AS PersonAccountable,
   `org1`.Name AS NamedOrg,
   `cod1`.Description AS PolicyType,
   `orgci`.CoverageAmount,
   `org2`.Name AS Carrier,
   `dat1`.RelatedDate AS EffectiveDate,
   `dat2`.RelatedDate AS ExpirationDate,
   CASE WHEN DATEDIFF(`dat2`.RelatedDate, NOW()) > 0 THEN DATEDIFF(`dat2`.RelatedDate, NOW()) ELSE 0 END AS DaysRemaining,
   `orgci`.CertificateAttached,
   NULLIF(CONCAT(IFNULL(`org2`.Name,''),' No: ',IFNULL(`orgci`.CertificateNo,''),' expiring: ',IFNULL(`dat2`.RelatedDate,'')),' No:  expiring: ') AS RecordLabel
FROM `orgci`
   
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`orgci`.CertificateID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'orgci'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '11')
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgci`.NamedOrgID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgci`.PolicyTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '3')
     LEFT OUTER JOIN `org` AS org2 
   ON (`orgci`.CarrierID = `org2`.OrganizationID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`orgci`.CertificateID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'orgci'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '17')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`orgci`.CertificateID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'orgci'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   orgci.CertificateID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Certificate of Insurance");
        $screenPhrase = gettext("Insureds|Associate additional insureds with a certificate of insurance");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Certificates of Insurance");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'CertificateID' => gettext("Record ID|Automatically assigned number used to track certificates of insurance"),
   'CertificateTitle' => gettext("Certificate Title|A descriptive title used to identify the certificate of insurance"),
   'CertificateNo' => gettext("Certificate Number|The number assigned to the certificate of insurance by the insurance carrier or issuing insurance broker"),
   'PersonAccountable' => gettext("Person Accountable|The individual with primary responsibility for managing the adequacy and frequency of the certificate of insurance and the risk financing relationship between the insured organization and the 'named' organization"),
   'NamedOrg' => gettext("Policy Holder|The organization which is identified on the policy Declarations page as the Named Insured of the insurance policy. The Named Insured is required to provide and maintain currency of the policy and provide updated certificates of insurance to the Additional Insured prior to ANY lapse of policy coverage"),
   'PolicyType' => gettext("Policy Type|The type of insurance coverage provided by the carrier to the contractor and evidenced by the certificate of insurance"),
   'CoverageAmount' => gettext("Coverage Amount|Amount of insurance coverage provided by the insurance carrier and evidenced by the certificate of insurance and stated in the currency assigned to this installation of the software"),
   'Carrier' => gettext("Carrier|Name of the insurance carrier providing the certificate of insurance"),
   'EffectiveDate' => gettext("Effective Date|The date the insurance policy referred to in the certificate of insurance went into effect"),
   'ExpirationDate' => gettext("Expiration Date|The date the insurance policy referred to in the certificate of insurance will no longer be in effect"),
   'DaysRemaining' => gettext("Days Remaining|The total number of days remaining before the certificate of insurance expires"),
   'CertificateAttached' => gettext("Certificate Attached|Whether the certificate of insurance has been attached to this record")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Certificates of Insurance"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Certificate of Insurance") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a certificate of insurance") );
      $tempTabs['Insureds'] = array( "", gettext("Insureds|Associate additional insureds with a certificate of insurance") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance policies with a certificate of insurance") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the certificate of insurance") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the certificate of insurance") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with a certificate of insurance") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with a certificate of insurance") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Insureds'] = array( "", gettext("New Certificate") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>