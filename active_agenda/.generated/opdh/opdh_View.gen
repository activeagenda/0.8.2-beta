<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

    /**CUSTOM_CODE|init**/

    //list of objects containing the field information
    $fields = unserialize('a:11:{s:13:"HoursWorkedID";O:9:"viewfield":16:{s:4:"name";s:13:"HoursWorkedID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Record ID|NumericalNumerical ID used to track periods of hours worked";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Organization|The organization for which the hours were worked";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"PayrollClassType";O:9:"viewfield":16:{s:4:"name";s:16:"PayrollClassType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Payroll Class Type|The class of payroll which the hours worked are attributed to";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"BeginDate";O:9:"viewfield":16:{s:4:"name";s:9:"BeginDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Begin Date|The beginning date of the payroll period";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"EndDate";O:9:"viewfield":16:{s:4:"name";s:7:"EndDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"End Date|The ending date of the payroll period";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Days";O:9:"viewfield":16:{s:4:"name";s:4:"Days";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Days|A calculated field based on the number of days worked during the work period";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:5:"Hours";O:9:"viewfield":16:{s:4:"name";s:5:"Hours";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Hours Worked|The number of hours worked during the pay period";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"AverageHoursPerDay";O:9:"viewfield":16:{s:4:"name";s:18:"AverageHoursPerDay";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Hours Per Day|A calculated field based on the average number of hours worked per day during the work period";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";s:1:"2";s:14:"roundingMethod";s:5:"floor";s:10:"needsReGet";b:1;}s:6:"People";O:9:"viewfield":16:{s:4:"name";s:6:"People";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"People Paid|The number of people, of the payroll class, that were paid during the pay period";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"HoursPerPerson";O:9:"viewfield":16:{s:4:"name";s:14:"HoursPerPerson";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:112:"Hours Per Person|A calculated field based on the average number of hours worked per person during the pay period";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";s:1:"2";s:14:"roundingMethod";s:5:"floor";s:10:"needsReGet";b:1;}s:7:"Comment";O:9:"viewfield":16:{s:4:"name";s:7:"Comment";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"Comment|A brief comment to describe this entry";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'HoursWorkedID' => gettext("Record ID|NumericalNumerical ID used to track periods of hours worked"),
   'Organization' => gettext("Organization|The organization for which the hours were worked"),
   'PayrollClassType' => gettext("Payroll Class Type|The class of payroll which the hours worked are attributed to"),
   'BeginDate' => gettext("Begin Date|The beginning date of the payroll period"),
   'EndDate' => gettext("End Date|The ending date of the payroll period"),
   'Days' => gettext("Days|A calculated field based on the number of days worked during the work period"),
   'Hours' => gettext("Hours Worked|The number of hours worked during the pay period"),
   'AverageHoursPerDay' => gettext("Hours Per Day|A calculated field based on the average number of hours worked per day during the work period"),
   'People' => gettext("People Paid|The number of people, of the payroll class, that were paid during the pay period"),
   'HoursPerPerson' => gettext("Hours Per Person|A calculated field based on the average number of hours worked per person during the pay period"),
   'Comment' => gettext("Comment|A brief comment to describe this entry")
   );


    $ownerField = 'OrganizationID';

    
    /**disbleGlobalModules**/
    /**useBestPractices**/

    //retrieve record
    $data = array();
    
    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `opdh`.HoursWorkedID,
   `org1`.Name AS Organization,
   `cod1`.Description AS PayrollClassType,
   `opdh`.BeginDate,
   `opdh`.EndDate,
   DATEDIFF(`opdh`.EndDate, `opdh`.BeginDate) AS Days,
   `opdh`.Hours,
   IFNULL(`opdh`.Hours,0) / DATEDIFF(`opdh`.EndDate, `opdh`.BeginDate) AS AverageHoursPerDay,
   `opdh`.People,
   IFNULL(`opdh`.Hours,0) / `opdh`.People AS HoursPerPerson,
   `opdh`.Comment,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`opdh`.Hours,'')),' | ') AS RecordLabel,
   `opdh`.OrganizationID
FROM `opdh`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`opdh`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`opdh`.PayrollClassTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '202')
WHERE
   opdh.HoursWorkedID='/**RecordID**/'";

    /**CUSTOM_CODE|before_get**/

    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    
    /**SQL|GET_END**/
    //need to repeat for each getSQL........
    $data = array_merge($data, $r[0]); //assign first (only) row
    
    /**CUSTOM_CODE|get**/
    
    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Work Periods"));

    if ($allowEdit){
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Work Period") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit hours worked during a payroll period") );
$tabs = array_merge($tabs, $tempTabs);
    } else {
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Work Period") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("a Work Period") );
$tabs = array_merge($tabs, $tempTabs);
    }
    
    $recordLabelField = $data['RecordLabel'];

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Work Period");
    $screenPhrase = gettext("View|View hours worked during a payroll period");

    $backlink = "list.php?$qs";

    $nextScreen = "Form";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here


//View Screen Sections here
/**VIEWSCREENSECTIONS**/
?>
