<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:10:"PracticeID";O:9:"viewfield":16:{s:4:"name";s:10:"PracticeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:104:"Record ID|An automatically assigned number used to assign and track standard corrective action practices";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"SituationCategoryID";O:14:"codecombofield":27:{s:4:"name";s:19:"SituationCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'58\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'58\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"SituationID";a:1:{s:4:"name";s:11:"SituationID";}}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"58";}s:11:"SituationID";O:10:"combofield":26:{s:4:"name";s:11:"SituationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"cors";s:10:"foreignKey";s:11:"SituationID";s:12:"foreignField";s:9:"Situation";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:189:"SELECT 
`cors`.SituationID AS ID, NULLIF(CONCAT(IFNULL(`cors`.SituationTitle,\'\')),\'\') AS Name, `cors`.SituationCategoryID AS ParentID FROM `cors`
WHERE cors._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:188:"SELECT 
`cors`.SituationID AS ID, NULLIF(CONCAT(IFNULL(`cors`.SituationTitle,\'\')),\'\') AS Name, `cors`.SituationCategoryID AS ParentID FROM `cors`

WHERE `cors`.SituationID = \'/*recordID*/\'";s:11:"parentField";s:19:"SituationCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"GeneralDesc";a:1:{s:4:"name";s:11:"GeneralDesc";}}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"GeneralDesc";O:9:"viewfield":16:{s:4:"name";s:11:"GeneralDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"General Description|A general description of a situation requiring corrective action";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:11:"SituationID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:16:"OrganizationDesc";O:9:"memofield":15:{s:4:"name";s:16:"OrganizationDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:2:"10";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"WorkRuleNo";O:9:"editfield":14:{s:4:"name";s:10:"WorkRuleNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"25";s:9:"maxLength";s:2:"25";s:5:"align";s:4:"left";}s:9:"OccurNoID";O:14:"codecombofield":27:{s:4:"name";s:9:"OccurNoID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'75\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'75\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"75";}s:20:"ActionOrganizationID";O:10:"combofield":26:{s:4:"name";s:20:"ActionOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"CorrActTypeID";a:1:{s:4:"name";s:13:"CorrActTypeID";}}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:13:"CorrActTypeID";O:10:"combofield":26:{s:4:"name";s:13:"CorrActTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"cort";s:10:"foreignKey";s:13:"CorrActTypeID";s:12:"foreignField";s:11:"CorrActType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:199:"SELECT 
`cort`.CorrActTypeID AS ID, NULLIF(CONCAT(IFNULL(`cort`.CorrectiveActionTitle,\'\')),\'\') AS Name, `cort`.ActionOrganizationID AS ParentID FROM `cort`
WHERE cort._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:200:"SELECT 
`cort`.CorrActTypeID AS ID, NULLIF(CONCAT(IFNULL(`cort`.CorrectiveActionTitle,\'\')),\'\') AS Name, `cort`.ActionOrganizationID AS ParentID FROM `cort`

WHERE `cort`.CorrActTypeID = \'/*recordID*/\'";s:11:"parentField";s:20:"ActionOrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"CorrectiveActionDesc";a:1:{s:4:"name";s:20:"CorrectiveActionDesc";}}s:8:"moduleID";s:4:"corp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:35:"`cort`.ActionOrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:20:"CorrectiveActionDesc";O:9:"viewfield":16:{s:4:"name";s:20:"CorrectiveActionDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:185:"Corrective Action Requirements|A detailed description of the corrective action type and any additional information required to adequately describe the action and associated requirements";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"CorrActTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Corrective Action Practice");

//field value array
$data = array(
        'PracticeID' => '',
         'OrganizationID' => '',
         'PersonAccountableID' => '',
         'SituationCategoryID' => '',
         'SituationID' => '',
         'GeneralDesc' => '',
         'OrganizationDesc' => '',
         'WorkRuleNo' => '',
         'OccurNoID' => '',
         'ActionOrganizationID' => '',
         'CorrActTypeID' => '',
         'CorrectiveActionDesc' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'PracticeID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `corp`.PracticeID,
   `org1`.Name AS Organization,
   `corp`.OrganizationID,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `cod1`.Description AS SituationCategory,
   `cors1`.SituationCategoryID AS SituationCategoryID,
   NULLIF(CONCAT(IFNULL(`cors1`.SituationTitle,'')),'') AS Situation,
   `corp`.SituationID,
   `cors1`.GeneralDesc AS GeneralDesc,
   `corp`.OrganizationDesc,
   `corp`.WorkRuleNo,
   `cod2`.Description AS OccurNo,
   `corp`.OccurNoID,
   `org2`.Name AS ActionOrganization,
   `cort1`.ActionOrganizationID AS ActionOrganizationID,
   NULLIF(CONCAT(IFNULL(`cort1`.CorrectiveActionTitle,'')),'') AS CorrActType,
   `corp`.CorrActTypeID,
   `cort1`.CorrectiveActionDesc AS CorrectiveActionDesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`cort1`.CorrectiveActionTitle,'')),''),''),' occurs after the ',IFNULL(`cod2`.Description,''),' occurrence of ',IFNULL(NULLIF(CONCAT(IFNULL(`cors1`.SituationTitle,'')),''),''),' at ',IFNULL(`org1`.Name,'')),' occurs after the  occurrence of  at ') AS RecordLabel
FROM `corp`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`corp`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`corp`.PracticeID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'corp'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '22')
     LEFT OUTER JOIN `cors` AS cors1 
   ON (`corp`.SituationID = `cors1`.SituationID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`corp`.OccurNoID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '75')
     LEFT OUTER JOIN `cort` AS cort1 
   ON (`corp`.CorrActTypeID = `cort1`.CorrActTypeID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`cors1`.SituationCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '58')
     LEFT OUTER JOIN `org` AS org2 
   ON (`cort1`.ActionOrganizationID = `org2`.OrganizationID )
WHERE
   corp.PracticeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Corrective Action Practice");
        $screenPhrase = gettext("Form|Edit summary information about a situation requiring corrective action");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Corrective Action Practices");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'PracticeID' => gettext("Record ID|An automatically assigned number used to assign and track standard corrective action practices"),
   'OrganizationID' => gettext("Organization|The policy organization with primary responsibility for continuity of the corrective action practice"),
   'PersonAccountableID' => gettext("Person Accountable|The person assigned primary accountability for continuity of the corrective action practice"),
   'SituationCategoryID' => gettext("Situation Category|A broadly defined title or phrase used to group similar situations requiring corrective action"),
   'SituationID' => gettext("Situation|A combined field used to describe this situation when associating it with other records"),
   'GeneralDesc' => gettext("General Description|A general description of a situation requiring corrective action"),
   'OrganizationDesc' => gettext("Organization Description|A detailed description of the organization specific situation requiring corrective action"),
   'WorkRuleNo' => gettext("Work Rule Number|Work rule or policy number associated with the situation to be addressed"),
   'OccurNoID' => gettext("Occurrence|The number of times the situation must occur to result in the assigned consistent practice"),
   'ActionOrganizationID' => gettext("Action Organization|The organization directly associated with this corrective action type"),
   'CorrActTypeID' => gettext("Consistent Practice|A combined field used to describe this corrective action type when associating it with other records"),
   'CorrectiveActionDesc' => gettext("Corrective Action Requirements|A detailed description of the corrective action type and any additional information required to adequately describe the action and associated requirements")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['OrganizationID'], ShortPhrase($phrases['OrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['OrganizationDesc'], ShortPhrase($phrases['OrganizationDesc']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['WorkRuleNo'], ShortPhrase($phrases['WorkRuleNo']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WorkRuleNo']->invalid = TRUE;
            }
$vMsg = Validate($data['OccurNoID'], ShortPhrase($phrases['OccurNoID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OccurNoID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Corrective Action Practice"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Corrective Action Practice") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a situation requiring corrective action") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Corrective Action Practice") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>