<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:17:{s:17:"JobSpecificTaskID";O:9:"viewfield":16:{s:4:"name";s:17:"JobSpecificTaskID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Record ID|A unique number assigned to each task so that tasks can be associated with job analyses";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"TaskTypeID";O:14:"invisiblefield":11:{s:4:"name";s:10:"TaskTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:13:"JobAnalysisID";O:9:"viewfield":16:{s:4:"name";s:13:"JobAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Job Analysis|The title of the job analysis associated with the task";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Organization|The organization associated with the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"JobAnalysisTitle";O:9:"viewfield":16:{s:4:"name";s:16:"JobAnalysisTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Job Analysis Title|A descriptive name of the job to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"JobAnalysisDesc";O:9:"viewfield":16:{s:4:"name";s:15:"JobAnalysisDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:190:"Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very importnat to others interested in assigning this job to different job titles";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"JobAnalysisNumber";O:9:"viewfield":16:{s:4:"name";s:17:"JobAnalysisNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Number|A unique number used to identify the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"TaskOrganization";O:9:"viewfield":16:{s:4:"name";s:16:"TaskOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Task Organization|The organization directly associated with the task";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:178:"Location|Specific location within the facility where this task is performed. In the case of a multi-location task, this should be the primary location where the task is performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LocationNumber";O:9:"viewfield":16:{s:4:"name";s:14:"LocationNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:264:"Location Number|A unique tracking number assigned by the organization to track specific locations. Location numbers are often used by engineering departments to definitively label locations for blueprints, process flow charts and other process information diagrams";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:207:"Person Accountable|The individual assigned primary accountability for ensuring that the task has been reviewed and all associated controls, equipment are assigned and a functional analysis has been performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Function";O:9:"viewfield":16:{s:4:"name";s:8:"Function";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Function|The business purpose of the department responsible for the task to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskType";O:9:"viewfield":16:{s:4:"name";s:8:"TaskType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:45:"Task Type|The specific type of task performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskName";O:9:"viewfield":16:{s:4:"name";s:8:"TaskName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:60:"Task|A descriptive name of the specific task to be performed";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskDesc";O:9:"viewfield":16:{s:4:"name";s:8:"TaskDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:195:"Task Description|A detailed description of the specific task to be performed. The detailed description will be very importnat to others interested in assigning this task to different job analyses";s:8:"dataType";s:12:"varchar(255)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"CriticalControlTask";O:9:"viewfield":16:{s:4:"name";s:19:"CriticalControlTask";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Critical Control Task|Whether this task is considered a critical control as it relates to a business process or product specification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"TaskStatus";O:9:"viewfield":16:{s:4:"name";s:10:"TaskStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Status|Status of the task review process";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Job Specific Task");

//field value array
$data = array(
        'JobSpecificTaskID' => '',
         'TaskTypeID' => '',
         'JobAnalysisID' => '',
         'Organization' => '',
         'JobAnalysisTitle' => '',
         'JobAnalysisDesc' => '',
         'JobAnalysisNumber' => '',
         'TaskOrganization' => '',
         'Location' => '',
         'LocationNumber' => '',
         'PersonAccountable' => '',
         'Function' => '',
         'TaskType' => '',
         'TaskName' => '',
         'TaskDesc' => '',
         'CriticalControlTask' => '',
         'TaskStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:923:"SELECT 
   `tasga`.ActivityID,
   `tasga`.GeneralActivityTitle,
   `cod1`.Description AS FunActivity,
   `tasga`.FunActivityID,
   `cod2`.Description AS TimeUnitCategory,
   `uts1`.UnitCategoryID AS TimeUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
   `tasga`.TimeUnitID,
   `tasga`.ActivityDuration,
   `tasga`.Frequency,
   `tasga`.ActivityDesc,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `tasga`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tasga`.FunActivityID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'159\')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`tasga`.TimeUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`tasga`.RelatedRecordID = rdc1.RecordID AND `tasga`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`uts1`.UnitCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'37\')
WHERE
   tasga.ActivityID=\'/**RowID**/\'";s:9:"getRowSQL";s:618:"SELECT 
   `tasga`.GeneralActivityTitle,
   `cod1`.Description AS FunActivity,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
   `tasga`.ActivityDuration,
   `tasga`.Frequency,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `tasga`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tasga`.FunActivityID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'159\')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`tasga`.TimeUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`tasga`.RelatedRecordID = rdc1.RecordID AND `tasga`.RelatedModuleID = rdc1.ModuleID)
WHERE
   tasga.ActivityID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:6:{s:10:"ActivityID";O:14:"invisiblefield":11:{s:4:"name";s:10:"ActivityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Activity ID|An automatically assigned number used to associate general activities with organizational tasks";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:20:"GeneralActivityTitle";O:9:"editfield":14:{s:4:"name";s:20:"GeneralActivityTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"General Activity Title|A short phrase used to describe the general activity task requirement";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:13:"FunActivityID";O:14:"codecombofield":27:{s:4:"name";s:13:"FunActivityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:139:"General Activity|A categorization used to associate general activities with tasks and quantify the frequency and duration of the activities";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'159\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'159\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"tasga";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"159";}s:16:"ActivityDuration";O:9:"editfield":14:{s:4:"name";s:16:"ActivityDuration";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:18:"TimeUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:18:"TimeUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"TimeUnitID";a:1:{s:4:"name";s:10:"TimeUnitID";}}s:8:"moduleID";s:5:"tasga";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"TimeUnitID";O:10:"combofield":26:{s:4:"name";s:10:"TimeUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:18:"TimeUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"tasga";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";s:45:"Duration|The duration of the general activity";s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:9:"Frequency";O:9:"editfield":14:{s:4:"name";s:9:"Frequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Cycles Per Duration|The frequency of repetitive cycles occurring over the duration of the general activity";s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:12:"ActivityDesc";O:9:"memofield":15:{s:4:"name";s:12:"ActivityDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Activity Description|A detailed description of the activity associated with the task";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:10:"ActivityID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"tasga";s:6:"phrase";s:18:"General Activities";s:6:"number";i:1;s:6:"Fields";a:4:{s:20:"GeneralActivityTitle";O:9:"viewfield":16:{s:4:"name";s:20:"GeneralActivityTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"General Activity Title|A short phrase used to describe the general activity task requirement";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"FunActivity";O:9:"viewfield":16:{s:4:"name";s:11:"FunActivity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:139:"General Activity|A categorization used to associate general activities with tasks and quantify the frequency and duration of the activities";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"ActivityDuration";O:9:"viewfield":16:{s:4:"name";s:16:"ActivityDuration";s:10:"parentName";N;s:6:"Fields";a:1:{s:8:"TimeUnit";O:9:"viewfield":16:{s:4:"name";s:8:"TimeUnit";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Unit|A combined field used to describe this unit when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:45:"Duration|The duration of the general activity";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Frequency";O:9:"viewfield":16:{s:4:"name";s:9:"Frequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Cycles Per Duration|The frequency of repetitive cycles occurring over the duration of the general activity";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tasga";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:152:"SELECT 
    count(*) 
FROM `tasga`
   
WHERE tasga._Deleted = 0
   AND `tasga`.RelatedModuleID = \'janst\'
AND `tasga`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:686:"SELECT 
   `tasga`.ActivityID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`tasga`.GeneralActivityTitle,
`cod1`.Description AS FunActivity,
NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
`tasga`.ActivityDuration,
`tasga`.Frequency
FROM `tasga`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`tasga`.RelatedRecordID = rdc1.RecordID AND `tasga`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`tasga`.FunActivityID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'159\')
   LEFT OUTER JOIN `uts` AS uts1 
   ON (`tasga`.TimeUnitID = `uts1`.UnitID )
WHERE tasga._Deleted = 0
AND `tasga`.RelatedModuleID = \'janst\'
AND `tasga`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:17:"JobSpecificTaskID";s:8:"PKFields";a:1:{i:0;s:10:"ActivityID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:5:"janst";}}');


    /**guidanceGrid**/

    $PKField = 'JobSpecificTaskID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "HandUse";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `janst`.JobSpecificTaskID,
   `janst`.TaskTypeID,
   `janst`.JobAnalysisID,
   `org1`.Name AS Organization,
   `jan1`.JobAnalysisTitle AS JobAnalysisTitle,
   `jan1`.JobAnalysisDesc AS JobAnalysisDesc,
   `jan1`.JobAnalysisNumber AS JobAnalysisNumber,
   `org2`.Name AS TaskOrganization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `orgl1`.LocationNumber AS LocationNumber,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS Function,
   NULLIF(CONCAT(IFNULL(`tast1`.TaskTypeTitle,'')),'') AS TaskType,
   `janst`.TaskName,
   `janst`.TaskDesc,
   `cod3`.Description AS CriticalControlTask,
   `cod4`.Description AS TaskStatus,
   NULLIF(CONCAT(IFNULL(`janst`.TaskName,''),' | ',IFNULL(`org1`.Name,''),' | ',IFNULL(NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),''),'')),' |  | ') AS RecordLabel,
   `jan1`.OrganizationID AS OrganizationID
FROM `janst`
   
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`janst`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`janst`.TaskOrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`janst`.JobSpecificTaskID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'janst'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`janst`.JobSpecificTaskID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'janst'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '85')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`janst`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '4')
     LEFT OUTER JOIN `tast` AS tast1 
   ON (`janst`.TaskTypeID = `tast1`.TaskTypeID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`janst`.CriticalControlTaskID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '129')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`janst`.TaskStatusID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '244')
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   janst.JobSpecificTaskID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Job Specific Task");
        $screenPhrase = gettext("Activities|Associate general activities with the job specific task");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Job Specific Tasks");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'JobSpecificTaskID' => gettext("Record ID|A unique number assigned to each task so that tasks can be associated with job analyses"),
   'TaskTypeID' => gettext("Task Type|The specific type of task performed"),
   'JobAnalysisID' => gettext("Job Analysis|The title of the job analysis associated with the task"),
   'Organization' => gettext("Organization|The organization associated with the job analysis"),
   'JobAnalysisTitle' => gettext("Job Analysis Title|A descriptive name of the job to be performed"),
   'JobAnalysisDesc' => gettext("Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very importnat to others interested in assigning this job to different job titles"),
   'JobAnalysisNumber' => gettext("Number|A unique number used to identify the job analysis"),
   'TaskOrganization' => gettext("Task Organization|The organization directly associated with the task"),
   'Location' => gettext("Location|Specific location within the facility where this task is performed. In the case of a multi-location task, this should be the primary location where the task is performed"),
   'LocationNumber' => gettext("Location Number|A unique tracking number assigned by the organization to track specific locations. Location numbers are often used by engineering departments to definitively label locations for blueprints, process flow charts and other process information diagrams"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for ensuring that the task has been reviewed and all associated controls, equipment are assigned and a functional analysis has been performed"),
   'Function' => gettext("Function|The business purpose of the department responsible for the task to be performed"),
   'TaskType' => gettext("Task Type|The specific type of task performed"),
   'TaskName' => gettext("Task|A descriptive name of the specific task to be performed"),
   'TaskDesc' => gettext("Task Description|A detailed description of the specific task to be performed. The detailed description will be very importnat to others interested in assigning this task to different job analyses"),
   'CriticalControlTask' => gettext("Critical Control Task|Whether this task is considered a critical control as it relates to a business process or product specification"),
   'TaskStatus' => gettext("Status|Status of the task review process")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Job Specific Tasks"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Job Specific Task") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the job specific task") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the job specific task") );
      $tempTabs['General'] = array( "", gettext("Activities|Associate general activities with the job specific task") );
      $tempTabs['HandUse'] = array( "edit.php?scr=HandUse&$tabsQS", gettext("Hands|Associate hand use requirements with the job specific task") );
      $tempTabs['Lifting'] = array( "edit.php?scr=Lifting&$tabsQS", gettext("Lifting|Associate lifting requirements with the job specific task") );
      $tempTabs['Carrying'] = array( "edit.php?scr=Carrying&$tabsQS", gettext("Carrying|Associate carrying requirements with the job specific task") );
      $tempTabs['Documents'] = array( "edit.php?scr=Documents&$tabsQS", gettext("Documents|Associate documents with the job specific task") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the job specific task") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the job specific task") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the job specific task") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the job specific task") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the job specific task") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the job specific task") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the job specific task") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with the job specific task") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the job specific task") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['General'] = array( "", gettext("New Job Specific Task") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>