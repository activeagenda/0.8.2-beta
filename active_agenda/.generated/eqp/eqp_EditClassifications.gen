<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:11:"EquipmentID";O:9:"viewfield":16:{s:4:"name";s:11:"EquipmentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track equipment of all types";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"EquipmentCategory";O:9:"viewfield":16:{s:4:"name";s:17:"EquipmentCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Category|A broad categoy used to group equipments of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EquipmentType";O:9:"viewfield":16:{s:4:"name";s:13:"EquipmentType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Equipment Type|A combined field used to describe this equipment type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EquipmentName";O:9:"viewfield":16:{s:4:"name";s:13:"EquipmentName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Equipment Name|A distinct name or title used to identify the respective piece of equipment";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Manufacturer";O:9:"viewfield":16:{s:4:"name";s:12:"Manufacturer";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Manufacturer|The name of the organization that manufacturers the equipment";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"ModelNo";O:9:"viewfield":16:{s:4:"name";s:7:"ModelNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Model Number|The model number of the equipment which is usually assigned by the equipment manufacturer";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"EmergencyResponse";O:13:"checkboxfield":14:{s:4:"name";s:17:"EmergencyResponse";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:6:"Issued";O:13:"checkboxfield":14:{s:4:"name";s:6:"Issued";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"HazardousEnergy";O:13:"checkboxfield":14:{s:4:"name";s:15:"HazardousEnergy";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"SystemComponent";O:13:"checkboxfield":14:{s:4:"name";s:15:"SystemComponent";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"CriticalControl";O:13:"checkboxfield":14:{s:4:"name";s:15:"CriticalControl";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:8:"Training";O:13:"checkboxfield":14:{s:4:"name";s:8:"Training";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Equipment");

//field value array
$data = array(
        'EquipmentID' => '',
         'EquipmentCategory' => '',
         'EquipmentType' => '',
         'EquipmentName' => '',
         'Manufacturer' => '',
         'ModelNo' => '',
         'EmergencyResponse' => '',
         'Issued' => '',
         'HazardousEnergy' => '',
         'SystemComponent' => '',
         'CriticalControl' => '',
         'Training' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'EquipmentID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Guidance";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `eqp`.EquipmentID,
   `cod1`.Description AS EquipmentCategory,
   NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,'')),'') AS EquipmentType,
   `eqp`.EquipmentName,
   `org2`.Name AS Manufacturer,
   `eqp`.ModelNo,
   `eqp`.EmergencyResponse,
   `eqp`.Issued,
   `eqp`.HazardousEnergy,
   `eqp`.SystemComponent,
   `eqp`.CriticalControl,
   `eqp`.Training,
   NULLIF(CONCAT(IFNULL(`eqp`.EquipmentName,''),' | ',IFNULL(`org2`.Name,''),' | ',IFNULL(`eqp`.ModelNo,'')),' |  | ') AS RecordLabel,
   `eqp`.OrganizationID
FROM `eqp`
   
     LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`eqp`.ManufacturerID = `org2`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`eqpt1`.EquipmentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '284')
WHERE
   eqp.EquipmentID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Equipment");
        $screenPhrase = gettext("Classifications|Assign special classifications to an equipment item");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Equipment");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'EquipmentID' => gettext("Record ID|An automatically assigned number used to track equipment of all types"),
   'EquipmentCategory' => gettext("Category|A broad categoy used to group equipments of similar types"),
   'EquipmentType' => gettext("Equipment Type|A combined field used to describe this equipment type when associating it with other records"),
   'EquipmentName' => gettext("Equipment Name|A distinct name or title used to identify the respective piece of equipment"),
   'Manufacturer' => gettext("Manufacturer|The name of the organization that manufacturers the equipment"),
   'ModelNo' => gettext("Model Number|The model number of the equipment which is usually assigned by the equipment manufacturer"),
   'EmergencyResponse' => gettext("Emergency Response|Whether the equipment is used by the organization for emergency response purposes.  If the equipment is checked, it will be made available within related modules for purposes of associating emergency response equipment with emergency response procedures"),
   'Issued' => gettext("Issued|Whether the equipment is issued and returned. If the equipment is checked, the equipment will be made available within the equipment checkout module so that equipment distribution and return can be tracked"),
   'HazardousEnergy' => gettext("Hazardous Energy|Whether the equipment possesses hazardous energy. If the equipment is checked, the equipment will be made available within the hazardous energy module so that control procedures can be defined for the equipment"),
   'SystemComponent' => gettext("System Component|Whether the equipment is a component part of a system or process. If the equipment is checked, the equipment will be made available within the systems module"),
   'CriticalControl' => gettext("Critical Control|Whether the equipment is considered a critical control over product quality. If the equipment is checked, the equipment will be made available within related modules for purposes of associating critical control equipment with identified hazards"),
   'Training' => gettext("Training|Whether the equipment is used for training purposes")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['EmergencyResponse'], ShortPhrase($phrases['EmergencyResponse']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['EmergencyResponse']->invalid = TRUE;
            }
$vMsg = Validate($data['Issued'], ShortPhrase($phrases['Issued']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Issued']->invalid = TRUE;
            }
$vMsg = Validate($data['HazardousEnergy'], ShortPhrase($phrases['HazardousEnergy']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['HazardousEnergy']->invalid = TRUE;
            }
$vMsg = Validate($data['SystemComponent'], ShortPhrase($phrases['SystemComponent']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['SystemComponent']->invalid = TRUE;
            }
$vMsg = Validate($data['CriticalControl'], ShortPhrase($phrases['CriticalControl']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CriticalControl']->invalid = TRUE;
            }
$vMsg = Validate($data['Training'], ShortPhrase($phrases['Training']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Training']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Equipment"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Equipment") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an equipment item") );
      $tempTabs['Classifications'] = array( "", gettext("Classifications|Assign special classifications to an equipment item") );
      $tempTabs['Guidance'] = array( "edit.php?scr=Guidance&$tabsQS", gettext("Guidance|Associate guidance organizations with the equipment") );
      $tempTabs['Inventory'] = array( "edit.php?scr=Inventory&$tabsQS", gettext("Inventory|Adjust and track an equipment item inventory level") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the equipment") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the equipment") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with an equipment item") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with an equipment item") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Classifications'] = array( "", gettext("New Equipment") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>