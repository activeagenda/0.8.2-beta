<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:7:{s:11:"SubSystemID";O:9:"viewfield":16:{s:4:"name";s:11:"SubSystemID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:118:"Record ID|An automatically assigned number used to track sub-systems and sub-processes of the parent system or process";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"System";O:9:"viewfield":16:{s:4:"name";s:6:"System";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:91:"System|A combined field used to describe this system when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"SystemDesc";O:9:"viewfield":16:{s:4:"name";s:10:"SystemDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"System Decsription|A detailed description of the system or process";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"SubSystemName";O:9:"viewfield":16:{s:4:"name";s:13:"SubSystemName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Sub System Name|Name used to identify the sub-system or sub-process of the parent system or process";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"SubSystemDesc";O:9:"viewfield":16:{s:4:"name";s:13:"SubSystemDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Sub System Description|A detailed description of the sub-system or sub-process of the parent system or process";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Organization|The name of the organization where the system or process exists";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"SubSystemLocation";O:9:"viewfield":16:{s:4:"name";s:17:"SubSystemLocation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Sub System Location|Specific location within the facility where the sub-system is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Sub-System");

//field value array
$data = array(
        'SubSystemID' => '',
         'System' => '',
         'SystemDesc' => '',
         'SubSystemName' => '',
         'SubSystemDesc' => '',
         'Organization' => '',
         'SubSystemLocation' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:980:"SELECT 
   `sysc`.ComponentID,
   `cod2`.Description AS ComponentCategory,
   `sysct1`.ComponentCategoryID AS ComponentCategoryID,
   NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\': \',IFNULL(`sysct1`.ComponentType,\'\')),\': \') AS SysComponentType,
   `sysc`.SysComponentTypeID,
   `sysc`.ComponentName,
   `sysc`.ComponentDescription,
   `sysc`.ComponentNumber,
   `sys1`.OrganizationID AS OrganizationID
FROM `sysc`
   
     LEFT OUTER JOIN `sysct` AS sysct1 
   ON (`sysc`.SysComponentTypeID = `sysct1`.SysComponentTypeID )
     LEFT OUTER JOIN `syss` AS syss1 
   ON (`sysc`.SubSystemID = `syss1`.SubSystemID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`sysct1`.ComponentCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'117\')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`sysct1`.ComponentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'117\')
     LEFT OUTER JOIN `sys` AS sys1 
   ON (`syss1`.SystemID = `sys1`.SystemID )
WHERE
   sysc.ComponentID=\'/**RowID**/\'";s:9:"getRowSQL";s:670:"SELECT 
   NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\': \',IFNULL(`sysct1`.ComponentType,\'\')),\': \') AS SysComponentType,
   `sysc`.ComponentName,
   `sysc`.ComponentNumber,
   `sys1`.OrganizationID AS OrganizationID
FROM `sysc`
   
     LEFT OUTER JOIN `sysct` AS sysct1 
   ON (`sysc`.SysComponentTypeID = `sysct1`.SysComponentTypeID )
     LEFT OUTER JOIN `syss` AS syss1 
   ON (`sysc`.SubSystemID = `syss1`.SubSystemID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`sysct1`.ComponentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'117\')
     LEFT OUTER JOIN `sys` AS sys1 
   ON (`syss1`.SystemID = `sys1`.SystemID )
WHERE
   sysc.ComponentID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:6:{s:11:"ComponentID";O:14:"invisiblefield":11:{s:4:"name";s:11:"ComponentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|A combined field used to describe this component part when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:19:"ComponentCategoryID";O:10:"combofield":26:{s:4:"name";s:19:"ComponentCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Component Category|A broadly defined title or phrase used to group similar system component categories";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'117\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:131:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'117\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"SysComponentTypeID";a:1:{s:4:"name";s:18:"SysComponentTypeID";}}s:8:"moduleID";s:4:"sysc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:18:"SysComponentTypeID";O:10:"combofield":26:{s:4:"name";s:18:"SysComponentTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Component Type|A combined field used to describe this system component type when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"sysct";s:10:"foreignKey";s:18:"SysComponentTypeID";s:12:"foreignField";s:16:"SysComponentType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:359:"SELECT 
`sysct`.SysComponentTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\': \',IFNULL(`sysct`.ComponentType,\'\')),\': \') AS Name, `sysct`.ComponentCategoryID AS ParentID FROM `sysct`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`sysct`.ComponentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'117\')
WHERE sysct._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:365:"SELECT 
`sysct`.SysComponentTypeID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\': \',IFNULL(`sysct`.ComponentType,\'\')),\': \') AS Name, `sysct`.ComponentCategoryID AS ParentID FROM `sysct`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`sysct`.ComponentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'117\')

WHERE `sysct`.SysComponentTypeID = \'/*recordID*/\'";s:11:"parentField";s:19:"ComponentCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"sysc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:13:"ComponentName";O:9:"editfield":14:{s:4:"name";s:13:"ComponentName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Component Name|A brief description of the system or proces component ";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:20:"ComponentDescription";O:9:"memofield":15:{s:4:"name";s:20:"ComponentDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Description|A detailed description of the component part";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"ComponentNumber";O:9:"editfield":14:{s:4:"name";s:15:"ComponentNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:112:"Component Number|A unique number assigned to the component part for purposes of tracking the specific component ";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"25";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:11:"ComponentID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"sysc";s:6:"phrase";s:15:"Component Parts";s:6:"number";i:1;s:6:"Fields";a:3:{s:16:"SysComponentType";O:9:"viewfield":16:{s:4:"name";s:16:"SysComponentType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:114:"Component Type|A combined field used to describe this system component type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"ComponentName";O:9:"viewfield":16:{s:4:"name";s:13:"ComponentName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Component Name|A brief description of the system or proces component ";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ComponentNumber";O:9:"viewfield":16:{s:4:"name";s:15:"ComponentNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:112:"Component Number|A unique number assigned to the component part for purposes of tracking the specific component ";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"sysc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `sysc`
   
WHERE sysc._Deleted = 0
   AND `sysc`.SubSystemID = \'/**RecordID**/\'
";s:7:"listSQL";s:698:"SELECT 
   `sysc`.ComponentID,
`sys1`.OrganizationID AS OrganizationID,
NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\': \',IFNULL(`sysct1`.ComponentType,\'\')),\': \') AS SysComponentType,
`sysc`.ComponentName,
`sysc`.ComponentNumber
FROM `sysc`

   LEFT OUTER JOIN `syss` AS syss1 
   ON (`sysc`.SubSystemID = `syss1`.SubSystemID )
   LEFT OUTER JOIN `sysct` AS sysct1 
   ON (`sysc`.SysComponentTypeID = `sysct1`.SysComponentTypeID )
   LEFT OUTER JOIN `sys` AS sys1 
   ON (`syss1`.SystemID = `sys1`.SystemID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`sysct1`.ComponentCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'117\')
WHERE sysc._Deleted = 0
AND `sysc`.SubSystemID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:11:"SubSystemID";s:9:"parentKey";s:11:"SubSystemID";s:8:"PKFields";a:1:{i:0;s:11:"ComponentID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'SubSystemID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `syss`.SubSystemID,
   NULLIF(CONCAT(IFNULL(`sys1`.SystemName,'')),'') AS System,
   `sys1`.SystemDesc AS SystemDesc,
   `syss`.SubSystemName,
   `syss`.SubSystemDesc,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS SubSystemLocation,
   NULLIF(CONCAT('Sub System: ',IFNULL(`syss`.SubSystemName,''),' of system: ',IFNULL(NULLIF(CONCAT(IFNULL(`sys1`.SystemName,'')),''),''),' of: ',IFNULL(`org1`.Name,'')),'Sub System:  of system:  of: ') AS RecordLabel,
   `sys1`.OrganizationID AS OrganizationID
FROM `syss`
   
     LEFT OUTER JOIN `sys` AS sys1 
   ON (`syss`.SystemID = `sys1`.SystemID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`syss`.SubSystemID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'syss'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`sys1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   syss.SubSystemID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Sub-System");
        $screenPhrase = gettext("Components|Associate component parts with a sub system");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Sub Systems");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'SubSystemID' => gettext("Record ID|An automatically assigned number used to track sub-systems and sub-processes of the parent system or process"),
   'System' => gettext("System|A combined field used to describe this system when associating it with other records"),
   'SystemDesc' => gettext("System Decsription|A detailed description of the system or process"),
   'SubSystemName' => gettext("Sub System Name|Name used to identify the sub-system or sub-process of the parent system or process"),
   'SubSystemDesc' => gettext("Sub System Description|A detailed description of the sub-system or sub-process of the parent system or process"),
   'Organization' => gettext("Organization|The name of the organization where the system or process exists"),
   'SubSystemLocation' => gettext("Sub System Location|Specific location within the facility where the sub-system is located")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Sub-Systems"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Sub-System") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a sub system") );
      $tempTabs['Components'] = array( "", gettext("Components|Associate component parts with a sub system") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Components'] = array( "", gettext("New Sub-System") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>