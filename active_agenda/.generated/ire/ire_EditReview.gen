<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:24:{s:16:"IncidentReportID";O:9:"viewfield":16:{s:4:"name";s:16:"IncidentReportID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Record ID|An automatically assigned number used to track situations and incidents";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Organization|The primary organization involved in the incident";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EventDate";O:9:"viewfield":16:{s:4:"name";s:9:"EventDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Event Date|Date the situation or incident occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"PersonReporting";O:9:"viewfield":16:{s:4:"name";s:15:"PersonReporting";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Person Reporting|The name of the individual that reported the situation or incident";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Person Accountable|The individual assigned primary accountability for managing the report process";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"RepEvent";O:9:"viewfield":16:{s:4:"name";s:8:"RepEvent";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:216:"Reported Event|A detailed description of the situation or incident, as received from the reporter. Every effort should be made to enter the reporter\'s comments on a word-for-word basis. Who, What, When, Where and Why";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"CachedTotalCost";O:9:"viewfield":16:{s:4:"name";s:15:"CachedTotalCost";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:42:"Total Cost|The total cost of this incident";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"Likelihood";O:9:"viewfield":16:{s:4:"name";s:10:"Likelihood";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:140:"Risk Likelihood|A description of the risk likelihood based on a combination of field values assigned from within the Risk Likelihoods module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Severity";O:9:"viewfield":16:{s:4:"name";s:8:"Severity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:135:"Risk Severity|A description of the risk severity based on a combination of field values assigned from within the Risk Severities module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"CachedSeverityValue";O:9:"viewfield":16:{s:4:"name";s:19:"CachedSeverityValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Cost Severity|The severity this incident";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"RiskRecommendation";O:9:"viewfield":16:{s:4:"name";s:18:"RiskRecommendation";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Recommended Action|An automatically assigned recommendation, based on the values assigned for Likelihood and Severity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"Situations";O:9:"viewfield":16:{s:4:"name";s:10:"Situations";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Situation type|A list of situation types resulting in an incident report";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"InvRptDftComp";O:13:"checkboxfield":14:{s:4:"name";s:13:"InvRptDftComp";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InvRptDftCompDate";O:9:"datefield":15:{s:4:"name";s:17:"InvRptDftCompDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InvRptDftCompByID";O:16:"personcombofield":29:{s:4:"name";s:17:"InvRptDftCompByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ire";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"InvRptDftCompByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"InvRptDftSent";O:13:"checkboxfield":14:{s:4:"name";s:13:"InvRptDftSent";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InvRptDftSentByID";O:16:"personcombofield":29:{s:4:"name";s:17:"InvRptDftSentByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ire";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"InvRptDftSentByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InvRptDftSentDate";O:9:"datefield":15:{s:4:"name";s:17:"InvRptDftSentDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"InvRptDftReceived";O:13:"checkboxfield":14:{s:4:"name";s:17:"InvRptDftReceived";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"InvRptDftRecByID";O:16:"personcombofield":29:{s:4:"name";s:16:"InvRptDftRecByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ire";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:20:"InvRptDftRecByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"InvRptDftRecDate";O:9:"datefield":15:{s:4:"name";s:16:"InvRptDftRecDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"InvRptFinalized";O:13:"checkboxfield":14:{s:4:"name";s:15:"InvRptFinalized";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"InvRptFinalByID";O:16:"personcombofield":29:{s:4:"name";s:15:"InvRptFinalByID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ire";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:19:"InvRptFinalByID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"InvRptFinalDate";O:9:"datefield":15:{s:4:"name";s:15:"InvRptFinalDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Incident Report");

//field value array
$data = array(
        'IncidentReportID' => '',
         'Organization' => '',
         'EventDate' => '',
         'PersonReporting' => '',
         'PersonAccountable' => '',
         'RepEvent' => '',
         'CachedTotalCost' => '',
         'Likelihood' => '',
         'Severity' => '',
         'CachedSeverityValue' => '',
         'RiskRecommendation' => '',
         'Situations' => '',
         'InvRptDftComp' => '',
         'InvRptDftCompDate' => '',
         'InvRptDftCompByID' => '',
         'InvRptDftSent' => '',
         'InvRptDftSentByID' => '',
         'InvRptDftSentDate' => '',
         'InvRptDftReceived' => '',
         'InvRptDftRecByID' => '',
         'InvRptDftRecDate' => '',
         'InvRptFinalized' => '',
         'InvRptFinalByID' => '',
         'InvRptFinalDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'IncidentReportID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "RootCause";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ire`.IncidentReportID,
   `org1`.Name AS Organization,
   `dat1`.RelatedDate AS EventDate,
   `ppl3`.DisplayName AS PersonReporting,
   `ppl1`.DisplayName AS PersonAccountable,
   `ire`.RepEvent,
   ROUND(`csc1`.TotalCost, 2) AS CachedTotalCost,
   NULLIF(CONCAT(IFNULL(`rskl1`.LikelihoodValue,''),' - ',IFNULL(`rskl1`.RiskLikelihoodTerm,''),': ',IFNULL(`rskl1`.RiskLikelihood,'')),' - : ') AS Likelihood,
   NULLIF(CONCAT(IFNULL(`rsks2`.SeverityValue,''),' - ',IFNULL(`rsks2`.RiskSeverityTerm,''),': Loss cost of ',IFNULL(ROUND(`rsks2`.SeverityLowCost, 2),''),' to ',IFNULL(ROUND(`rsks2`.SeverityHighCost, 2),'')),' - : Loss cost of  to ') AS Severity,
   `csc1`.SeverityValue AS CachedSeverityValue,
   (SELECT RiskRecommendation
FROM rskx
WHERE `rskx`.IndexValue <= IFNULL(`rskl1`.LikelihoodValue,0) * IFNULL(IF(`csc1`.SeverityValue > `rsks2`.SeverityValue, `csc1`.SeverityValue, `rsks2`.SeverityValue),0)
ORDER BY `rskx`.IndexValue DESC
LIMIT 1) AS RiskRecommendation,
   `ires1`.Situations AS Situations,
   `ire`.InvRptDftComp,
   `ire`.InvRptDftCompDate,
   `ppl4`.DisplayName AS InvRptDftCompBy,
   `inv3`.PersonInvolvedID AS InvRptDftCompByID,
   `ire`.InvRptDftSent,
   `ppl5`.DisplayName AS InvRptDftSentBy,
   `inv4`.PersonInvolvedID AS InvRptDftSentByID,
   `ire`.InvRptDftSentDate,
   `ire`.InvRptDftReceived,
   `ppl6`.DisplayName AS InvRptDftRecBy,
   `inv5`.PersonInvolvedID AS InvRptDftRecByID,
   `ire`.InvRptDftRecDate,
   `ire`.InvRptFinalized,
   `ppl7`.DisplayName AS InvRptFinalBy,
   `inv6`.PersonInvolvedID AS InvRptFinalByID,
   `ire`.InvRptFinalDate,
   NULLIF(CONCAT(IFNULL(`ire`.IncidentName,''),' | ',IFNULL(`org1`.Name,''),' | ',IFNULL(`dat1`.RelatedDate,''),' Incident ID: ',IFNULL(`ire`.IncidentReportID,'')),' |  |  Incident ID: ') AS RecordLabel,
   `ire`.OrganizationID
FROM `ire`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`ire`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ire`.IncidentReportID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ire'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '16')
     LEFT OUTER JOIN `inv` AS inv2 
    ON (`ire`.IncidentReportID = `inv2`.SourceRecordID 
     AND `inv2`.SourceModuleID = 'ire'
     AND `inv2`._Deleted = 0
     AND `inv2`.InvolvementDescriptorID = '42')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`ire`.IncidentReportID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'ire'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '44')
     LEFT OUTER JOIN `csc` AS csc1 
    ON (`ire`.IncidentReportID = `csc1`.RecordID 
     AND `csc1`.ModuleID = 'ire'
     AND `csc1`._Deleted = 0)
     LEFT OUTER JOIN `rskxa` AS rskxa1 
    ON (`ire`.IncidentReportID = `rskxa1`.SourceRecordID 
     AND `rskxa1`.SourceModuleID = 'ire'
     AND `rskxa1`._Deleted = 0)
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,'')),'') ORDER BY NULLIF(CONCAT(IFNULL(`sitt1`.SituationTitle,'')),'') SEPARATOR ', ') AS Situations,
`ires`.IncidentReportID FROM `ires` 

LEFT OUTER JOIN `sitt` AS sitt1 
   ON (`ires`.SituationTypeID = `sitt1`.SituationTypeID )
 WHERE `ires`._Deleted = 0 
GROUP BY `ires`.IncidentReportID 
) AS ires1 
ON (`ire`.IncidentReportID = ires1.IncidentReportID) 
     LEFT OUTER JOIN `inv` AS inv3 
    ON (`ire`.IncidentReportID = `inv3`.SourceRecordID 
     AND `inv3`.SourceModuleID = 'ire'
     AND `inv3`._Deleted = 0
     AND `inv3`.InvolvementDescriptorID = '38')
     LEFT OUTER JOIN `inv` AS inv4 
    ON (`ire`.IncidentReportID = `inv4`.SourceRecordID 
     AND `inv4`.SourceModuleID = 'ire'
     AND `inv4`._Deleted = 0
     AND `inv4`.InvolvementDescriptorID = '40')
     LEFT OUTER JOIN `inv` AS inv5 
    ON (`ire`.IncidentReportID = `inv5`.SourceRecordID 
     AND `inv5`.SourceModuleID = 'ire'
     AND `inv5`._Deleted = 0
     AND `inv5`.InvolvementDescriptorID = '39')
     LEFT OUTER JOIN `inv` AS inv6 
    ON (`ire`.IncidentReportID = `inv6`.SourceRecordID 
     AND `inv6`.SourceModuleID = 'ire'
     AND `inv6`._Deleted = 0
     AND `inv6`.InvolvementDescriptorID = '41')
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`inv2`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `rskl` AS rskl1 
   ON (`rskxa1`.LikelihoodID = `rskl1`.LikelihoodID )
     LEFT OUTER JOIN `rsks` AS rsks2 
   ON (`rskxa1`.SeverityID = `rsks2`.SeverityID )
     LEFT OUTER JOIN `ppl` AS ppl4 
   ON (`inv3`.PersonInvolvedID = `ppl4`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl5 
   ON (`inv4`.PersonInvolvedID = `ppl5`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl6 
   ON (`inv5`.PersonInvolvedID = `ppl6`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl7 
   ON (`inv6`.PersonInvolvedID = `ppl7`.PersonID )
WHERE
   ire.IncidentReportID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Incident Report");
        $screenPhrase = gettext("Review|Assign and track incident review activities associated with the reported incident or situation");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Incident Reporting");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'IncidentReportID' => gettext("Record ID|An automatically assigned number used to track situations and incidents"),
   'Organization' => gettext("Organization|The primary organization involved in the incident"),
   'EventDate' => gettext("Event Date|Date the situation or incident occurred"),
   'PersonReporting' => gettext("Person Reporting|The name of the individual that reported the situation or incident"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the report process"),
   'RepEvent' => gettext("Reported Event|A detailed description of the situation or incident, as received from the reporter. Every effort should be made to enter the reporter's comments on a word-for-word basis. Who, What, When, Where and Why"),
   'CachedTotalCost' => gettext("Total Cost|The total cost of this incident"),
   'Likelihood' => gettext("Risk Likelihood|A description of the risk likelihood based on a combination of field values assigned from within the Risk Likelihoods module"),
   'Severity' => gettext("Risk Severity|A description of the risk severity based on a combination of field values assigned from within the Risk Severities module"),
   'CachedSeverityValue' => gettext("Cost Severity|The severity this incident"),
   'RiskRecommendation' => gettext("Recommended Action|An automatically assigned recommendation, based on the values assigned for Likelihood and Severity"),
   'Situations' => gettext("Situation type|A list of situation types resulting in an incident report"),
   'InvRptDftComp' => gettext("Investigative Draft Report Completed|Check this box if an investigative draft report has been completed"),
   'InvRptDftCompDate' => gettext("Completion Date|Date the investigative draft report was completed"),
   'InvRptDftCompByID' => gettext("Draft Report Author|The name of the individual that authored the investigative draft report"),
   'InvRptDftSent' => gettext("Investigative Draft Report Sent|Check this box if an investigative draft report has been sent"),
   'InvRptDftSentByID' => gettext("Sender|The name of the individual that sent the investigative draft report"),
   'InvRptDftSentDate' => gettext("Draft Report Sent Date|Date the investigative draft report was sent"),
   'InvRptDftReceived' => gettext("Investigative Draft Report Received|Check this box if an investigative draft report has been received"),
   'InvRptDftRecByID' => gettext("Recipient|The name of the individual that received the investigative draft report"),
   'InvRptDftRecDate' => gettext("Received Date|Date the investigative draft report was received"),
   'InvRptFinalized' => gettext("Investigative Report Finalized|Check this box if an investigative report has been finalized"),
   'InvRptFinalByID' => gettext("Final Report Author|The name of the individual that authored the final investigative report"),
   'InvRptFinalDate' => gettext("Final Report Date|Date the investigative report was finalized")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['InvRptDftComp'], ShortPhrase($phrases['InvRptDftComp']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftComp']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftCompDate'], ShortPhrase($phrases['InvRptDftCompDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftCompDate']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftCompByID'], ShortPhrase($phrases['InvRptDftCompByID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftCompByID']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftSent'], ShortPhrase($phrases['InvRptDftSent']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftSent']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftSentByID'], ShortPhrase($phrases['InvRptDftSentByID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftSentByID']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftSentDate'], ShortPhrase($phrases['InvRptDftSentDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftSentDate']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftReceived'], ShortPhrase($phrases['InvRptDftReceived']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftReceived']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftRecByID'], ShortPhrase($phrases['InvRptDftRecByID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftRecByID']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptDftRecDate'], ShortPhrase($phrases['InvRptDftRecDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptDftRecDate']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptFinalized'], ShortPhrase($phrases['InvRptFinalized']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptFinalized']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptFinalByID'], ShortPhrase($phrases['InvRptFinalByID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptFinalByID']->invalid = TRUE;
            }
$vMsg = Validate($data['InvRptFinalDate'], ShortPhrase($phrases['InvRptFinalDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['InvRptFinalDate']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Incident Reports"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Incident Report") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the reported incident or situation") );
      $tempTabs['Situations'] = array( "edit.php?scr=Situations&$tabsQS", gettext("Situations|Edit summary information about the situations leading to a reported incident") );
      $tempTabs['Numbers'] = array( "edit.php?scr=Numbers&$tabsQS", gettext("Numbers|Associate one or more incident numbers with a reported incident or situation") );
      $tempTabs['Documentation'] = array( "edit.php?scr=Documentation&$tabsQS", gettext("Documentation|Track the status of documentation delivery requirements associated with an incident report") );
      $tempTabs['RiskMatrix'] = array( "edit.php?scr=RiskMatrix&$tabsQS", gettext("Risk Matrix|Associate risk matrix values with a reported incident or situation") );
      $tempTabs['Products'] = array( "edit.php?scr=Products&$tabsQS", gettext("Products|Associate products and/or services with a situation requiring involvement and/or reporting") );
      $tempTabs['EmploymentPracticeLoss'] = array( "edit.php?scr=EmploymentPracticeLoss&$tabsQS", gettext("Labor|Associate one or more employment practice incidents with a reported incident or situation") );
      $tempTabs['EnvironmentalLoss'] = array( "edit.php?scr=EnvironmentalLoss&$tabsQS", gettext("Environment|Associate one or more environmental incidents with a reported incident or situation") );
      $tempTabs['InjuryLoss'] = array( "edit.php?scr=InjuryLoss&$tabsQS", gettext("Injury|Associate one or more injury incidents with a reported incident or situation") );
      $tempTabs['ITLoss'] = array( "edit.php?scr=ITLoss&$tabsQS", gettext("Technology|Associate one or more information technology losses with a reported incident or situation") );
      $tempTabs['ProductServiceLoss'] = array( "edit.php?scr=ProductServiceLoss&$tabsQS", gettext("Product|Associate one or more product/service incidents with a reported incident or situation") );
      $tempTabs['BuildingLoss'] = array( "edit.php?scr=BuildingLoss&$tabsQS", gettext("Building|Associate one or more building incidents with a reported incident or situation") );
      $tempTabs['EquipmentLoss'] = array( "edit.php?scr=EquipmentLoss&$tabsQS", gettext("Equipment|Associate one or more equipment incidents with a reported incident or situation") );
      $tempTabs['OtherAssetLoss'] = array( "edit.php?scr=OtherAssetLoss&$tabsQS", gettext("Other|Associate one or more asset incidents with a reported incident or situation") );
      $tempTabs['VehicleLoss'] = array( "edit.php?scr=VehicleLoss&$tabsQS", gettext("Vehicle|Associate one or more vehicle incidents with a reported incident or situation") );
      $tempTabs['Contacts'] = array( "edit.php?scr=Contacts&$tabsQS", gettext("Contacts|Display contacts associated with a reported incident or situation based upon contact conditions established within the situation contacts module") );
      $tempTabs['Litigation'] = array( "edit.php?scr=Litigation&$tabsQS", gettext("Litigation|Associate law firms and lead attorneys with the reported incident or situation") );
      $tempTabs['Review'] = array( "", gettext("Review|Assign and track incident review activities associated with the reported incident or situation") );
      $tempTabs['RootCause'] = array( "edit.php?scr=RootCause&$tabsQS", gettext("Causes|Associate root causes of the reported incident or situation") );
      $tempTabs['PolicyViolations'] = array( "edit.php?scr=PolicyViolations&$tabsQS", gettext("Policies|Assign and track policy violations associated with the reported incident or situation") );
      $tempTabs['ClosureandFollowUp'] = array( "edit.php?scr=ClosureandFollowUp&$tabsQS", gettext("Closure|Edit incident closure factors and ongoing follow-up assignments associated with the reported incident or situation") );
      $tempTabs['WorkOrders'] = array( "edit.php?scr=WorkOrders&$tabsQS", gettext("Orders|Associate hazard abatement work orders with the reported incident or situation") );
      $tempTabs['Publicity'] = array( "edit.php?scr=Publicity&$tabsQS", gettext("Publicity|Associate publicity exposures with the reported incident or situation") );
      $tempTabs['Telephone'] = array( "edit.php?scr=Telephone&$tabsQS", gettext("Telephone|Associate telephone calls with the reported incident or situation") );
      $tempTabs['AgencyLetter'] = array( "edit.php?scr=AgencyLetter&$tabsQS", gettext("Letters|Associate letters with the reported incident or situation") );
      $tempTabs['Visitations'] = array( "edit.php?scr=Visitations&$tabsQS", gettext("Visitations|Associate agency visits with the reported incident or situation") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the reported incident or situation") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the reported incident or situation") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the reported incident or situation") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the reported incident or situation") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the reported incident or situation") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Review'] = array( "", gettext("New Report") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"InvRptDftCompDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_InvRptDftCompDate\"
});
Calendar.setup({
   inputField : \"InvRptDftSentDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_InvRptDftSentDate\"
});
Calendar.setup({
   inputField : \"InvRptDftRecDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_InvRptDftRecDate\"
});
Calendar.setup({
   inputField : \"InvRptFinalDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_InvRptFinalDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>