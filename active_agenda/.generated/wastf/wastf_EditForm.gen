<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:15:"WasteTransferID";O:9:"viewfield":16:{s:4:"name";s:15:"WasteTransferID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Waste Transport|An automatically assigned number used to track shipments of organizational waste";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Waste";O:9:"viewfield":16:{s:4:"name";s:5:"Waste";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Waste Stream|A combined field used to describe this waste when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"WasteTransporterID";O:13:"orgcombofield":26:{s:4:"name";s:18:"WasteTransporterID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:277:"SELECT 
`wastp`.TransporterID AS ID, `org1`.Name AS Name FROM `wastp`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`wastp`.TransporterID = `org1`.OrganizationID )
 LEFT OUTER JOIN `was` AS was1 
   ON (`wastp`.WasteID = `was1`.WasteID )
WHERE wastp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:278:"SELECT 
`wastp`.TransporterID AS ID, `org1`.Name AS Name FROM `wastp`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`wastp`.TransporterID = `org1`.OrganizationID )
 LEFT OUTER JOIN `was` AS was1 
   ON (`wastp`.WasteID = `was1`.WasteID )

WHERE `wastp`.TransporterID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`was1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"TransferPersonID";O:16:"personcombofield":29:{s:4:"name";s:16:"TransferPersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:20:"TransferPersonID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"WasteShipDate";O:9:"datefield":15:{s:4:"name";s:13:"WasteShipDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"WasteShipAmt";O:9:"editfield":14:{s:4:"name";s:12:"WasteShipAmt";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:26:"WasteShipAmtUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:26:"WasteShipAmtUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:19:"WasteShipAmtUnitsID";a:1:{s:4:"name";s:19:"WasteShipAmtUnitsID";}}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:19:"WasteShipAmtUnitsID";O:10:"combofield":26:{s:4:"name";s:19:"WasteShipAmtUnitsID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:26:"WasteShipAmtUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"float";s:8:"validate";s:35:"Number notNegative notZero notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:5:"Price";O:10:"moneyfield":18:{s:4:"name";s:5:"Price";s:10:"parentName";s:0:"";s:6:"Fields";a:3:{s:4:"Self";O:10:"moneyfield":18:{s:4:"name";s:5:"Price";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:5:"Money";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:19:"PriceUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:19:"PriceUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:11:"PriceUnitID";a:1:{s:4:"name";s:11:"PriceUnitID";}}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:11:"PriceUnitID";O:10:"combofield":26:{s:4:"name";s:11:"PriceUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:19:"PriceUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:5:"Money";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:7:"Revenue";O:10:"moneyfield":18:{s:4:"name";s:7:"Revenue";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:5:"Money";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:23:"WasteDisposalFacilityID";O:13:"orgcombofield":26:{s:4:"name";s:23:"WasteDisposalFacilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:292:"SELECT 
`wasdf`.WasteDisposalFacilityID AS ID, `org1`.Name AS Name FROM `wasdf`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`wasdf`.DisposalFacilityID = `org1`.OrganizationID )
 LEFT OUTER JOIN `was` AS was1 
   ON (`wasdf`.WasteID = `was1`.WasteID )
WHERE wasdf._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:303:"SELECT 
`wasdf`.WasteDisposalFacilityID AS ID, `org1`.Name AS Name FROM `wasdf`
 
 LEFT OUTER JOIN `org` AS org1 
   ON (`wasdf`.DisposalFacilityID = `org1`.OrganizationID )
 LEFT OUTER JOIN `was` AS was1 
   ON (`wasdf`.WasteID = `was1`.WasteID )

WHERE `wasdf`.WasteDisposalFacilityID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"wastf";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`was1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Waste Transfer");

//field value array
$data = array(
        'WasteTransferID' => '',
         'Waste' => '',
         'WasteTransporterID' => '',
         'TransferPersonID' => '',
         'WasteShipDate' => '',
         'WasteShipAmtUnitCategoryID' => '',
         'WasteShipAmtUnitsID' => '',
         'WasteShipAmt' => '',
         'PriceUnitCategoryID' => '',
         'PriceUnitID' => '',
         'Price' => '',
         'Revenue' => '',
         'WasteDisposalFacilityID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'WasteTransferID';

    $ownerField = 'WasteOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `wastf`.WasteTransferID,
   NULLIF(CONCAT(IFNULL(`was1`.WasteName,'')),'') AS Waste,
   `org2`.Name AS WasteTransporter,
   `wastf`.WasteTransporterID,
   `ppl1`.DisplayName AS TransferPerson,
   `acc1`.PersonAccountableID AS TransferPersonID,
   `dat1`.RelatedDate AS WasteShipDate,
   `cod4`.Description AS WasteShipAmtUnitCategory,
   `uts1`.UnitCategoryID AS WasteShipAmtUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,'')),'') AS WasteShipAmtUnits,
   `wastf`.WasteShipAmtUnitsID,
   `wastf`.WasteShipAmt,
   `cod5`.Description AS PriceUnitCategory,
   `uts2`.UnitCategoryID AS PriceUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts2`.UnitName,'')),'') AS PriceUnit,
   `wastf`.PriceUnitID,
   `wastf`.Price,
   `wastf`.Revenue,
   `org3`.Name AS WasteDisposalFacility,
   `wastf`.WasteDisposalFacilityID,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`cod3`.Description,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`was1`.WasteName,'')),''),''),' | ',IFNULL(`org2`.Name,''),' | ',IFNULL(`dat1`.RelatedDate,'')),' |  |  |  | ') AS RecordLabel,
   `was1`.OrganizationID AS WasteOrganizationID
FROM `wastf`
   
     LEFT OUTER JOIN `was` AS was1 
   ON (`wastf`.WasteID = `was1`.WasteID )
     LEFT OUTER JOIN `wastp` AS wastp1 
   ON (`wastf`.WasteTransporterID = `wastp1`.TransporterID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`wastf`.WasteTransferID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'wastf'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '92')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`wastf`.WasteTransferID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'wastf'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '46')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`wastf`.WasteShipAmtUnitsID = `uts1`.UnitID )
     LEFT OUTER JOIN `uts` AS uts2 
   ON (`wastf`.PriceUnitID = `uts2`.UnitID )
     LEFT OUTER JOIN `wasdf` AS wasdf1 
   ON (`wastf`.WasteDisposalFacilityID = `wasdf1`.WasteDisposalFacilityID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`was1`.WasteTypeID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '11')
     LEFT OUTER JOIN `org` AS org1 
   ON (`was1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`wastp1`.TransporterID = `org2`.OrganizationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`uts1`.UnitCategoryID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '37')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`uts2`.UnitCategoryID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '37')
     LEFT OUTER JOIN `org` AS org3 
   ON (`wasdf1`.DisposalFacilityID = `org3`.OrganizationID )
WHERE
   wastf.WasteTransferID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Waste Transfer");
        $screenPhrase = gettext("Form|Edit summary information about a waste transfer");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Waste Transfer");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'WasteTransferID' => gettext("Waste Transport|An automatically assigned number used to track shipments of organizational waste"),
   'Waste' => gettext("Waste Stream|A combined field used to describe this waste when associating it with other records"),
   'WasteTransporterID' => gettext("Waste Transporter|A combined field used to describe this waste transporter when associating it with other records"),
   'TransferPersonID' => gettext("Transfer Person|The name of the person transfering the waste to the transporter on behalf of the organization"),
   'WasteShipDate' => gettext("Shipment Date|The date the waste was shipped from the organization"),
   'WasteShipAmt' => gettext("Amount Shipped|The amount of waste that was shiped on the waste shipment date"),
   'Price' => gettext("Price|The price per unit paid for this waste stream stated in the currency established for the site installation of the software"),
   'Revenue' => gettext("Revenue|An automatically calculated value based on the price per unit of this waste and the number of units shipped, stated in the currency established for the site installation of the software"),
   'WasteDisposalFacilityID' => gettext("Waste Disposal Facility|A combined field used to describe this waste disposal facility when associating it with other records")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['WasteTransporterID'], ShortPhrase($phrases['WasteTransporterID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WasteTransporterID']->invalid = TRUE;
            }
$vMsg = Validate($data['TransferPersonID'], ShortPhrase($phrases['TransferPersonID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['TransferPersonID']->invalid = TRUE;
            }
$vMsg = Validate($data['WasteShipDate'], ShortPhrase($phrases['WasteShipDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WasteShipDate']->invalid = TRUE;
            }
$vMsg = Validate($data['WasteShipAmt'], ShortPhrase($phrases['WasteShipAmt']), 'Number notNegative notZero notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WasteShipAmt']->invalid = TRUE;
            }
$vMsg = Validate($data['Price'], ShortPhrase($phrases['Price']), 'Money');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Price']->invalid = TRUE;
            }
$vMsg = Validate($data['Revenue'], ShortPhrase($phrases['Revenue']), 'Money');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Revenue']->invalid = TRUE;
            }
$vMsg = Validate($data['WasteDisposalFacilityID'], ShortPhrase($phrases['WasteDisposalFacilityID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['WasteDisposalFacilityID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Waste Transfers"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Waste Transfer") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a waste transfer") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Waste Transfer") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"WasteShipDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_WasteShipDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>