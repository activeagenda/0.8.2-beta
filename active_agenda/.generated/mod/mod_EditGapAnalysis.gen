<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:13:{s:8:"ModuleID";O:9:"viewfield":16:{s:4:"name";s:8:"ModuleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:237:"Module ID|A unique character ID assigned to each module of the application. Character ID\'s are usually between three and five characters. Main module ID\'s typically contain three characters and sub-modules contain four to five characters";s:8:"dataType";s:10:"varchar(5)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Name";O:9:"viewfield":16:{s:4:"name";s:4:"Name";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:34:"Module Name|The name of the module";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ModuleDesc";O:9:"viewfield":16:{s:4:"name";s:10:"ModuleDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Module Description|A detailed description of the purpose of the module";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:23:"GlobalDiscussionAddress";O:9:"viewfield":16:{s:4:"name";s:23:"GlobalDiscussionAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Global Discussion ID|The ID assigned to the global discussion forum most relevant to this module";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:22:"LocalDiscussionAddress";O:9:"viewfield":16:{s:4:"name";s:22:"LocalDiscussionAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Local Discussion ID|The ID assigned to the local discussion forum most relevant to this module";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"StandAlone";O:9:"viewfield":16:{s:4:"name";s:10:"StandAlone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Stand Alone|Whether this module is a stand alone module";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"SubModule";O:9:"viewfield":16:{s:4:"name";s:9:"SubModule";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Sub Module|Whether this module is a sub module of another module";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"Association";O:9:"viewfield":16:{s:4:"name";s:11:"Association";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:115:"Association|Whether this module is an association module which is used to associate many modules of different types";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Global";O:9:"viewfield":16:{s:4:"name";s:6:"Global";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Global|Whether this module is a global module which is available from within all other modules";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Remote";O:9:"viewfield":16:{s:4:"name";s:6:"Remote";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Remote|Whether this module is a remote module, i.e. pointed to by RemoteFields from other modules";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ModuleStatus";O:9:"viewfield":16:{s:4:"name";s:12:"ModuleStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Module Status|A short description of the technical implementation status of the module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ModuleDependencies";O:9:"viewfield":16:{s:4:"name";s:18:"ModuleDependencies";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Module Dependencies|A calculated field representing the total number of modules dependent upon this module";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:16:"CodeDependencies";O:9:"viewfield":16:{s:4:"name";s:16:"CodeDependencies";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:104:"Code Dependencies|A calculated field representing the total number of codes the module is dependent upon";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Module");

//field value array
$data = array(
        'ModuleID' => '',
         'Name' => '',
         'ModuleDesc' => '',
         'GlobalDiscussionAddress' => '',
         'LocalDiscussionAddress' => '',
         'StandAlone' => '',
         'SubModule' => '',
         'Association' => '',
         'Global' => '',
         'Remote' => '',
         'ModuleStatus' => '',
         'ModuleDependencies' => '',
         'CodeDependencies' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:461:"SELECT 
   `gap`.GapAnalysisID,
   `cod1`.Description AS AnalysisType,
   `gap`.AnalysisTypeID,
   `gap`.AnalysisItem,
   `gap`.AnalysisDescription,
   `gap`.KeyResources,
   `gap`.KeyLocations,
   `gap`.KeyRisks,
   `gap`.HoursEstimate,
   `gap`.MethodsandBenefits,
   `gap`.AdvancedCopy
FROM `gap`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`gap`.AnalysisTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'157\')
WHERE
   gap.GapAnalysisID=\'/**RowID**/\'";s:9:"getRowSQL";s:312:"SELECT 
   `gap`.GapAnalysisID,
   `cod1`.Description AS AnalysisType,
   `gap`.AnalysisItem,
   `gap`.HoursEstimate,
   `gap`.AdvancedCopy
FROM `gap`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`gap`.AnalysisTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'157\')
WHERE
   gap.GapAnalysisID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:10:{s:13:"GapAnalysisID";O:14:"invisiblefield":11:{s:4:"name";s:13:"GapAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|An automatically assigned number used to track application issues which need to be addressed";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"AnalysisTypeID";O:14:"codecombofield":27:{s:4:"name";s:14:"AnalysisTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Analysis Type|The specific type of gap analysis performed";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'157\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'157\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"gap";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"157";}s:12:"AnalysisItem";O:9:"editfield":14:{s:4:"name";s:12:"AnalysisItem";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Analysis Item|A brief title used to identify the item being analyzed for gaps";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:19:"AnalysisDescription";O:9:"memofield":15:{s:4:"name";s:19:"AnalysisDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Analysis Description|A more detailed description of the item to be analyzed for gaps";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"KeyResources";O:9:"memofield":15:{s:4:"name";s:12:"KeyResources";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:136:"Key Resources|A list of key human resources and/or job titles likely to be of assistance when analyzing for gaps in the business process";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"KeyLocations";O:9:"memofield":15:{s:4:"name";s:12:"KeyLocations";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:133:"Key Locations|A list of key locations where business processes occur, process materials are maintained, or processes can be evaluated";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:8:"KeyRisks";O:9:"memofield":15:{s:4:"name";s:8:"KeyRisks";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Key Risks|A brief description of the key risks associated with failure to manage or repair gaps in the business process";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"HoursEstimate";O:9:"editfield":14:{s:4:"name";s:13:"HoursEstimate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Estimate (hours)|The number of hours estimated to analyze gaps in the business process";s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notNegative notEmpty";s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:18:"MethodsandBenefits";O:9:"memofield":15:{s:4:"name";s:18:"MethodsandBenefits";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:148:"Methods and Benefits|A brief description of the methods used by Active Agenda to address the operational risk requirement and the resulting benefits";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"AdvancedCopy";O:13:"checkboxfield":14:{s:4:"name";s:12:"AdvancedCopy";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:134:"Send Advance Copy|Whether an advanced copy of the gap analysis item should be sent to the reviewer prior to the scheduled gap analysis";s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:13:"GapAnalysisID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"gap";s:6:"phrase";s:17:"Gap Analysis Item";s:6:"number";i:1;s:6:"Fields";a:5:{s:13:"GapAnalysisID";O:14:"invisiblefield":11:{s:4:"name";s:13:"GapAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|An automatically assigned number used to track application issues which need to be addressed";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"AnalysisType";O:9:"viewfield":16:{s:4:"name";s:12:"AnalysisType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Analysis Type|The specific type of gap analysis performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"AnalysisItem";O:9:"viewfield":16:{s:4:"name";s:12:"AnalysisItem";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Analysis Item|A brief title used to identify the item being analyzed for gaps";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"HoursEstimate";O:9:"viewfield":16:{s:4:"name";s:13:"HoursEstimate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Estimate (hours)|The number of hours estimated to analyze gaps in the business process";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"AdvancedCopy";O:9:"viewfield":16:{s:4:"name";s:12:"AdvancedCopy";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:134:"Send Advance Copy|Whether an advanced copy of the gap analysis item should be sent to the reviewer prior to the scheduled gap analysis";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"gap";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:101:"SELECT 
    count(*) 
FROM `gap`
   
WHERE gap._Deleted = 0
   AND `gap`.ModuleID = \'/**RecordID**/\'
";s:7:"listSQL";s:317:"SELECT 
   `gap`.GapAnalysisID,
`cod1`.Description AS AnalysisType,
`gap`.AnalysisItem,
`gap`.HoursEstimate,
`gap`.AdvancedCopy
FROM `gap`

   LEFT OUTER JOIN `cod` AS cod1 
   ON (`gap`.AnalysisTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'157\')
WHERE gap._Deleted = 0
AND `gap`.ModuleID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"ModuleID";s:9:"parentKey";s:8:"ModuleID";s:8:"PKFields";a:1:{i:0;s:13:"GapAnalysisID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'ModuleID';

    $ownerField = '';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `mod`.ModuleID,
   `mod`.Name,
   `mod`.ModuleDesc,
   `mod`.GlobalDiscussionAddress,
   `mod`.LocalDiscussionAddress,
   `mod`.StandAlone,
   `mod`.SubModule,
   `mod`.Association,
   `mod`.Global,
   `mod`.Remote,
   `cod1`.Description AS ModuleStatus,
   `modd1`.ModuleDependencies AS ModuleDependencies,
   `codtd1`.CodeDependencies AS CodeDependencies,
   NULLIF(CONCAT(IFNULL(`mod`.Name,''),' | ',IFNULL(`cod1`.Description,''),' Last parsed: ',IFNULL(`mod`.LastParsed,'')),' |  Last parsed: ') AS RecordLabel
FROM `mod`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`mod`.ModuleStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '272')
     LEFT OUTER JOIN (SELECT 
COUNT(`modd`.DependencyID) AS ModuleDependencies,
`modd`.ModuleID FROM `modd` 
 WHERE `modd`._Deleted = 0 
GROUP BY `modd`.ModuleID 
) AS modd1 
ON (`mod`.ModuleID = modd1.ModuleID) 
     LEFT OUTER JOIN (SELECT 
COUNT(`codtd`.CodeTypeID) AS CodeDependencies,
`codtd`.DependencyID FROM `codtd` 
 WHERE `codtd`._Deleted = 0 
GROUP BY `codtd`.DependencyID 
) AS codtd1 
ON (`mod`.ModuleID = codtd1.DependencyID) 
WHERE
   mod.ModuleID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if (strlen($recordID) > 1) {
        $existing = true;

        $pageTitle = gettext("Module");
        $screenPhrase = gettext("Gap Analysis|Associate gap analysis criteria with a module");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Modules");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ModuleID' => gettext("Module ID|A unique character ID assigned to each module of the application. Character ID's are usually between three and five characters. Main module ID's typically contain three characters and sub-modules contain four to five characters"),
   'Name' => gettext("Module Name|The name of the module"),
   'ModuleDesc' => gettext("Module Description|A detailed description of the purpose of the module"),
   'GlobalDiscussionAddress' => gettext("Global Discussion ID|The ID assigned to the global discussion forum most relevant to this module"),
   'LocalDiscussionAddress' => gettext("Local Discussion ID|The ID assigned to the local discussion forum most relevant to this module"),
   'StandAlone' => gettext("Stand Alone|Whether this module is a stand alone module"),
   'SubModule' => gettext("Sub Module|Whether this module is a sub module of another module"),
   'Association' => gettext("Association|Whether this module is an association module which is used to associate many modules of different types"),
   'Global' => gettext("Global|Whether this module is a global module which is available from within all other modules"),
   'Remote' => gettext("Remote|Whether this module is a remote module, i.e. pointed to by RemoteFields from other modules"),
   'ModuleStatus' => gettext("Module Status|A short description of the technical implementation status of the module"),
   'ModuleDependencies' => gettext("Module Dependencies|A calculated field representing the total number of modules dependent upon this module"),
   'CodeDependencies' => gettext("Code Dependencies|A calculated field representing the total number of codes the module is dependent upon")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Modules"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Module") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|The screen used to edit summary information about modules") );
      $tempTabs['Issues'] = array( "edit.php?scr=Issues&$tabsQS", gettext("Issues|Associate issue reports with a module") );
      $tempTabs['Direction'] = array( "edit.php?scr=Direction&$tabsQS", gettext("Direction|Associate organizational direction with a module") );
      $tempTabs['GapAnalysis'] = array( "", gettext("Gap Analysis|Associate gap analysis criteria with a module") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['GapAnalysis'] = array( "", gettext("New Module") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>