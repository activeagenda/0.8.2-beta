<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

    /**CUSTOM_CODE|init**/

    //list of objects containing the field information
    $fields = unserialize('a:8:{s:16:"AccountabilityID";O:9:"viewfield":16:{s:4:"name";s:16:"AccountabilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Record ID|An automatically assigned number used to track accountability assignments";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"SourceModuleRecord";O:9:"viewfield":16:{s:4:"name";s:18:"SourceModuleRecord";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Related Record|A combined field used to display the source module name and record ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:16:"SourceRecordLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"RelatedRecordDescription";O:9:"viewfield":16:{s:4:"name";s:24:"RelatedRecordDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Record Description|A group of fields used to describe the source record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Person Accountable|The individual assigned primary accountability for the subject matter of this record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:24:"AccountabilityDescriptor";O:9:"viewfield":16:{s:4:"name";s:24:"AccountabilityDescriptor";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:226:"Specific Accountability|A word or phrase describing the specific accountability of the person. The specific accountability is automatically generated by the system based on the assignment which occurred within a related module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Details";O:9:"viewfield":16:{s:4:"name";s:7:"Details";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:157:"Accountability Details|A detailed description of the personal accountability and any notes which may be of importance to anyone inheriting the accountability";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"AccountabilityStatus";O:9:"viewfield":16:{s:4:"name";s:20:"AccountabilityStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:161:"Status|Current status of the personal accountability. Some accountabilities are of a short term but renewable nature and others can be ongoing without limitation";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskImperatives";O:9:"viewfield":16:{s:4:"name";s:15:"RiskImperatives";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Risk Imperatives|A list of associated Risk Imperatives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'AccountabilityID' => gettext("Record ID|An automatically assigned number used to track accountability assignments"),
   'SourceModuleRecord' => gettext("Related Record|A combined field used to display the source module name and record ID"),
   'RelatedRecordDescription' => gettext("Record Description|A group of fields used to describe the source record"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for the subject matter of this record"),
   'AccountabilityDescriptor' => gettext("Specific Accountability|A word or phrase describing the specific accountability of the person. The specific accountability is automatically generated by the system based on the assignment which occurred within a related module"),
   'Details' => gettext("Accountability Details|A detailed description of the personal accountability and any notes which may be of importance to anyone inheriting the accountability"),
   'AccountabilityStatus' => gettext("Status|Current status of the personal accountability. Some accountabilities are of a short term but renewable nature and others can be ongoing without limitation"),
   'RiskImperatives' => gettext("Risk Imperatives|A list of associated Risk Imperatives")
   );


    $ownerField = 'PersonAccountableOrganizationID';

    
    $disableGlobalModules = true;
    /**useBestPractices**/

    //retrieve record
    $data = array();
    
    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `acc`.AccountabilityID,
   CONCAT('internal:view.php?mdl=',`acc`.SourceModuleID,'&rid=',`acc`.SourceRecordID) AS SourceRecordLink,
   NULLIF(CONCAT(IFNULL(`mod1`.Name,''),' Module (Record ID: ',IFNULL(`acc`.SourceRecordID,''),')'),' Module (Record ID: )') AS SourceModuleRecord,
   `rdc1`.Value AS RelatedRecordDescription,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod1`.Description AS AccountabilityDescriptor,
   `acc`.Details,
   `cod2`.Description AS AccountabilityStatus,
   `rsk1`.RiskImperatives AS RiskImperatives,
   NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,''),' | ',IFNULL(`cod1`.Description,'')),' | ') AS RecordLabel,
   `ppl1`.OrganizationID AS PersonAccountableOrganizationID
FROM `acc`
   
     LEFT OUTER JOIN `mod` AS mod1 
   ON (`acc`.SourceModuleID = `mod1`.ModuleID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`acc`.SourceRecordID = rdc1.RecordID AND `acc`.SourceModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`acc`.AccountabilityDescriptorID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '260')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`acc`.AccountabilityStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '199')
     LEFT OUTER JOIN (SELECT 
GROUP_CONCAT(`cod1`.Description ORDER BY `cod1`.Description SEPARATOR ', ') AS RiskImperatives,
`rsk`.RelatedRecordID FROM `rsk` 

LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '234')
 WHERE `rsk`._Deleted = 0 
 AND RelatedModuleID = 'acc' 
 AND 'acc' = `rsk`.RelatedModuleID
GROUP BY `rsk`.RelatedRecordID 
) AS rsk1 
ON (`acc`.AccountabilityID = rsk1.RelatedRecordID) 
WHERE
   acc.AccountabilityID='/**RecordID**/'";

    /**CUSTOM_CODE|before_get**/

    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    
    /**SQL|GET_END**/
    //need to repeat for each getSQL........
    $data = array_merge($data, $r[0]); //assign first (only) row
    
    /**CUSTOM_CODE|get**/
    
    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Accountabilities"));

    if ($allowEdit){
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Accountability") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit an accountability assignment") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with a person's accountabilities") );
$tabs = array_merge($tabs, $tempTabs);
    } else {
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Accountability") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Accountability") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Accountability") );
$tabs = array_merge($tabs, $tempTabs);
    }
    
    $recordLabelField = $data['RecordLabel'];

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Accountability");
    $screenPhrase = gettext("View|View an accountability assignment");

    $backlink = "list.php?$qs";

    $nextScreen = "Form";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here


//View Screen Sections here
/**VIEWSCREENSECTIONS**/
?>
