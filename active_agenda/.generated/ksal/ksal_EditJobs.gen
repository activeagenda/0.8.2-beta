<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:7:"LevelID";O:9:"viewfield":16:{s:4:"name";s:7:"LevelID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Record ID|An automatically assigned number used to track KSA Levels";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:3:"KSA";O:9:"viewfield":16:{s:4:"name";s:3:"KSA";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"KSA|A combined field used to describe this KSA when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"KSADesc";O:9:"viewfield":16:{s:4:"name";s:7:"KSADesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"KSA Description|A brief phrase used to describe the knowldege, skill, and or ability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"KSAGroupAbbr";O:9:"viewfield":16:{s:4:"name";s:12:"KSAGroupAbbr";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Abbreviation|A grouping of area, capability, and KSA abbreviations for reporting purposes";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"KSALevel";O:9:"viewfield":16:{s:4:"name";s:8:"KSALevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:135:"Qualification Level|A term or phrase used to distinguish qualification levels associated with required knowldege, skills, or experience";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"KSALevelDesc";O:9:"viewfield":16:{s:4:"name";s:12:"KSALevelDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Level Description|A brief but detailed description of knowldege, skill, and/or ability level";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ReviewCriteria";O:9:"viewfield":16:{s:4:"name";s:14:"ReviewCriteria";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Review Criteria|A brief description of the criteria used to assess a person\'s level of knowledge, skill, and/or ability";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"TrainingQualified";O:9:"viewfield":16:{s:4:"name";s:17:"TrainingQualified";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Training Qualified|Whether individuals are qualified by training";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"ExperienceQualified";O:9:"viewfield":16:{s:4:"name";s:19:"ExperienceQualified";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Experience Qualified|Whether individuals are qualified by experience";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"MedicallyQualified";O:9:"viewfield":16:{s:4:"name";s:18:"MedicallyQualified";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Medically Qualified|Whether individuals are qualified by medical examiniation or testing";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Qualification Levels");

//field value array
$data = array(
        'LevelID' => '',
         'KSA' => '',
         'KSADesc' => '',
         'KSAGroupAbbr' => '',
         'KSALevel' => '',
         'KSALevelDesc' => '',
         'ReviewCriteria' => '',
         'TrainingQualified' => '',
         'ExperienceQualified' => '',
         'MedicallyQualified' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:533:"SELECT 
   `jank`.JobKSAID,
   `org1`.Name AS JAOrganization,
   `jan1`.OrganizationID AS JAOrganizationID,
   NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis,
   `jank`.JobAnalysisID,
   `jan1`.JobAnalysisNumber AS JobAnalysisNumber,
   `jan1`.JobAnalysisDesc AS JobAnalysisDesc
FROM `jank`
   
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jank`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
WHERE
   jank.JobKSAID=\'/**RowID**/\'";s:9:"getRowSQL";s:553:"SELECT 
   `jank`.JobKSAID,
   `org1`.Name AS JAOrganization,
   `jan1`.JobAnalysisNumber AS JobAnalysisNumber,
   CONCAT(\'internal:view.php?mdl=\',\'jan\',\'&rid=\',`jank`.JobAnalysisID) AS JobAnalysisLink,
   NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis,
   `jan1`.OrganizationID AS JAOrganizationID
FROM `jank`
   
     LEFT OUTER JOIN `jan` AS jan1 
   ON (`jank`.JobAnalysisID = `jan1`.JobAnalysisID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
WHERE
   jank.JobKSAID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:5:{s:8:"JobKSAID";O:14:"invisiblefield":11:{s:4:"name";s:8:"JobKSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Record ID|An automatically assigned number used to track knowledge, skill, and bility associations with jobs";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"JAOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:16:"JAOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Job Analysis Organization|The organization authoring and/or utilizing the job analyses";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"JobAnalysisID";a:1:{s:4:"name";s:13:"JobAnalysisID";}}s:8:"moduleID";s:4:"jank";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:13:"JobAnalysisID";O:10:"combofield":26:{s:4:"name";s:13:"JobAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Job Analysis|A combined field used to describe this job analysis when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"jan";s:10:"foreignKey";s:13:"JobAnalysisID";s:12:"foreignField";s:11:"JobAnalysis";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:183:"SELECT 
`jan`.JobAnalysisID AS ID, NULLIF(CONCAT(IFNULL(`jan`.JobAnalysisTitle,\'\')),\'\') AS Name, `jan`.OrganizationID AS ParentID FROM `jan`
WHERE jan._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:184:"SELECT 
`jan`.JobAnalysisID AS ID, NULLIF(CONCAT(IFNULL(`jan`.JobAnalysisTitle,\'\')),\'\') AS Name, `jan`.OrganizationID AS ParentID FROM `jan`

WHERE `jan`.JobAnalysisID = \'/*recordID*/\'";s:11:"parentField";s:16:"JAOrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:17:"JobAnalysisNumber";a:1:{s:4:"name";s:17:"JobAnalysisNumber";}s:15:"JobAnalysisDesc";a:1:{s:4:"name";s:15:"JobAnalysisDesc";}}s:8:"moduleID";s:4:"jank";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`jan`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:17:"JobAnalysisNumber";O:9:"viewfield":16:{s:4:"name";s:17:"JobAnalysisNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Number|A unique number used to identify the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"JobAnalysisDesc";O:9:"viewfield":16:{s:4:"name";s:15:"JobAnalysisDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:190:"Job Analysis Description|A detailed description of the job to be performed. The detailed description will be very important to others interested in assigning this job to different job titles";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"JobAnalysisID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:8:"JobKSAID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"jank";s:6:"phrase";s:12:"Job Analyses";s:6:"number";i:1;s:6:"Fields";a:4:{s:8:"JobKSAID";O:14:"invisiblefield":11:{s:4:"name";s:8:"JobKSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Record ID|An automatically assigned number used to track knowledge, skill, and bility associations with jobs";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"JAOrganization";O:9:"viewfield":16:{s:4:"name";s:14:"JAOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Job Analysis Organization|The organization authoring and/or utilizing the job analyses";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"JobAnalysisNumber";O:9:"viewfield":16:{s:4:"name";s:17:"JobAnalysisNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Number|A unique number used to identify the job analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"JobAnalysis";O:9:"viewfield":16:{s:4:"name";s:11:"JobAnalysis";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:103:"Job Analysis|A combined field used to describe this job analysis when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"jank";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:15:"JobAnalysisLink";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:103:"SELECT 
    count(*) 
FROM `jank`
   
WHERE jank._Deleted = 0
   AND `jank`.LevelID = \'/**RecordID**/\'
";s:7:"listSQL";s:558:"SELECT 
   `jank`.JobKSAID,
`jan1`.OrganizationID AS JAOrganizationID,
`org1`.Name AS JAOrganization,
`jan1`.JobAnalysisNumber AS JobAnalysisNumber,
CONCAT(\'internal:view.php?mdl=\',\'jan\',\'&rid=\',`jank`.JobAnalysisID) AS JobAnalysisLink,
NULLIF(CONCAT(IFNULL(`jan1`.JobAnalysisTitle,\'\')),\'\') AS JobAnalysis
FROM `jank`

   LEFT OUTER JOIN `jan` AS jan1 
   ON (`jank`.JobAnalysisID = `jan1`.JobAnalysisID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`jan1`.OrganizationID = `org1`.OrganizationID )
WHERE jank._Deleted = 0
AND `jank`.LevelID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:7:"LevelID";s:9:"parentKey";s:7:"LevelID";s:8:"PKFields";a:1:{i:0;s:8:"JobKSAID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'LevelID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ksal`.LevelID,
   NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,''),' (',IFNULL(`ksa1`.KSAAbbr,''),')'),' ()') AS KSA,
   `ksa1`.KSADesc AS KSADesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksaae2`.AreaAbbr,''),':',IFNULL(`ksasc2`.CapabilityAbbr,'')),':'),''),':',IFNULL(`ksa1`.KSAAbbr,'')),':') AS KSAGroupAbbr,
   `cod1`.Description AS KSALevel,
   `ksal`.KSALevelDesc,
   `ksal`.ReviewCriteria,
   `ksal`.TrainingQualified,
   `ksal`.ExperienceQualified,
   `ksal`.MedicallyQualified,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,''),' (',IFNULL(`ksa1`.KSAAbbr,''),')'),' ()'),''),' - ',IFNULL(`cod1`.Description,'')),' - ') AS RecordLabel,
   `ksaae1`.OrganizationID AS OrganizationID
FROM `ksal`
   
     LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`ksal`.KSAID = `ksa1`.KSAID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '267')
     LEFT OUTER JOIN `ksasc` AS ksasc2 
   ON (`ksa1`.CapabilityID = `ksasc2`.CapabilityID )
     LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa1`.CapabilityID = `ksasc1`.CapabilityID )
     LEFT OUTER JOIN `ksaae` AS ksaae2 
   ON (`ksasc2`.AreaID = `ksaae2`.AreaID )
     LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc1`.AreaID = `ksaae1`.AreaID )
WHERE
   ksal.LevelID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Qualification Levels");
        $screenPhrase = gettext("Jobs|Associate job analyses with the knowledge, skill, or ability level");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Qualification Levels");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LevelID' => gettext("Record ID|An automatically assigned number used to track KSA Levels"),
   'KSA' => gettext("KSA|A combined field used to describe this KSA when associating it with other records"),
   'KSADesc' => gettext("KSA Description|A brief phrase used to describe the knowldege, skill, and or ability"),
   'KSAGroupAbbr' => gettext("Abbreviation|A grouping of area, capability, and KSA abbreviations for reporting purposes"),
   'KSALevel' => gettext("Qualification Level|A term or phrase used to distinguish qualification levels associated with required knowldege, skills, or experience"),
   'KSALevelDesc' => gettext("Level Description|A brief but detailed description of knowldege, skill, and/or ability level"),
   'ReviewCriteria' => gettext("Review Criteria|A brief description of the criteria used to assess a person's level of knowledge, skill, and/or ability"),
   'TrainingQualified' => gettext("Training Qualified|Whether individuals are qualified by training"),
   'ExperienceQualified' => gettext("Experience Qualified|Whether individuals are qualified by experience"),
   'MedicallyQualified' => gettext("Medically Qualified|Whether individuals are qualified by medical examiniation or testing")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Qualification Level"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Qualification Levels") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the knowldege, skill, and/or ability level") );
      $tempTabs['Courses'] = array( "edit.php?scr=Courses&$tabsQS", gettext("Courses|Associate training courses satisfying the job knowledge, skill, or ability level") );
      $tempTabs['Jobs'] = array( "", gettext("Jobs|Associate job analyses with the knowledge, skill, or ability level") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with the the knowldege, skill, and/or ability level") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the knowldege, skill, and/or ability level") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the knowldege, skill, and/or ability level") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Jobs'] = array( "", gettext("New Level") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>