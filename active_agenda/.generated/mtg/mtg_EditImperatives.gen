<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:8:{s:9:"MeetingID";O:9:"viewfield":16:{s:4:"name";s:9:"MeetingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Record ID|An automatically assigned number used to track meetings held by the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"MasterMeetingID";O:14:"invisiblefield":11:{s:4:"name";s:15:"MasterMeetingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Organization|The name of the organization associated with the meeting";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"MeetingTitle";O:9:"viewfield":16:{s:4:"name";s:12:"MeetingTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Meeting Title|A brief name used to identify the meeting";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"MeetingType";O:9:"viewfield":16:{s:4:"name";s:11:"MeetingType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:42:"Meeting Type|The type of meeting conducted";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"MeetingStartTime";O:9:"viewfield":16:{s:4:"name";s:16:"MeetingStartTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:34:"Start Time|Time this meeting began";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"MeetingDuration";O:9:"viewfield":16:{s:4:"name";s:15:"MeetingDuration";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Duration|The total duration of the meeting. The duration is automatically calculated based on the meeting\'s begin time and end time";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Location|Specific location within the facility where the meeting was held or is scheduled to be held";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Meeting");

//field value array
$data = array(
        'MeetingID' => '',
         'MasterMeetingID' => '',
         'Organization' => '',
         'MeetingTitle' => '',
         'MeetingType' => '',
         'MeetingStartTime' => '',
         'MeetingDuration' => '',
         'Location' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[2] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:466:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskImperativeID,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:9:"getRowSQL";s:439:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"RiskImperativeID";O:14:"coderadiofield":29:{s:4:"name";s:16:"RiskImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'234\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'234\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"rsk";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"RiskDescription";O:9:"memofield":15:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:12:"ImperativeID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"rsk";s:6:"phrase";s:16:"Risk Imperatives";s:6:"number";i:2;s:6:"Fields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"RiskImperative";O:9:"viewfield":16:{s:4:"name";s:14:"RiskImperative";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskDescription";O:9:"viewfield":16:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:142:"SELECT 
    count(*) 
FROM `rsk`
   
WHERE rsk._Deleted = 0
   AND `rsk`.RelatedModuleID = \'mtg\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:487:"SELECT 
   `rsk`.ImperativeID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`cod1`.Description AS RiskImperative,
`rsk`.RiskDescription
FROM `rsk`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
WHERE rsk._Deleted = 0
AND `rsk`.RelatedModuleID = \'mtg\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:9:"MeetingID";s:8:"PKFields";a:1:{i:0;s:12:"ImperativeID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"mtg";}}');


    $guidanceGrid = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:1:{s:20:"GuidanceOrganization";N;}s:6:"isInfo";b:0;s:10:"isGuidance";b:1;s:10:"isVertical";b:1;s:15:"verticalFormats";a:3:{s:16:"OrganizationLogo";s:9:"LogoField";s:21:"ImperativeConsidTitle";s:10:"TitleField";s:27:"ImperativeConsidDescription";s:12:"FeatureField";}s:8:"moduleID";s:4:"rskc";s:6:"phrase";s:19:"Imperative Guidance";s:6:"number";N;s:6:"Fields";a:7:{s:18:"ImperativeConsidID";O:14:"invisiblefield":11:{s:4:"name";s:18:"ImperativeConsidID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Record ID|An automatically assigned number used to track risk imperative considerations";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"OrganizationLogo";O:9:"viewfield":16:{s:4:"name";s:16:"OrganizationLogo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Organization Logo|Displays the logo of the guidance organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"RiskImperative";O:9:"viewfield":16:{s:4:"name";s:14:"RiskImperative";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"ImperativeConsidTitle";O:9:"viewfield":16:{s:4:"name";s:21:"ImperativeConsidTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Title|A short title or phrase used to describe the risk imperative consideration";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:27:"ImperativeConsidDescription";O:9:"viewfield":16:{s:4:"name";s:27:"ImperativeConsidDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:173:"Consideration|A detailed description of the risk imperative consideration and the manner in which the activity associated with the related record may impact risk imperatives";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"GuidanceOrganization";O:9:"viewfield":16:{s:4:"name";s:20:"GuidanceOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:120:"Guidance Provided By|A combined field used to describe the guidance organization when associating it with guidance types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"GuidancePerson";O:9:"viewfield":16:{s:4:"name";s:14:"GuidancePerson";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Guidance Person|The individual providing guidance for consideration";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rskc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:512:"SELECT 
    count(*) 
FROM `rskc`
   
   LEFT OUTER JOIN `gui` AS gui1 
   ON (`rskc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
 INNER JOIN (SELECT `mtgma1`.MasterMeetingID AS MasterMeetingID
FROM `mtg` AS `iparent`

   LEFT OUTER JOIN `mtgma` AS mtgma1 
   ON (`iparent`.MasterAssignID = `mtgma1`.MasterAssignID )
WHERE `iparent`.MeetingID = \'/**RecordID**/\' 
) AS `parent` ON ( 
 `parent`.MasterMeetingID = `gui1`.RelatedRecordID)

WHERE rskc._Deleted = 0
   AND `gui1`.RelatedModuleID = \'mtgm\'
";s:7:"listSQL";s:1542:"SELECT 
   `rskc`.ImperativeConsidID,
`rskc`.GuidanceOrganizationID,
NULLIF(CONCAT(\'<img src=\\"org/\',IFNULL(IFNULL(`org1`.GuidanceLogoName, \'transparent.gif\'),\'\'),\'\\" alt=\\"logo\\" />\'),\'<img src=\\\\\\"org/\\\\\\" alt=\\\\\\"logo\\\\\\" />\') AS OrganizationLogo,
`cod1`.Description AS RiskImperative,
`rskc`.ImperativeConsidTitle,
`rskc`.ImperativeConsidDescription,
NULLIF(CONCAT(IFNULL(`org2`.Name,\'\')),\'\') AS GuidanceOrganization,
`ppl1`.DisplayName AS GuidancePerson
FROM `rskc`

   LEFT OUTER JOIN `gui` AS gui1 
   ON (`rskc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rskc`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
   LEFT OUTER JOIN `org` AS org1 
   ON (`gui1`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `org` AS org2 
   ON (`gui1`.OrganizationID = `org2`.OrganizationID )
   LEFT OUTER JOIN `acc` AS acc1 
    ON (`gui1`.GuidanceOrganizationID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'gui\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'184\')
   LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
 INNER JOIN (SELECT `mtgma1`.MasterMeetingID AS MasterMeetingID
FROM `mtg` AS `iparent`

   LEFT OUTER JOIN `mtgma` AS mtgma1 
   ON (`iparent`.MasterAssignID = `mtgma1`.MasterAssignID )
WHERE `iparent`.MeetingID = \'/**RecordID**/\' 
) AS `parent` ON ( 
 `parent`.MasterMeetingID = `gui1`.RelatedRecordID)

WHERE rskc._Deleted = 0
AND `gui1`.RelatedModuleID = \'mtgm\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:2:{s:13:"suppressTitle";b:1;s:19:"suppressRecordIcons";b:1;}s:10:"fieldTypes";a:7:{s:18:"ImperativeConsidID";s:3:"int";s:16:"OrganizationLogo";N;s:14:"RiskImperative";N;s:21:"ImperativeConsidTitle";s:12:"varchar(128)";s:27:"ImperativeConsidDescription";s:4:"text";s:20:"GuidanceOrganization";N;s:14:"GuidancePerson";N;}s:4:"name";N;s:10:"fieldAlign";a:7:{s:18:"ImperativeConsidID";s:5:"right";s:16:"OrganizationLogo";s:7:"justify";s:14:"RiskImperative";s:4:"left";s:21:"ImperativeConsidTitle";s:4:"left";s:27:"ImperativeConsidDescription";s:7:"justify";s:20:"GuidanceOrganization";s:7:"justify";s:14:"GuidancePerson";s:4:"left";}}');


    $PKField = 'MeetingID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[2]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Training";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `mtg`.MeetingID,
   `mtgma1`.MasterMeetingID AS MasterMeetingID,
   `org3`.Name AS Organization,
   `mtg`.MeetingTitle,
   `cod3`.Description AS MeetingType,
   `mtg`.MeetingStartTime,
   TIMEDIFF(`mtg`.MeetingEndTime, `mtg`.MeetingStartTime) AS MeetingDuration,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   NULLIF(CONCAT(IFNULL(`cod3`.Description,''),' | ',IFNULL(`mtg`.MeetingTitle,''),' | ',IFNULL(`org3`.Name,''),' | ',IFNULL(`mtg`.MeetingStartTime,'')),' |  |  | ') AS RecordLabel,
   `mtg`.OrganizationID
FROM `mtg`
   
     LEFT OUTER JOIN `mtgma` AS mtgma1 
   ON (`mtg`.MasterAssignID = `mtgma1`.MasterAssignID )
     LEFT OUTER JOIN `org` AS org3 
   ON (`mtg`.OrganizationID = `org3`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`mtg`.MeetingTypeID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '72')
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`mtg`.MeetingID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'mtg'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   mtg.MeetingID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Meeting");
        $screenPhrase = gettext("Imperatives|Associate risk imperatives with the meeting");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Meetings");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'MeetingID' => gettext("Record ID|An automatically assigned number used to track meetings held by the organization"),
   'MasterMeetingID' => gettext("Master Meeting ID|An automatically assigned number used to track master meetings assigned to multiple local organizations"),
   'Organization' => gettext("Organization|The name of the organization associated with the meeting"),
   'MeetingTitle' => gettext("Meeting Title|A brief name used to identify the meeting"),
   'MeetingType' => gettext("Meeting Type|The type of meeting conducted"),
   'MeetingStartTime' => gettext("Start Time|Time this meeting began"),
   'MeetingDuration' => gettext("Duration|The total duration of the meeting. The duration is automatically calculated based on the meeting's begin time and end time"),
   'Location' => gettext("Location|Specific location within the facility where the meeting was held or is scheduled to be held")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Meetings"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Meeting") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a meeting") );
      $tempTabs['Assigned'] = array( "edit.php?scr=Assigned&$tabsQS", gettext("Assigned|Whether this meeting satisfies a meeting assignment") );
      $tempTabs['Attendees'] = array( "edit.php?scr=Attendees&$tabsQS", gettext("Attendees|Assign attendees to a meeting") );
      $tempTabs['Participation'] = array( "edit.php?scr=Participation&$tabsQS", gettext("Participation|Associate attendee participation and involvement with the meeting") );
      $tempTabs['Equipment'] = array( "edit.php?scr=Equipment&$tabsQS", gettext("Equipment|Associate equipment with the meeting") );
      $tempTabs['Imperatives'] = array( "", gettext("Imperatives|Associate risk imperatives with the meeting") );
      $tempTabs['Training'] = array( "edit.php?scr=Training&$tabsQS", gettext("Training|Associate training courses with the meeting") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the meeting") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participant accountabilities with the meeting") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participant involvement with the meeting") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the meeting") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View the current meeting reports") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Imperatives'] = array( "", gettext("New Meeting") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>