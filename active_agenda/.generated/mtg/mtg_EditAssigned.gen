<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:9:"MeetingID";O:9:"viewfield":16:{s:4:"name";s:9:"MeetingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Record ID|An automatically assigned number used to track meetings held by the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"AssignedMeeting";O:13:"checkboxfield":14:{s:4:"name";s:15:"AssignedMeeting";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"bool";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:11:"ShortPhrase";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:22:"AssignedOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:22:"AssignedOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"MasterAssignID";a:1:{s:4:"name";s:14:"MasterAssignID";}}s:8:"moduleID";s:3:"mtg";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"MasterAssignID";O:10:"combofield":26:{s:4:"name";s:14:"MasterAssignID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"mtgma";s:10:"foreignKey";s:14:"MasterAssignID";s:12:"foreignField";s:12:"MasterAssign";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:518:"SELECT 
`mtgma`.MasterAssignID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' By \',IFNULL(`org1`.Name,\'\')),\' By \') AS Name, `mtgma`.OrganizationID AS ParentID FROM `mtgma`
 
 LEFT OUTER JOIN `mtgm` AS mtgm1 
   ON (`mtgma`.MasterMeetingID = `mtgm1`.MasterMeetingID )
 LEFT OUTER JOIN `org` AS org1 
   ON (`mtgm1`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`mtgm1`.MeetingTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'72\')
WHERE mtgma._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:520:"SELECT 
`mtgma`.MasterAssignID AS ID, NULLIF(CONCAT(IFNULL(`cod1`.Description,\'\'),\' By \',IFNULL(`org1`.Name,\'\')),\' By \') AS Name, `mtgma`.OrganizationID AS ParentID FROM `mtgma`
 
 LEFT OUTER JOIN `mtgm` AS mtgm1 
   ON (`mtgma`.MasterMeetingID = `mtgm1`.MasterMeetingID )
 LEFT OUTER JOIN `org` AS org1 
   ON (`mtgm1`.OrganizationID = `org1`.OrganizationID )
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`mtgm1`.MeetingTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'72\')

WHERE `mtgma`.MasterAssignID = \'/*recordID*/\'";s:11:"parentField";s:22:"AssignedOrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:6:{s:18:"MasterMeetingTitle";a:1:{s:4:"name";s:18:"MasterMeetingTitle";}s:12:"MasterAgenda";a:1:{s:4:"name";s:12:"MasterAgenda";}s:25:"AssignedPersonAccountable";a:1:{s:4:"name";s:25:"AssignedPersonAccountable";}s:14:"AssignmentDate";a:1:{s:4:"name";s:14:"AssignmentDate";}s:17:"AssignmentDetails";a:1:{s:4:"name";s:17:"AssignmentDetails";}s:24:"MasterLeaderObservations";a:1:{s:4:"name";s:24:"MasterLeaderObservations";}}s:8:"moduleID";s:3:"mtg";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:30:"`mtgma`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:18:"MasterMeetingTitle";O:9:"viewfield":16:{s:4:"name";s:18:"MasterMeetingTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Meeting Title|A brief name used to identify the meeting";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"MasterAgenda";O:9:"viewfield":16:{s:4:"name";s:12:"MasterAgenda";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:52:"Agenda|The stated purpose and agenda for the meeting";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:25:"AssignedPersonAccountable";O:9:"viewfield":16:{s:4:"name";s:25:"AssignedPersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:113:"Person Accountable|The person accountable for ensuring the meeting occurs and satisfies the master meeting agenda";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"AssignmentDate";O:9:"viewfield":16:{s:4:"name";s:14:"AssignmentDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:72:"Assignment Date|Date the meeting was assigned to the local organizations";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:17:"AssignmentDetails";O:9:"viewfield":16:{s:4:"name";s:17:"AssignmentDetails";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:127:"Assignment Details|A description of any details associated with this meeting assignment; such as, scope, purpose and objectives";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:24:"MasterLeaderObservations";O:9:"viewfield":16:{s:4:"name";s:24:"MasterLeaderObservations";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:155:"Master Leader Observations|Detailed observations of the Master Leader regarding the local acceptance and implementation of the assigned meeting requirement";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"MasterAssignID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Meeting");

//field value array
$data = array(
        'MeetingID' => '',
         'AssignedMeeting' => '',
         'AssignedOrganizationID' => '',
         'MasterAssignID' => '',
         'MasterMeetingTitle' => '',
         'MasterAgenda' => '',
         'AssignedPersonAccountable' => '',
         'AssignmentDate' => '',
         'AssignmentDetails' => '',
         'MasterLeaderObservations' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'MeetingID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Attendees";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `mtg`.MeetingID,
   `mtg`.AssignedMeeting,
   `org1`.Name AS AssignedOrganization,
   `mtgma1`.OrganizationID AS AssignedOrganizationID,
   NULLIF(CONCAT(IFNULL(`cod2`.Description,''),' By ',IFNULL(`org2`.Name,'')),' By ') AS MasterAssign,
   `mtg`.MasterAssignID,
   `mtgm1`.MeetingTitle AS MasterMeetingTitle,
   `mtgm1`.Agenda AS MasterAgenda,
   `ppl1`.DisplayName AS AssignedPersonAccountable,
   `dat1`.RelatedDate AS AssignmentDate,
   `mtgma1`.AssignmentDetails AS AssignmentDetails,
   `mtgma1`.MasterLeaderObservations AS MasterLeaderObservations,
   NULLIF(CONCAT(IFNULL(`cod3`.Description,''),' | ',IFNULL(`mtg`.MeetingTitle,''),' | ',IFNULL(`org3`.Name,''),' | ',IFNULL(`mtg`.MeetingStartTime,'')),' |  |  | ') AS RecordLabel,
   `mtg`.OrganizationID
FROM `mtg`
   
     LEFT OUTER JOIN `mtgma` AS mtgma1 
   ON (`mtg`.MasterAssignID = `mtgma1`.MasterAssignID )
     LEFT OUTER JOIN `org` AS org3 
   ON (`mtg`.OrganizationID = `org3`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`mtg`.MeetingTypeID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '72')
     LEFT OUTER JOIN `org` AS org1 
   ON (`mtgma1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `mtgm` AS mtgm2 
   ON (`mtgma1`.MasterMeetingID = `mtgm2`.MasterMeetingID )
     LEFT OUTER JOIN `mtgm` AS mtgm1 
   ON (`mtgma1`.MasterMeetingID = `mtgm1`.MasterMeetingID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`mtgma1`.MasterAssignID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'mtgma'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '58')
     LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`mtgma1`.MasterAssignID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'mtgma'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '2')
     LEFT OUTER JOIN `org` AS org2 
   ON (`mtgm2`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`mtgm2`.MeetingTypeID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '72')
WHERE
   mtg.MeetingID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Meeting");
        $screenPhrase = gettext("Assigned|Whether this meeting satisfies a meeting assignment");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Meetings");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'MeetingID' => gettext("Record ID|An automatically assigned number used to track meetings held by the organization"),
   'AssignedMeeting' => gettext("Assigned Meeting|Whether this meeting satisfies a meeting assignment"),
   'AssignedOrganizationID' => gettext("Organization|The name of the organization assigned to conduct a meeting"),
   'MasterAssignID' => gettext("Master Assignment|Brief description of the assigned meeting"),
   'MasterMeetingTitle' => gettext("Meeting Title|A brief name used to identify the meeting"),
   'MasterAgenda' => gettext("Agenda|The stated purpose and agenda for the meeting"),
   'AssignedPersonAccountable' => gettext("Person Accountable|The person accountable for ensuring the meeting occurs and satisfies the master meeting agenda"),
   'AssignmentDate' => gettext("Assignment Date|Date the meeting was assigned to the local organizations"),
   'AssignmentDetails' => gettext("Assignment Details|A description of any details associated with this meeting assignment; such as, scope, purpose and objectives"),
   'MasterLeaderObservations' => gettext("Master Leader Observations|Detailed observations of the Master Leader regarding the local acceptance and implementation of the assigned meeting requirement")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['AssignedMeeting'], ShortPhrase($phrases['AssignedMeeting']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AssignedMeeting']->invalid = TRUE;
            }
$vMsg = Validate($data['MasterAssignID'], ShortPhrase($phrases['MasterAssignID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['MasterAssignID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Meetings"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Meeting") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a meeting") );
      $tempTabs['Assigned'] = array( "", gettext("Assigned|Whether this meeting satisfies a meeting assignment") );
      $tempTabs['Attendees'] = array( "edit.php?scr=Attendees&$tabsQS", gettext("Attendees|Assign attendees to a meeting") );
      $tempTabs['Participation'] = array( "edit.php?scr=Participation&$tabsQS", gettext("Participation|Associate attendee participation and involvement with the meeting") );
      $tempTabs['Equipment'] = array( "edit.php?scr=Equipment&$tabsQS", gettext("Equipment|Associate equipment with the meeting") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the meeting") );
      $tempTabs['Training'] = array( "edit.php?scr=Training&$tabsQS", gettext("Training|Associate training courses with the meeting") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the meeting") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participant accountabilities with the meeting") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participant involvement with the meeting") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the meeting") , 'bpc');
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View the current meeting reports") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Assigned'] = array( "", gettext("New Meeting") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>