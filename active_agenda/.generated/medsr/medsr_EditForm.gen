<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:19:"ExamServiceResultID";O:9:"viewfield":16:{s:4:"name";s:19:"ExamServiceResultID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:129:"Record ID|An automatically assigned number used to track medical examination service results associated with medical examinations";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Organization|The name of the organization requesting the medical examination";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"MedicalExamTitle";O:9:"viewfield":16:{s:4:"name";s:16:"MedicalExamTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Title|A title or phrase used to describe the medical examination";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ExamService";O:9:"viewfield":16:{s:4:"name";s:11:"ExamService";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:123:"Exam Service|A service performed during the medical examination that may have specific requirements for periodic evaluation";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ExamServiceDetail";O:9:"viewfield":16:{s:4:"name";s:17:"ExamServiceDetail";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Service Detail|A Detailed description of the medical exam service and related performance criteria";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:26:"ScheduledServiceProviderID";O:13:"orgcombofield":26:{s:4:"name";s:26:"ScheduledServiceProviderID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"medsr";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:19:"ScheduledProviderID";s:15:"suppressItemAdd";b:0;}s:20:"ScheduledServiceDate";O:9:"datefield":15:{s:4:"name";s:20:"ScheduledServiceDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"ActualServiceDate";O:9:"datefield":15:{s:4:"name";s:17:"ActualServiceDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"ServiceResultsID";O:14:"coderadiofield":29:{s:4:"name";s:16:"ServiceResultsID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'282\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'282\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"medsr";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:20:"ServiceResultsDetail";O:9:"memofield":15:{s:4:"name";s:20:"ServiceResultsDetail";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Exam Service Result");

//field value array
$data = array(
        'ExamServiceResultID' => '',
         'Organization' => '',
         'MedicalExamTitle' => '',
         'ExamService' => '',
         'ExamServiceDetail' => '',
         'ScheduledServiceProviderID' => '',
         'ScheduledServiceDate' => '',
         'ActualServiceDate' => '',
         'ServiceResultsID' => '',
         'ServiceResultsDetail' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'ExamServiceResultID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `medsr`.ExamServiceResultID,
   `org1`.Name AS Organization,
   `med1`.MedicalExamTitle AS MedicalExamTitle,
   `cod1`.Description AS ExamService,
   `medes1`.ExamServiceDetail AS ExamServiceDetail,
   `org3`.Name AS ScheduledServiceProvider,
   `medsr`.ScheduledServiceProviderID,
   `dat6`.RelatedDate AS ScheduledServiceDate,
   `dat3`.RelatedDate AS ActualServiceDate,
   `cod5`.Description AS ServiceResults,
   `medsr`.ServiceResultsID,
   `medsr`.ServiceResultsDetail,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`ppl3`.DisplayName,''),' | ',IFNULL(`med1`.MedicalExamTitle,''),' | ',IFNULL(`cod1`.Description,''),' | ',IFNULL(`dat3`.RelatedDate,''),' | ',IFNULL(`cod5`.Description,''),' | '),' |  |  |  |  |  | ') AS RecordLabel,
   `med1`.OrganizationID AS OrganizationID
FROM `medsr`
   
     LEFT OUTER JOIN `med` AS med1 
   ON (`medsr`.MedicalExamID = `med1`.MedicalExamID )
     LEFT OUTER JOIN `medes` AS medes1 
   ON (`medsr`.MedicalExamServiceID = `medes1`.MedicalExamServiceID )
     LEFT OUTER JOIN `org` AS org3 
   ON (`medsr`.ScheduledServiceProviderID = `org3`.OrganizationID )
     LEFT OUTER JOIN `dat` AS dat6 
    ON (`medsr`.ExamServiceResultID = `dat6`.SourceRecordID 
     AND `dat6`.SourceModuleID = 'medsr'
     AND `dat6`._Deleted = 0
     AND `dat6`.DateDescriptorID = '51')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`medsr`.ExamServiceResultID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'medsr'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '24')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`medsr`.ServiceResultsID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '282')
     LEFT OUTER JOIN `medse` AS medse1 
   ON (`medsr`.ScheduledExamID = `medse1`.ScheduledExamID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`med1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`medes1`.ExamServiceID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '110')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`medse1`.ScheduledExamID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'medse'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '86')
     LEFT OUTER JOIN `pple` AS pple1 
ON (`acc1`.PersonAccountableID = `pple1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`pple1`.PersonID = `ppl3`.PersonID )
WHERE
   medsr.ExamServiceResultID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Exam Service Result");
        $screenPhrase = gettext("Form|Edit summary information about the medical examination service result");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Exam Service Results");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ExamServiceResultID' => gettext("Record ID|An automatically assigned number used to track medical examination service results associated with medical examinations"),
   'Organization' => gettext("Organization|The name of the organization requesting the medical examination"),
   'MedicalExamTitle' => gettext("Title|A title or phrase used to describe the medical examination"),
   'ExamService' => gettext("Exam Service|A service performed during the medical examination that may have specific requirements for periodic evaluation"),
   'ExamServiceDetail' => gettext("Service Detail|A Detailed description of the medical exam service and related performance criteria"),
   'ScheduledServiceProviderID' => gettext("Service Provider|The name of the service provider performing the medical services examination"),
   'ScheduledServiceDate' => gettext("Schedule Service Date|The date the medical examination service is scheduled to occur"),
   'ActualServiceDate' => gettext("Actual Service Date|The date the medical examination service actually occurred"),
   'ServiceResultsID' => gettext("Service Results|The results of the medical examination service"),
   'ServiceResultsDetail' => gettext("Details|A detailed description of the examination results")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['ScheduledServiceProviderID'], ShortPhrase($phrases['ScheduledServiceProviderID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ScheduledServiceProviderID']->invalid = TRUE;
            }
$vMsg = Validate($data['ScheduledServiceDate'], ShortPhrase($phrases['ScheduledServiceDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ScheduledServiceDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ActualServiceDate'], ShortPhrase($phrases['ActualServiceDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ActualServiceDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ServiceResultsID'], ShortPhrase($phrases['ServiceResultsID']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ServiceResultsID']->invalid = TRUE;
            }
$vMsg = Validate($data['ServiceResultsDetail'], ShortPhrase($phrases['ServiceResultsDetail']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ServiceResultsDetail']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Exam Service Results"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Exam Service Result") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about the medical examination service result") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Exam Service Result") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ScheduledServiceDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ScheduledServiceDate\"
});
Calendar.setup({
   inputField : \"ActualServiceDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ActualServiceDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>