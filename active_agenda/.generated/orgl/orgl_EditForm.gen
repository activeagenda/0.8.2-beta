<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:10:"LocationID";O:9:"viewfield":16:{s:4:"name";s:10:"LocationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Location ID|Numerical ID to identify the specific locations of a local organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"LocationCategoryID";O:14:"codecombofield":27:{s:4:"name";s:18:"LocationCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'84\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'84\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"LocationTypeID";a:2:{s:4:"name";s:14:"LocationTypeID";s:15:"listParentField";s:18:"LocationCategoryID";}}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"84";}s:14:"LocationTypeID";O:10:"combofield":26:{s:4:"name";s:14:"LocationTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"orglt";s:10:"foreignKey";s:14:"LocationTypeID";s:12:"foreignField";s:12:"LocationType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:199:"SELECT 
`orglt`.LocationTypeID AS ID, NULLIF(CONCAT(IFNULL(`orglt`.LocationTypeTitle,\'\')),\'\') AS Name, `orglt`.LocationCategoryID AS ParentID FROM `orglt`
WHERE orglt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:201:"SELECT 
`orglt`.LocationTypeID AS ID, NULLIF(CONCAT(IFNULL(`orglt`.LocationTypeTitle,\'\')),\'\') AS Name, `orglt`.LocationCategoryID AS ParentID FROM `orglt`

WHERE `orglt`.LocationTypeID = \'/*recordID*/\'";s:11:"parentField";s:18:"LocationCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"LocationTypeDesc";a:1:{s:4:"name";s:16:"LocationTypeDesc";}}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"LocationTypeDesc";O:9:"viewfield":16:{s:4:"name";s:16:"LocationTypeDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Description|A detailed description of the location type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:14:"LocationTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"OrganizationID";O:10:"combofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"BuildingID";a:1:{s:4:"name";s:10:"BuildingID";}}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:10:"BuildingID";O:10:"combofield":26:{s:4:"name";s:10:"BuildingID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"bui";s:10:"foreignKey";s:10:"BuildingID";s:12:"foreignField";s:12:"BuildingName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:146:"SELECT 
`bui`.BuildingID AS ID, `bui`.BuildingName AS Name, `bui`.OrganizationID AS ParentID FROM `bui`
WHERE bui._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:144:"SELECT 
`bui`.BuildingID AS ID, `bui`.BuildingName AS Name, `bui`.OrganizationID AS ParentID FROM `bui`

WHERE `bui`.BuildingID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:6:"RoomID";a:1:{s:4:"name";s:6:"RoomID";}}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`bui`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:6:"RoomID";O:10:"combofield":26:{s:4:"name";s:6:"RoomID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"buir";s:10:"foreignKey";s:6:"RoomID";s:12:"foreignField";s:4:"Room";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:250:"SELECT 
`buir`.RoomID AS ID, NULLIF(CONCAT(IFNULL(`buir`.RoomName,\'\')),\'\') AS Name, `buir`.BuildingID AS ParentID FROM `buir`
 
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir`.BuildingID = `bui1`.BuildingID )
WHERE buir._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:244:"SELECT 
`buir`.RoomID AS ID, NULLIF(CONCAT(IFNULL(`buir`.RoomName,\'\')),\'\') AS Name, `buir`.BuildingID AS ParentID FROM `buir`
 
 LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir`.BuildingID = `bui1`.BuildingID )

WHERE `buir`.RoomID = \'/*recordID*/\'";s:11:"parentField";s:10:"BuildingID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"RoomNumber";a:1:{s:4:"name";s:10:"RoomNumber";}}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:29:"`bui1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:10:"RoomNumber";O:9:"viewfield":16:{s:4:"name";s:10:"RoomNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Room Number|A unique number assigned to rooms, by the organization, for facility tracking and mapping purposes";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:6:"RoomID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"LocationDesc";O:9:"memofield":15:{s:4:"name";s:12:"LocationDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"LocationName";O:9:"editfield":14:{s:4:"name";s:12:"LocationName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:14:"LocationNumber";O:9:"editfield":14:{s:4:"name";s:14:"LocationNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"25";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"orgl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Location");

//field value array
$data = array(
        'LocationID' => '',
         'LocationCategoryID' => '',
         'LocationTypeID' => '',
         'LocationTypeDesc' => '',
         'OrganizationID' => '',
         'BuildingID' => '',
         'RoomID' => '',
         'RoomNumber' => '',
         'LocationDesc' => '',
         'LocationName' => '',
         'LocationNumber' => '',
         'PersonAccountableID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LocationID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Hazards";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `orgl`.LocationID,
   `cod1`.Description AS LocationCategory,
   `orglt1`.LocationCategoryID AS LocationCategoryID,
   NULLIF(CONCAT(IFNULL(`orglt1`.LocationTypeTitle,'')),'') AS LocationType,
   `orgl`.LocationTypeID,
   `orglt1`.LocationTypeDesc AS LocationTypeDesc,
   `org1`.Name AS Organization,
   `orgl`.OrganizationID,
   `bui1`.BuildingName AS Building,
   `buir1`.BuildingID AS BuildingID,
   NULLIF(CONCAT(IFNULL(`buir1`.RoomName,'')),'') AS Room,
   `orgl`.RoomID,
   `buir1`.RoomNumber AS RoomNumber,
   `orgl`.LocationDesc,
   `orgl`.LocationName,
   `orgl`.LocationNumber,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   NULLIF(CONCAT(IFNULL(`orgl`.LocationName,''),' | ',IFNULL(NULLIF(CONCAT(IFNULL(`buir1`.RoomName,'')),''),''),' | ',IFNULL(`org1`.Name,'')),' |  | ') AS RecordLabel
FROM `orgl`
   
     LEFT OUTER JOIN `orglt` AS orglt1 
   ON (`orgl`.LocationTypeID = `orglt1`.LocationTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgl`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`orgl`.LocationID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'orgl'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '53')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`orglt1`.LocationCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '84')
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
WHERE
   orgl.LocationID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Location");
        $screenPhrase = gettext("Form|Edit summary information about a physical location");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Locations");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LocationID' => gettext("Location ID|Numerical ID to identify the specific locations of a local organization"),
   'LocationCategoryID' => gettext("Category|A short term used to identify locations with similar characteristics"),
   'LocationTypeID' => gettext("Location Type|A combined field used to describe this hazard type when associating it with other records"),
   'LocationTypeDesc' => gettext("Description|A detailed description of the location type"),
   'OrganizationID' => gettext("Organization|The name of the organization with possessing the physical locations"),
   'BuildingID' => gettext("Building|A physical structure tracked by an organization"),
   'RoomID' => gettext("Room|A combined field used to describe this record when associating it with other records"),
   'RoomNumber' => gettext("Room Number|A unique number assigned to rooms, by the organization, for facility tracking and mapping purposes"),
   'LocationDesc' => gettext("Location Description|A description of the specific location of a local organization"),
   'LocationName' => gettext("Location Name|Name of a specific location of a specific organization"),
   'LocationNumber' => gettext("Location Number|A unique tracking number assigned by the organization to track specific locations. Location numbers are often used by engineering departments to definitively label locations for blueprints, process flow charts and other process information diagrams"),
   'PersonAccountableID' => gettext("Person Accountable|The individual assigned primary accountability for managing this location")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Locations"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Location") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a physical location") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the location") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the location") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the location") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the location") );
      $tempTabs['WorkOrders'] = array( "edit.php?scr=WorkOrders&$tabsQS", gettext("Orders|Associate work orders with the location") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate phyiscal files with the location") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with the location") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the location") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the location") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Location") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>