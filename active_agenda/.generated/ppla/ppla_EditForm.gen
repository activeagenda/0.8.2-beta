<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:8:"ChangeID";O:9:"viewfield":16:{s:4:"name";s:8:"ChangeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Change ID|A unique number asisgned to each change of address for each employee";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ChangeDate";O:9:"datefield":15:{s:4:"name";s:10:"ChangeDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";s:0:"";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"OldHomeAddress1";O:9:"editfield":14:{s:4:"name";s:15:"OldHomeAddress1";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:15:"OldHomeAddress2";O:9:"editfield":14:{s:4:"name";s:15:"OldHomeAddress2";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:16:"OldHomeCountryID";O:10:"combofield":26:{s:4:"name";s:16:"OldHomeCountryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"ctr";s:10:"foreignKey";s:9:"CountryID";s:12:"foreignField";s:7:"Country";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:189:"SELECT 
`ctr`.CountryID AS ID, NULLIF(CONCAT(IFNULL(`ctr`.CountryName,\'\'),\' (\',IFNULL(`ctr`.CountryAbbreviation,\'\'),\')\'),\' ()\') AS Name FROM `ctr`
WHERE ctr._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:186:"SELECT 
`ctr`.CountryID AS ID, NULLIF(CONCAT(IFNULL(`ctr`.CountryName,\'\'),\' (\',IFNULL(`ctr`.CountryAbbreviation,\'\'),\')\'),\' ()\') AS Name FROM `ctr`

WHERE `ctr`.CountryID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"OldHomeStateID";a:1:{s:4:"name";s:14:"OldHomeStateID";}}s:8:"moduleID";s:4:"ppla";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"OldHomeStateID";O:10:"combofield":26:{s:4:"name";s:14:"OldHomeStateID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"sta";s:10:"foreignKey";s:7:"StateID";s:12:"foreignField";s:5:"State";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:212:"SELECT 
`sta`.StateID AS ID, NULLIF(CONCAT(IFNULL(`sta`.StateName,\'\'),\' (\',IFNULL(`sta`.StateAbbreviation,\'\'),\')\'),\' ()\') AS Name, `sta`.CountryID AS ParentID FROM `sta`
WHERE sta._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:207:"SELECT 
`sta`.StateID AS ID, NULLIF(CONCAT(IFNULL(`sta`.StateName,\'\'),\' (\',IFNULL(`sta`.StateAbbreviation,\'\'),\')\'),\' ()\') AS Name, `sta`.CountryID AS ParentID FROM `sta`

WHERE `sta`.StateID = \'/*recordID*/\'";s:11:"parentField";s:16:"OldHomeCountryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"OldHomeCountyID";a:1:{s:4:"name";s:15:"OldHomeCountyID";}}s:8:"moduleID";s:4:"ppla";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:15:"OldHomeCountyID";O:10:"combofield":26:{s:4:"name";s:15:"OldHomeCountyID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cti";s:10:"foreignKey";s:8:"CountyID";s:12:"foreignField";s:6:"County";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:165:"SELECT 
`cti`.CountyID AS ID, NULLIF(CONCAT(IFNULL(`cti`.CountyName,\'\')),\'\') AS Name, `cti`.StateID AS ParentID FROM `cti`
WHERE cti._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:161:"SELECT 
`cti`.CountyID AS ID, NULLIF(CONCAT(IFNULL(`cti`.CountyName,\'\')),\'\') AS Name, `cti`.StateID AS ParentID FROM `cti`

WHERE `cti`.CountyID = \'/*recordID*/\'";s:11:"parentField";s:14:"OldHomeStateID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"ppla";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"OldHomeCity";O:9:"editfield":14:{s:4:"name";s:11:"OldHomeCity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:17:"OldHomePostalCode";O:9:"editfield":14:{s:4:"name";s:17:"OldHomePostalCode";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:12:"OldHomePhone";O:9:"editfield":14:{s:4:"name";s:12:"OldHomePhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:10:"OldHomeFax";O:9:"editfield":14:{s:4:"name";s:10:"OldHomeFax";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:12:"OldHomeEmail";O:9:"editfield":14:{s:4:"name";s:12:"OldHomeEmail";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Change of Address");

//field value array
$data = array(
        'ChangeID' => '',
         'ChangeDate' => '',
         'OldHomeAddress1' => '',
         'OldHomeAddress2' => '',
         'OldHomeCountryID' => '',
         'OldHomeStateID' => '',
         'OldHomeCountyID' => '',
         'OldHomeCity' => '',
         'OldHomePostalCode' => '',
         'OldHomePhone' => '',
         'OldHomeFax' => '',
         'OldHomeEmail' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'ChangeID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `ppla`.ChangeID,
   `ppla`.ChangeDate,
   `ppla`.OldHomeAddress1,
   `ppla`.OldHomeAddress2,
   NULLIF(CONCAT(IFNULL(`ctr1`.CountryName,''),' (',IFNULL(`ctr1`.CountryAbbreviation,''),')'),' ()') AS OldHomeCountry,
   `sta2`.CountryID AS OldHomeCountryID,
   NULLIF(CONCAT(IFNULL(`sta1`.StateName,''),' (',IFNULL(`sta1`.StateAbbreviation,''),')'),' ()') AS OldHomeState,
   `cti1`.StateID AS OldHomeStateID,
   NULLIF(CONCAT(IFNULL(`cti1`.CountyName,'')),'') AS OldHomeCounty,
   `ppla`.OldHomeCountyID,
   `ppla`.OldHomeCity,
   `ppla`.OldHomePostalCode,
   `ppla`.OldHomePhone,
   `ppla`.OldHomeFax,
   `ppla`.OldHomeEmail,
   `ppl1`.OrganizationID AS OrganizationID
FROM `ppla`
   
     LEFT OUTER JOIN `sta` AS sta2 
   ON (`ppla`.OldHomeCountyID = `sta2`.StateID )
     LEFT OUTER JOIN `cti` AS cti1 
   ON (`ppla`.OldHomeCountyID = `cti1`.CountyID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`ppla`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ctr` AS ctr1 
   ON (`sta2`.CountryID = `ctr1`.CountryID )
     LEFT OUTER JOIN `sta` AS sta1 
   ON (`cti1`.StateID = `sta1`.StateID )
WHERE
   ppla.ChangeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Change of Address");
        $screenPhrase = gettext("Form|Edit summary information about a change of address history");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("People Change of Address");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ChangeID' => gettext("Change ID|A unique number asisgned to each change of address for each employee"),
   'ChangeDate' => gettext("Change Date|The date the address change was entered into the system"),
   'OldHomeAddress1' => gettext("Prior Home Address 1|First physical street address of the location where the individual lives"),
   'OldHomeAddress2' => gettext("Prior Home Address 2|Second physical street address where the individual lives; such as, apartment number"),
   'OldHomeCountryID' => gettext("Prior Country|A combined field used to associate this country with another record"),
   'OldHomeStateID' => gettext("Prior State|A combined field used to associate this state with another record"),
   'OldHomeCountyID' => gettext("Prior County|A combined field used to associate this county with another record"),
   'OldHomeCity' => gettext("Prior City|City where the individual lives"),
   'OldHomePostalCode' => gettext("Prior Postal Code|Postal code used to direct mail to the individual's home address"),
   'OldHomePhone' => gettext("Prior Home Phone|Telephone number of the individual at home"),
   'OldHomeFax' => gettext("Prior Home Fax|Facsimile telephone number of the individual at home"),
   'OldHomeEmail' => gettext("Prior Home Email|Email address used by the individual at home")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Changes of Address"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Change of Address") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a change of address history") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Change of Address") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ChangeDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ChangeDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = 'Record ' . $recordID;
?>