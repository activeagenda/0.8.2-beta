<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:17:{s:9:"AccountID";O:9:"viewfield":16:{s:4:"name";s:9:"AccountID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Record ID|An automatically assigned number used to track accounts used to budance the risk management process";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Budget Organization|The organization responsible for funding and managing the overall budget";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"BudgetCategory";O:9:"viewfield":16:{s:4:"name";s:14:"BudgetCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Category|A broad categoy used to group budgets of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Budget";O:9:"viewfield":16:{s:4:"name";s:6:"Budget";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:90:"Budget|A combined field used to describe the budget when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"BudgetNumber";O:9:"viewfield":16:{s:4:"name";s:12:"BudgetNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Number|A number used by internal accounting to track budgets and related expenditures";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"BudgetDesc";O:9:"viewfield":16:{s:4:"name";s:10:"BudgetDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Description|A brief but thorough description of the budget and its purpose";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Days Remaining|The total number of days remaining before the budget expires";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"AccountOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:21:"AccountOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buda";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buda";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:17:"AccountCategoryID";O:14:"codecombofield":27:{s:4:"name";s:17:"AccountCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'31\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'31\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"AccountTypeID";a:1:{s:4:"name";s:13:"AccountTypeID";}}s:8:"moduleID";s:4:"buda";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"31";}s:13:"AccountTypeID";O:10:"combofield":26:{s:4:"name";s:13:"AccountTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"budat";s:10:"foreignKey";s:13:"AccountTypeID";s:12:"foreignField";s:11:"AccountType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:196:"SELECT 
`budat`.AccountTypeID AS ID, NULLIF(CONCAT(IFNULL(`budat`.AccountTypeTitle,\'\')),\'\') AS Name, `budat`.AccountCategoryID AS ParentID FROM `budat`
WHERE budat._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:197:"SELECT 
`budat`.AccountTypeID AS ID, NULLIF(CONCAT(IFNULL(`budat`.AccountTypeTitle,\'\')),\'\') AS Name, `budat`.AccountCategoryID AS ParentID FROM `budat`

WHERE `budat`.AccountTypeID = \'/*recordID*/\'";s:11:"parentField";s:17:"AccountCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:15:"AccountTypeDesc";a:1:{s:4:"name";s:15:"AccountTypeDesc";}}s:8:"moduleID";s:4:"buda";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:15:"AccountTypeDesc";O:9:"viewfield":16:{s:4:"name";s:15:"AccountTypeDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Description|A brief but thorough description of the specific type of account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"AccountTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"AccountName";O:9:"editfield":14:{s:4:"name";s:11:"AccountName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:13:"AccountNumber";O:9:"editfield":14:{s:4:"name";s:13:"AccountNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:11:"varchar(50)";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"50";s:9:"maxLength";s:2:"50";s:5:"align";s:4:"left";}s:11:"AccountDesc";O:9:"memofield":15:{s:4:"name";s:11:"AccountDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:13:"AccountAmount";O:10:"moneyfield":18:{s:4:"name";s:13:"AccountAmount";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:5:"money";s:8:"validate";s:26:"Money notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";N;s:9:"maxLength";N;s:5:"align";s:4:"left";s:16:"localAmountField";N;s:20:"localCurrencyIDField";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"AccountStatusID";O:14:"codecombofield":27:{s:4:"name";s:15:"AccountStatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'83\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'83\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"buda";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"83";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Budget Account");

//field value array
$data = array(
        'AccountID' => '',
         'Organization' => '',
         'BudgetCategory' => '',
         'Budget' => '',
         'BudgetNumber' => '',
         'BudgetDesc' => '',
         'DaysRemaining' => '',
         'AccountOrganizationID' => '',
         'PersonAccountableID' => '',
         'AccountCategoryID' => '',
         'AccountTypeID' => '',
         'AccountTypeDesc' => '',
         'AccountName' => '',
         'AccountNumber' => '',
         'AccountDesc' => '',
         'AccountAmount' => '',
         'AccountStatusID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'AccountID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Audits";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `buda`.AccountID,
   `org1`.Name AS Organization,
   `cod1`.Description AS BudgetCategory,
   NULLIF(CONCAT(IFNULL(`bud1`.BudgetTitle,'')),'') AS Budget,
   `bud1`.BudgetNumber AS BudgetNumber,
   `bud1`.BudgetDesc AS BudgetDesc,
   DATEDIFF(`dat2`.RelatedDate, NOW()) AS DaysRemaining,
   `org2`.Name AS AccountOrganization,
   `buda`.AccountOrganizationID,
   `ppl1`.DisplayName AS PersonAccountable,
   `acc1`.PersonAccountableID AS PersonAccountableID,
   `cod2`.Description AS AccountCategory,
   `budat1`.AccountCategoryID AS AccountCategoryID,
   NULLIF(CONCAT(IFNULL(`budat1`.AccountTypeTitle,'')),'') AS AccountType,
   `buda`.AccountTypeID,
   `budat1`.AccountDesc AS AccountTypeDesc,
   `buda`.AccountName,
   `buda`.AccountNumber,
   `buda`.AccountDesc,
   `buda`.AccountAmount,
   `cod3`.Description AS AccountStatus,
   `buda`.AccountStatusID,
   NULLIF(CONCAT(IFNULL(`buda`.AccountName,''),' | ',IFNULL(`buda`.AccountNumber,'')),' | ') AS RecordLabel,
   `bud1`.OrganizationID AS OrganizationID
FROM `buda`
   
     LEFT OUTER JOIN `bud` AS bud1 
   ON (`buda`.BudgetID = `bud1`.BudgetID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`buda`.AccountOrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`buda`.AccountID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'buda'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '176')
     LEFT OUTER JOIN `budat` AS budat1 
   ON (`buda`.AccountTypeID = `budat1`.AccountTypeID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`buda`.AccountStatusID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '83')
     LEFT OUTER JOIN `org` AS org1 
   ON (`bud1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`bud1`.BudgetCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '213')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`bud1`.BudgetID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'bud'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`budat1`.AccountCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '31')
WHERE
   buda.AccountID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Budget Account");
        $screenPhrase = gettext("Form|Edit summary information about a budget account");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Budget Accounts");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'AccountID' => gettext("Record ID|An automatically assigned number used to track accounts used to budance the risk management process"),
   'Organization' => gettext("Budget Organization|The organization responsible for funding and managing the overall budget"),
   'BudgetCategory' => gettext("Category|A broad categoy used to group budgets of similar types"),
   'Budget' => gettext("Budget|A combined field used to describe the budget when associating it with other records"),
   'BudgetNumber' => gettext("Number|A number used by internal accounting to track budgets and related expenditures"),
   'BudgetDesc' => gettext("Description|A brief but thorough description of the budget and its purpose"),
   'DaysRemaining' => gettext("Days Remaining|The total number of days remaining before the budget expires"),
   'AccountOrganizationID' => gettext("Account Organization|The organization responsible for managing the budget account"),
   'PersonAccountableID' => gettext("Person Accountable|The individual assigned primary accountability for the budget account"),
   'AccountCategoryID' => gettext("Account Category|A broad categoy used to group accounts of similar types"),
   'AccountTypeID' => gettext("Account Type|A combined field used to describe the account type when associating it with other records"),
   'AccountTypeDesc' => gettext("Description|A brief but thorough description of the specific type of account"),
   'AccountName' => gettext("Account Name|A unique name or title used to identify the budget account"),
   'AccountNumber' => gettext("Account Number|A unique number used to identify the budget account"),
   'AccountDesc' => gettext("Account Description|A detailed description of the budget account"),
   'AccountAmount' => gettext("Amount|The total amount of money deposited to the budget account"),
   'AccountStatusID' => gettext("Status|Present status of the budget account")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['AccountOrganizationID'], ShortPhrase($phrases['AccountOrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountOrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountTypeID'], ShortPhrase($phrases['AccountTypeID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountTypeID']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountName'], ShortPhrase($phrases['AccountName']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountName']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountNumber'], ShortPhrase($phrases['AccountNumber']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountNumber']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountDesc'], ShortPhrase($phrases['AccountDesc']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountDesc']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountAmount'], ShortPhrase($phrases['AccountAmount']), 'Money notEmpty notNegative');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountAmount']->invalid = TRUE;
            }
$vMsg = Validate($data['AccountStatusID'], ShortPhrase($phrases['AccountStatusID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AccountStatusID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Budget Accounts"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Budget Account") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a budget account") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the budget account") );
      $tempTabs['BusinessContinuity'] = array( "edit.php?scr=BusinessContinuity&$tabsQS", gettext("Continuity|Associate business continuity requirements with the budget account") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the budget account") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the budget account") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the budget account") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance consequences with the budget account") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the budget account") );
      $tempTabs['Publicity'] = array( "edit.php?scr=Publicity&$tabsQS", gettext("Publicity|Associate publicity with the budget account") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the budget account") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Associate responsibilities with the budget account") );
      $tempTabs['Classifications'] = array( "edit.php?scr=Classifications&$tabsQS", gettext("Classifications|Associate risk classifications with the budget account") );
      $tempTabs['Imperatives'] = array( "edit.php?scr=Imperatives&$tabsQS", gettext("Imperatives|Associate risk imperatives with the budget account") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the budget account") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the budget account") );
      $tempTabs['Training'] = array( "edit.php?scr=Training&$tabsQS", gettext("Training|Associate training with the budget account") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the budget account") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the budget account") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate file retention methods with the budget account") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the budget account") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Account") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>