<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:16:"OrgGapAnalysisID";O:9:"viewfield":16:{s:4:"name";s:16:"OrgGapAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Record ID|An automatically assigned number used to associate organizations with resource requirements";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Organization|The name of the organization where the gap analysis is scheduled to occur";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"OrganizationLiaison";O:9:"viewfield":16:{s:4:"name";s:19:"OrganizationLiaison";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:136:"Organization Liaison|The individual assigned primary accountability for organizing the gap analysis for the organization being evaluated";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"AuditTeamLeader";O:9:"viewfield":16:{s:4:"name";s:15:"AuditTeamLeader";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Gap Team Leader|The individual assigned primary accountability for conducting the gap analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"GapTitle";O:9:"viewfield":16:{s:4:"name";s:8:"GapTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Gap Analysis Title|A short title used to identify the organizational gap analysis";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"GapObjective";O:9:"viewfield":16:{s:4:"name";s:12:"GapObjective";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Gap Objective|A detailed description of the scope, purpose, and/or objective of the gap analysis";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ScheduledStart";O:9:"viewfield":16:{s:4:"name";s:14:"ScheduledStart";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Scheduled Start|The date and time the organizational gap analysis is scheduled to began";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ScheduledEnd";O:9:"viewfield":16:{s:4:"name";s:12:"ScheduledEnd";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Scheduled End|The date and time the organizational gap analysis is scheduled to end";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ScheduledDuration";O:9:"viewfield":16:{s:4:"name";s:17:"ScheduledDuration";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Scheduled Duration|The scheduled duration of the organizational gap analysis";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Gap Analysis");

//field value array
$data = array(
        'OrgGapAnalysisID' => '',
         'Organization' => '',
         'OrganizationLiaison' => '',
         'AuditTeamLeader' => '',
         'GapTitle' => '',
         'GapObjective' => '',
         'ScheduledStart' => '',
         'ScheduledEnd' => '',
         'ScheduledDuration' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:16:"searchselectgrid":50:{s:12:"searchFields";a:1:{s:8:"ModuleID";O:10:"combofield":26:{s:4:"name";s:8:"ModuleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:10:"searchForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"mod";s:10:"foreignKey";s:8:"ModuleID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:102:"SELECT 
`mod`.ModuleID AS ID, `mod`.Name AS Name FROM `mod`
WHERE mod._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:98:"SELECT 
`mod`.ModuleID AS ID, `mod`.Name AS Name FROM `mod`

WHERE `mod`.ModuleID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"gapoi";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}}s:16:"availableIDField";s:13:"GapAnalysisID";s:18:"availableNameField";s:12:"AnalysisItem";s:16:"listAvailableSQL";N;s:14:"listConditions";a:0:{}s:15:"listSelectedSQL";s:248:"SELECT `gapoi`.GapAnalysisID AS ID, `gap1`.AnalysisItem AS Name  FROM gapoi  
 LEFT OUTER JOIN `gap` AS gap1 
   ON (`gapoi`.GapAnalysisID = `gap1`.GapAnalysisID )
 WHERE  gapoi.OrgGapAnalysisID = \'/*recordID*/\' AND gapoi._Deleted = 0 ORDER BY Name";s:23:"listExistingSelectedSQL";s:227:"SELECT `gapoi`.GapAnalysisID AS ID, `gap1`.AnalysisItem AS Name , gapoi._Deleted FROM gapoi  
 LEFT OUTER JOIN `gap` AS gap1 
   ON (`gapoi`.GapAnalysisID = `gap1`.GapAnalysisID )
 WHERE  gapoi.OrgGapAnalysisID = \'/*recordID*/\'";s:9:"insertSQL";s:126:"INSERT INTO gapoi (GapAnalysisID, OrgGapAnalysisID, _ModBy, _ModDate) VALUES (\'/*value*/\', \'/*recordID*/\', /*userID*/, NOW());";s:15:"insertRemoteSQL";N;s:9:"removeSQL";s:210:"UPDATE gapoi SET 
                _Deleted = 1,
                _ModBy = /*userID*/, 
                _ModDate = NOW()
            WHERE GapAnalysisItemID = /*rowID*/ AND gapoi.OrgGapAnalysisID = \'/*recordID*/\'";s:15:"removeRemoteSQL";N;s:10:"restoreSQL";s:210:"UPDATE gapoi SET 
                _Deleted = 0,
                _ModBy = /*userID*/, 
                _ModDate = NOW()
            WHERE GapAnalysisItemID = /*rowID*/ AND gapoi.OrgGapAnalysisID = \'/*recordID*/\'";s:16:"restoreRemoteSQL";N;s:14:"getRemoteIDSQL";s:122:"SELECT GapAnalysisItemID AS RowID FROM gapoi WHERE GapAnalysisID = \'/*value*/\' AND gapoi.OrgGapAnalysisID = \'/*recordID*/\'";s:17:"getRemoteRowIDSQL";N;s:6:"logSQL";s:151:"INSERT INTO gapoi_l (GapAnalysisID, OrgGapAnalysisID, _ModBy, _ModDate, _Deleted) VALUES (\'/*value*/\', \'/*recordID*/\', /*userID*/, NOW(), /*deleted*/);";s:12:"logRemoteSQL";N;s:14:"useRemoteField";b:0;s:11:"listKeyType";s:0:"";s:9:"updateSQL";N;s:9:"deleteSQL";N;s:10:"getFormSQL";s:0:"";s:9:"getRowSQL";s:0:"";s:12:"remoteFields";N;s:11:"hasGridForm";b:0;s:10:"FormFields";a:0:{}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";N;s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"gapoi";s:6:"phrase";s:12:"Review Items";s:6:"number";i:1;s:6:"Fields";a:0:{}s:8:"countSQL";N;s:7:"listSQL";N;s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:16:"OrgGapAnalysisID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:16:"primaryListField";s:12:"AnalysisItem";s:12:"listModuleID";s:3:"gap";}');


    /**guidanceGrid**/

    $PKField = 'OrgGapAnalysisID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "ReviewResults";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `gapo`.OrgGapAnalysisID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS OrganizationLiaison,
   `ppl2`.DisplayName AS AuditTeamLeader,
   `gapo`.GapTitle,
   `gapo`.GapObjective,
   `gapo`.ScheduledStart,
   `gapo`.ScheduledEnd,
   TIMEDIFF(`gapo`.ScheduledEnd, `gapo`.ScheduledStart) AS ScheduledDuration,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`gapo`.GapTitle,'')),' | ') AS RecordLabel,
   `gapo`.OrganizationID
FROM `gapo`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`gapo`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`gapo`.OrgGapAnalysisID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'gapo'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '180')
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`gapo`.OrgGapAnalysisID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'gapo'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '133')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc2`.PersonAccountableID = `ppl2`.PersonID )
WHERE
   gapo.OrgGapAnalysisID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Gap Analysis");
        $screenPhrase = gettext("Review Items|Assign review items to the organizational gap analysis");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Gap Analyses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'OrgGapAnalysisID' => gettext("Record ID|An automatically assigned number used to associate organizations with resource requirements"),
   'Organization' => gettext("Organization|The name of the organization where the gap analysis is scheduled to occur"),
   'OrganizationLiaison' => gettext("Organization Liaison|The individual assigned primary accountability for organizing the gap analysis for the organization being evaluated"),
   'AuditTeamLeader' => gettext("Gap Team Leader|The individual assigned primary accountability for conducting the gap analysis"),
   'GapTitle' => gettext("Gap Analysis Title|A short title used to identify the organizational gap analysis"),
   'GapObjective' => gettext("Gap Objective|A detailed description of the scope, purpose, and/or objective of the gap analysis"),
   'ScheduledStart' => gettext("Scheduled Start|The date and time the organizational gap analysis is scheduled to began"),
   'ScheduledEnd' => gettext("Scheduled End|The date and time the organizational gap analysis is scheduled to end"),
   'ScheduledDuration' => gettext("Scheduled Duration|The scheduled duration of the organizational gap analysis")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Gap Analyses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Gap Analysis") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the organizational gap analysis") );
      $tempTabs['ReviewItems'] = array( "", gettext("Review Items|Assign review items to the organizational gap analysis") );
      $tempTabs['ReviewResults'] = array( "edit.php?scr=ReviewResults&$tabsQS", gettext("Review Results|Assign review results to items associated with the organizational gap analysis") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the organizational gap analysis") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the organizational gap analysis") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with the organizational gap analysis") );
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View the current gap analysis item report") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['ReviewItems'] = array( "", gettext("New Gap Analysis") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>