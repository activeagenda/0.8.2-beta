<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:9:{s:16:"OrgGapAnalysisID";O:9:"viewfield":16:{s:4:"name";s:16:"OrgGapAnalysisID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Record ID|An automatically assigned number used to associate organizations with resource requirements";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Organization|The name of the organization where the gap analysis is scheduled to occur";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"OrganizationLiaison";O:9:"viewfield":16:{s:4:"name";s:19:"OrganizationLiaison";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:136:"Organization Liaison|The individual assigned primary accountability for organizing the gap analysis for the organization being evaluated";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"AuditTeamLeader";O:9:"viewfield":16:{s:4:"name";s:15:"AuditTeamLeader";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Gap Team Leader|The individual assigned primary accountability for conducting the gap analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"GapTitle";O:9:"viewfield":16:{s:4:"name";s:8:"GapTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Gap Analysis Title|A short title used to identify the organizational gap analysis";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"GapObjective";O:9:"viewfield":16:{s:4:"name";s:12:"GapObjective";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Gap Objective|A detailed description of the scope, purpose, and/or objective of the gap analysis";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ScheduledStart";O:9:"viewfield":16:{s:4:"name";s:14:"ScheduledStart";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Scheduled Start|The date and time the organizational gap analysis is scheduled to began";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ScheduledEnd";O:9:"viewfield":16:{s:4:"name";s:12:"ScheduledEnd";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Scheduled End|The date and time the organizational gap analysis is scheduled to end";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ScheduledDuration";O:9:"viewfield":16:{s:4:"name";s:17:"ScheduledDuration";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Scheduled Duration|The scheduled duration of the organizational gap analysis";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Gap Analysis");

//field value array
$data = array(
        'OrgGapAnalysisID' => '',
         'Organization' => '',
         'OrganizationLiaison' => '',
         'AuditTeamLeader' => '',
         'GapTitle' => '',
         'GapObjective' => '',
         'ScheduledStart' => '',
         'ScheduledEnd' => '',
         'ScheduledDuration' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"gapoi";s:6:"phrase";s:14:"Review Results";s:6:"number";i:1;s:6:"Fields";a:6:{s:17:"GapAnalysisItemID";O:14:"invisiblefield":11:{s:4:"name";s:17:"GapAnalysisItemID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Record ID|An automatically assigned number used to associate organizations with resource requirements";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:6:"Module";O:9:"viewfield":16:{s:4:"name";s:6:"Module";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Gap Analysis Area|The name of the the risk control area or module associated with the gap analysis";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"AnalysisType";O:9:"viewfield":16:{s:4:"name";s:12:"AnalysisType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Analysis Type|The specific type of gap analysis performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"AnalysisItem";O:9:"viewfield":16:{s:4:"name";s:12:"AnalysisItem";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Analysis Item|A brief title used to identify the item being analyzed for gaps";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"IndexValue";O:9:"viewfield":16:{s:4:"name";s:10:"IndexValue";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:251:"Index Value|A calculated field based on the risk likelihood and risk severity. The resulting risk index value is compared against the assigned risk index recommendations entered into the Risk Index module and the respective recommendation is displayed";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"ReviewStatus";O:9:"viewfield":16:{s:4:"name";s:12:"ReviewStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Review Status|The current status of the gap analysis item review";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"gapoi";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:115:"SELECT 
    count(*) 
FROM `gapoi`
   
WHERE gapoi._Deleted = 0
   AND `gapoi`.OrgGapAnalysisID = \'/**RecordID**/\'
";s:7:"listSQL";s:1451:"SELECT 
   `gapoi`.GapAnalysisItemID,
`gapo1`.OrganizationID AS OrganizationID,
`mod1`.Name AS Module,
`cod1`.Description AS AnalysisType,
`gap1`.AnalysisItem AS AnalysisItem,
IFNULL(`rskl1`.LikelihoodValue,0) * IFNULL(IF(`csc1`.SeverityValue > `rsks1`.SeverityValue, `csc1`.SeverityValue, `rsks1`.SeverityValue),0) AS IndexValue,
`cod2`.Description AS ReviewStatus
FROM `gapoi`

   LEFT OUTER JOIN `gapo` AS gapo1 
   ON (`gapoi`.OrgGapAnalysisID = `gapo1`.OrgGapAnalysisID )
   LEFT OUTER JOIN `gap` AS gap1 
   ON (`gapoi`.GapAnalysisID = `gap1`.GapAnalysisID )
   LEFT OUTER JOIN `rskxa` AS rskxa1 
    ON (`gapoi`.GapAnalysisItemID = `rskxa1`.SourceRecordID 
     AND `rskxa1`.SourceModuleID = \'gapoi\'
     AND `rskxa1`._Deleted = 0)
   LEFT OUTER JOIN `csc` AS csc1 
    ON (`gapoi`.GapAnalysisItemID = `csc1`.RecordID 
     AND `csc1`.ModuleID = \'gapoi\'
     AND `csc1`._Deleted = 0)
   LEFT OUTER JOIN `cod` AS cod2 
   ON (`gapoi`.ReviewStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'263\')
   LEFT OUTER JOIN `mod` AS mod1 
   ON (`gap1`.ModuleID = `mod1`.ModuleID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`gap1`.AnalysisTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'157\')
   LEFT OUTER JOIN `rsks` AS rsks1 
   ON (`rskxa1`.SeverityID = `rsks1`.SeverityID )
   LEFT OUTER JOIN `rskl` AS rskl1 
   ON (`rskxa1`.LikelihoodID = `rskl1`.LikelihoodID )
WHERE gapoi._Deleted = 0
AND `gapoi`.OrgGapAnalysisID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:16:"OrgGapAnalysisID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:6:{s:17:"GapAnalysisItemID";s:3:"int";s:6:"Module";N;s:12:"AnalysisType";N;s:12:"AnalysisItem";N;s:10:"IndexValue";s:3:"int";s:12:"ReviewStatus";N;}s:4:"name";N;s:10:"fieldAlign";a:6:{s:17:"GapAnalysisItemID";s:5:"right";s:6:"Module";s:4:"left";s:12:"AnalysisType";s:4:"left";s:12:"AnalysisItem";s:4:"left";s:10:"IndexValue";s:5:"right";s:12:"ReviewStatus";s:4:"left";}}');


    /**guidanceGrid**/

    $PKField = 'OrgGapAnalysisID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `gapo`.OrgGapAnalysisID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS OrganizationLiaison,
   `ppl2`.DisplayName AS AuditTeamLeader,
   `gapo`.GapTitle,
   `gapo`.GapObjective,
   `gapo`.ScheduledStart,
   `gapo`.ScheduledEnd,
   TIMEDIFF(`gapo`.ScheduledEnd, `gapo`.ScheduledStart) AS ScheduledDuration,
   NULLIF(CONCAT(IFNULL(`org1`.Name,''),' | ',IFNULL(`gapo`.GapTitle,'')),' | ') AS RecordLabel,
   `gapo`.OrganizationID
FROM `gapo`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`gapo`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`gapo`.OrgGapAnalysisID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'gapo'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '180')
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`gapo`.OrgGapAnalysisID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'gapo'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '133')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc2`.PersonAccountableID = `ppl2`.PersonID )
WHERE
   gapo.OrgGapAnalysisID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Gap Analysis");
        $screenPhrase = gettext("Review Results|Assign review results to items associated with the organizational gap analysis");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Gap Analyses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'OrgGapAnalysisID' => gettext("Record ID|An automatically assigned number used to associate organizations with resource requirements"),
   'Organization' => gettext("Organization|The name of the organization where the gap analysis is scheduled to occur"),
   'OrganizationLiaison' => gettext("Organization Liaison|The individual assigned primary accountability for organizing the gap analysis for the organization being evaluated"),
   'AuditTeamLeader' => gettext("Gap Team Leader|The individual assigned primary accountability for conducting the gap analysis"),
   'GapTitle' => gettext("Gap Analysis Title|A short title used to identify the organizational gap analysis"),
   'GapObjective' => gettext("Gap Objective|A detailed description of the scope, purpose, and/or objective of the gap analysis"),
   'ScheduledStart' => gettext("Scheduled Start|The date and time the organizational gap analysis is scheduled to began"),
   'ScheduledEnd' => gettext("Scheduled End|The date and time the organizational gap analysis is scheduled to end"),
   'ScheduledDuration' => gettext("Scheduled Duration|The scheduled duration of the organizational gap analysis")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Gap Analyses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Gap Analysis") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the organizational gap analysis") );
      $tempTabs['ReviewItems'] = array( "edit.php?scr=ReviewItems&$tabsQS", gettext("Review Items|Assign review items to the organizational gap analysis") );
      $tempTabs['ReviewResults'] = array( "", gettext("Review Results|Assign review results to items associated with the organizational gap analysis") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the organizational gap analysis") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the organizational gap analysis") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with the organizational gap analysis") );
      $tempTabs['RecordReports'] = array( "reports.php?scr=RecordReports&$tabsQS", gettext("Reports|View the current gap analysis item report") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['ReviewResults'] = array( "", gettext("New Gap Analysis") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>