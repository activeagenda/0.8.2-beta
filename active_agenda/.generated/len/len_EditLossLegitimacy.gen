<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:14:{s:17:"LossEnvironmentID";O:9:"viewfield":16:{s:4:"name";s:17:"LossEnvironmentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Record ID|An automatically assigned number used to track environmental releases resulting in loss";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"IncidentReport";O:9:"viewfield":16:{s:4:"name";s:14:"IncidentReport";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"EventDate";O:9:"viewfield":16:{s:4:"name";s:9:"EventDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Event Date|Date the situation or incident occurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"IncurredTime";O:9:"viewfield":16:{s:4:"name";s:12:"IncurredTime";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Incurred Date|Date the environmental release loss was incurred";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:86:"Organization|The organization responsible for the location where this release occurred";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Location|Specific location within the facility where the environmental release occurred";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Chemical";O:9:"viewfield":16:{s:4:"name";s:8:"Chemical";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Chemical|The common name of the chemical that was released";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"ReleaseType";O:9:"viewfield":16:{s:4:"name";s:11:"ReleaseType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Release Type|The type of environmental release associated with this reported incident";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ReleaseLossDesc";O:9:"viewfield":16:{s:4:"name";s:15:"ReleaseLossDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:81:"Release Description|A detailed description of the release and the associated loss";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"CachedTotalCost";O:9:"viewfield":16:{s:4:"name";s:15:"CachedTotalCost";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:42:"Total Cost|The total cost of this incident";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"ClaimID";O:14:"invisiblefield":11:{s:4:"name";s:7:"ClaimID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:20:"LegitimacyCategoryID";O:14:"codecombofield":27:{s:4:"name";s:20:"LegitimacyCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'191\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'191\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:20:"LossLegitimacyTypeID";a:1:{s:4:"name";s:20:"LossLegitimacyTypeID";}}s:8:"moduleID";s:3:"len";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"191";}s:20:"LossLegitimacyTypeID";O:10:"combofield":26:{s:4:"name";s:20:"LossLegitimacyTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"llit";s:10:"foreignKey";s:20:"LossLegitimacyTypeID";s:12:"foreignField";s:18:"LossLegitimacyType";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:199:"SELECT 
`llit`.LossLegitimacyTypeID AS ID, NULLIF(CONCAT(IFNULL(`llit`.LegitimacyType,\'\')),\'\') AS Name, `llit`.LegitimacyCategoryID AS ParentID FROM `llit`
WHERE llit._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:207:"SELECT 
`llit`.LossLegitimacyTypeID AS ID, NULLIF(CONCAT(IFNULL(`llit`.LegitimacyType,\'\')),\'\') AS Name, `llit`.LegitimacyCategoryID AS ParentID FROM `llit`

WHERE `llit`.LossLegitimacyTypeID = \'/*recordID*/\'";s:11:"parentField";s:20:"LegitimacyCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"LegitimacyDesc";a:1:{s:4:"name";s:14:"LegitimacyDesc";}}s:8:"moduleID";s:3:"len";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"LegitimacyDesc";O:9:"viewfield":16:{s:4:"name";s:14:"LegitimacyDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Legitimacy Description|A brief, but detailed, description of the legitimacy type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:20:"LossLegitimacyTypeID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Environmental Loss");

//field value array
$data = array(
        'LossEnvironmentID' => '',
         'IncidentReport' => '',
         'EventDate' => '',
         'IncurredTime' => '',
         'Organization' => '',
         'Location' => '',
         'Chemical' => '',
         'ReleaseType' => '',
         'ReleaseLossDesc' => '',
         'CachedTotalCost' => '',
         'ClaimID' => '',
         'LegitimacyCategoryID' => '',
         'LossLegitimacyTypeID' => '',
         'LegitimacyDesc' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'LossEnvironmentID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "RiskMatrix";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `len`.LossEnvironmentID,
   NULLIF(CONCAT(IFNULL(`ire1`.IncidentName,'')),'') AS IncidentReport,
   `dat1`.RelatedDate AS EventDate,
   `dat5`.RelatedDate AS IncurredTime,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   NULLIF(CONCAT(IFNULL(`chm1`.CommonName,''),' | CAS: ',IFNULL(`chm1`.CASNumber,'')),' | CAS: ') AS Chemical,
   `cod1`.Description AS ReleaseType,
   `len`.ReleaseLossDesc,
   ROUND(`csc1`.TotalCost, 2) AS CachedTotalCost,
   `clm1`.ClaimID AS ClaimID,
   `cod5`.Description AS LegitimacyCategory,
   `llit1`.LegitimacyCategoryID AS LegitimacyCategoryID,
   NULLIF(CONCAT(IFNULL(`llit1`.LegitimacyType,'')),'') AS LossLegitimacyType,
   `lli1`.LossLegitimacyTypeID AS LossLegitimacyTypeID,
   `llit1`.LegitimacyDesc AS LegitimacyDesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`chm1`.CommonName,''),' | CAS: ',IFNULL(`chm1`.CASNumber,'')),' | CAS: '),''),' released to ',IFNULL(`cod1`.Description,''),' by ',IFNULL(`org1`.Name,''),' on ',IFNULL(`dat1`.RelatedDate,'')),' released to  by  on ') AS RecordLabel,
   `len`.OrganizationID
FROM `len`
   
     LEFT OUTER JOIN `clm` AS clm1 
    ON (`len`.LossEnvironmentID = `clm1`.RelatedRecordID 
     AND `clm1`.RelatedModuleID = 'len'
     AND `clm1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`len`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `chm` AS chm1 
   ON (`len`.ChemicalID = `chm1`.ChemicalID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`len`.ReleaseTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '226')
     LEFT OUTER JOIN `csc` AS csc1 
    ON (`len`.LossEnvironmentID = `csc1`.RecordID 
     AND `csc1`.ModuleID = 'len'
     AND `csc1`._Deleted = 0)
     LEFT OUTER JOIN `ire` AS ire1 
   ON (`clm1`.IncidentReportID = `ire1`.IncidentReportID )
     LEFT OUTER JOIN `dat` AS dat5 
    ON (`clm1`.ClaimID = `dat5`.SourceRecordID 
     AND `dat5`.SourceModuleID = 'clm'
     AND `dat5`._Deleted = 0
     AND `dat5`.DateDescriptorID = '34')
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`clm1`.ClaimID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'clm'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `lli` AS lli1 
    ON (`clm1`.ClaimID = `lli1`.SourceRecordID 
     AND `lli1`.SourceModuleID = 'clm'
     AND `lli1`._Deleted = 0)
     LEFT OUTER JOIN `llit` AS llit1 
   ON (`lli1`.LossLegitimacyTypeID = `llit1`.LossLegitimacyTypeID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`ire1`.IncidentReportID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'ire'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '16')
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`llit1`.LegitimacyCategoryID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '191')
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   len.LossEnvironmentID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Environmental Loss");
        $screenPhrase = gettext("Legitimacy|Edit summary information about the legitimacy of the claim of environmental loss");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Environmental Losses");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'LossEnvironmentID' => gettext("Record ID|An automatically assigned number used to track environmental releases resulting in loss"),
   'IncidentReport' => gettext("Incident Reported|A description of the incident reported based on a combination of field values assigned from within the Incident Reports module"),
   'EventDate' => gettext("Event Date|Date the situation or incident occurred"),
   'IncurredTime' => gettext("Incurred Date|Date the environmental release loss was incurred"),
   'Organization' => gettext("Organization|The organization responsible for the location where this release occurred"),
   'Location' => gettext("Location|Specific location within the facility where the environmental release occurred"),
   'Chemical' => gettext("Chemical|The common name of the chemical that was released"),
   'ReleaseType' => gettext("Release Type|The type of environmental release associated with this reported incident"),
   'ReleaseLossDesc' => gettext("Release Description|A detailed description of the release and the associated loss"),
   'CachedTotalCost' => gettext("Total Cost|The total cost of this incident"),
   'ClaimID' => gettext("Claim ID|The record ID field of the Claims module"),
   'LegitimacyCategoryID' => gettext("Legitimacy Category|A broadly defined title or phrase used to group claims of similar loss legitimacy"),
   'LossLegitimacyTypeID' => gettext("Legitimacy Type|A combined field used to describe the legitimacy type when associating it with other records"),
   'LegitimacyDesc' => gettext("Legitimacy Description|A brief, but detailed, description of the legitimacy type")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Environmental Losses"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Environmental Loss") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the environmental loss") );
      $tempTabs['Claim'] = array( "edit.php?scr=Claim&$tabsQS", gettext("Claim|Edit summary information about the claim of environmental loss") );
      $tempTabs['LossLocation'] = array( "edit.php?scr=LossLocation&$tabsQS", gettext("Location|Edit summary information about the location of the claim of environmental loss") );
      $tempTabs['LossStatus'] = array( "edit.php?scr=LossStatus&$tabsQS", gettext("Status|Edit summary information about the status of the claim of environmental loss") );
      $tempTabs['LossLegitimacy'] = array( "", gettext("Legitimacy|Edit summary information about the legitimacy of the claim of environmental loss") );
      $tempTabs['RiskMatrix'] = array( "edit.php?scr=RiskMatrix&$tabsQS", gettext("Risk Matrix|Edit risk matrix values associated with an environmental loss") );
      $tempTabs['EventLog'] = array( "edit.php?scr=EventLog&$tabsQS", gettext("Events|Associate ongoing events with an environmental incident") );
      $tempTabs['Documentation'] = array( "edit.php?scr=Documentation&$tabsQS", gettext("Documentation|Track the status of documentation delivery requirements associated with an environmental incident") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the environmental incident") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the environmental incident") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with a physical environmental loss file") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the environmental incident") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['LossLegitimacy'] = array( "", gettext("New Environmental Loss") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>