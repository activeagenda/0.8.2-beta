<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:11:{s:16:"TownHallAnswerID";O:9:"viewfield":16:{s:4:"name";s:16:"TownHallAnswerID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Record ID|An automatically assigned number used to track answers to town hall questions asked throughout the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:14:"QuestionTypeID";a:1:{s:4:"name";s:14:"QuestionTypeID";}}s:8:"moduleID";s:4:"twna";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:14:"QuestionTypeID";O:14:"codecombofield":27:{s:4:"name";s:14:"QuestionTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'220\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:320:"SELECT DISTINCT
`twn`.QuestionTypeID AS ID, `cod1`.Description AS Name, `twn`.OrganizationID AS ParentID
FROM `twn`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`twn`.QuestionTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'220\')
WHERE `twn`._Deleted = 0
AND `twn`.QuestionTypeID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:272:"SELECT DISTINCT
`twn`.QuestionTypeID AS ID, `cod1`.Description AS Name, `twn`.OrganizationID AS ParentID
FROM `twn`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`twn`.QuestionTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'220\')
WHERE `twn`.QuestionTypeID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"TownHallQuestionID";a:2:{s:4:"name";s:18:"TownHallQuestionID";s:15:"listParentField";s:14:"QuestionTypeID";}}s:8:"moduleID";s:4:"twna";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"220";}s:18:"TownHallQuestionID";O:10:"combofield":26:{s:4:"name";s:18:"TownHallQuestionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"twn";s:10:"foreignKey";s:18:"TownHallQuestionID";s:12:"foreignField";s:16:"TownHallQuestion";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:527:"SELECT 
`twn`.TownHallQuestionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' asking: \',IFNULL(`twn`.QuestionAsked,\'\')),\' asking: \') AS Name, `twn`.QuestionTypeID AS ParentID FROM `twn`
 
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`twn`.TownHallQuestionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'twn\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'43\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )
WHERE twn._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:533:"SELECT 
`twn`.TownHallQuestionID AS ID, NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' asking: \',IFNULL(`twn`.QuestionAsked,\'\')),\' asking: \') AS Name, `twn`.QuestionTypeID AS ParentID FROM `twn`
 
 LEFT OUTER JOIN `inv` AS inv1 
    ON (`twn`.TownHallQuestionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'twn\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'43\')
 LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`inv1`.PersonInvolvedID = `ppl1`.PersonID )

WHERE `twn`.TownHallQuestionID = \'/*recordID*/\'";s:11:"parentField";s:14:"QuestionTypeID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:11:"PersonAsked";a:1:{s:4:"name";s:11:"PersonAsked";}s:15:"QuestionDetails";a:1:{s:4:"name";s:15:"QuestionDetails";}}s:8:"moduleID";s:4:"twna";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`twn`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"PersonAsked";O:9:"viewfield":16:{s:4:"name";s:11:"PersonAsked";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:60:"Person Asked|The name of the person being asked the question";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:18:"TownHallQuestionID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"QuestionAsked";O:9:"viewfield":16:{s:4:"name";s:13:"QuestionAsked";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Question|A clear and direct question which is important to the person asking the question";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:18:"TownHallQuestionID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:15:"QuestionDetails";O:9:"viewfield":16:{s:4:"name";s:15:"QuestionDetails";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:175:"Details|Additional details about the question being asked and additional information the person asking would like to share about the question or their motivation for asking it";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:18:"TownHallQuestionID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:17:"PersonAnsweringID";O:16:"personcombofield":29:{s:4:"name";s:17:"PersonAnsweringID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"twna";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:21:"PersonAnsweringID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:16:"AnswertoQuestion";O:9:"memofield":15:{s:4:"name";s:16:"AnswertoQuestion";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:12:"ReceivedDate";O:9:"datefield":15:{s:4:"name";s:12:"ReceivedDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"AnswerDate";O:9:"datefield":15:{s:4:"name";s:10:"AnswerDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"datetime";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}}');

$hasEditableFields = true;


$singularRecordName = gettext("Town Hall Answer");

//field value array
$data = array(
        'TownHallAnswerID' => '',
         'OrganizationID' => '',
         'QuestionTypeID' => '',
         'TownHallQuestionID' => '',
         'PersonAsked' => '',
         'QuestionAsked' => '',
         'QuestionDetails' => '',
         'PersonAnsweringID' => '',
         'AnswertoQuestion' => '',
         'ReceivedDate' => '',
         'AnswerDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'TownHallAnswerID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `twna`.TownHallAnswerID,
   `org1`.Name AS Organization,
   `twn1`.OrganizationID AS OrganizationID,
   `cod1`.Description AS QuestionType,
   `twn1`.QuestionTypeID AS QuestionTypeID,
   NULLIF(CONCAT(IFNULL(`ppl4`.DisplayName,''),' asking: ',IFNULL(`twn1`.QuestionAsked,'')),' asking: ') AS TownHallQuestion,
   `twna`.TownHallQuestionID,
   `ppl2`.DisplayName AS PersonAsked,
   `twn1`.QuestionAsked AS QuestionAsked,
   `twn1`.QuestionDetails AS QuestionDetails,
   `ppl3`.DisplayName AS PersonAnswering,
   `inv3`.PersonInvolvedID AS PersonAnsweringID,
   `twna`.AnswertoQuestion,
   `dat2`.RelatedDate AS ReceivedDate,
   `dat3`.RelatedDate AS AnswerDate,
   NULLIF(CONCAT(IFNULL(`ppl3`.DisplayName,''),IFNULL(`org1`.Name,'')),'') AS RecordLabel
FROM `twna`
   
     LEFT OUTER JOIN `twn` AS twn1 
   ON (`twna`.TownHallQuestionID = `twn1`.TownHallQuestionID )
     LEFT OUTER JOIN `inv` AS inv3 
    ON (`twna`.TownHallAnswerID = `inv3`.SourceRecordID 
     AND `inv3`.SourceModuleID = 'twna'
     AND `inv3`._Deleted = 0
     AND `inv3`.InvolvementDescriptorID = '66')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`twna`.TownHallAnswerID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'twna'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '5')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`twna`.TownHallAnswerID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'twna'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '27')
     LEFT OUTER JOIN `org` AS org1 
   ON (`twn1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`twn1`.QuestionTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '220')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`twn1`.TownHallQuestionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'twn'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '43')
     LEFT OUTER JOIN `inv` AS inv2 
    ON (`twn1`.TownHallQuestionID = `inv2`.SourceRecordID 
     AND `inv2`.SourceModuleID = 'twn'
     AND `inv2`._Deleted = 0
     AND `inv2`.InvolvementDescriptorID = '68')
     LEFT OUTER JOIN `ppl` AS ppl2 
ON (`inv2`.PersonInvolvedID = `ppl2`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`inv3`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl4 
   ON (`inv1`.PersonInvolvedID = `ppl4`.PersonID )
WHERE
   twna.TownHallAnswerID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Town Hall Answer");
        $screenPhrase = gettext("Form|Edit summary information about a question");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Town Hall Answers");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'TownHallAnswerID' => gettext("Record ID|An automatically assigned number used to track answers to town hall questions asked throughout the organization"),
   'OrganizationID' => gettext("Pertinent Organization|The organization associated with the subject matter of the question"),
   'QuestionTypeID' => gettext("Question Type|A method of grouping questions of similar types so that cultural inferences may be drawn based on a predominance of interest"),
   'TownHallQuestionID' => gettext("Question|A combined field used to describe this question when associating it with other records"),
   'PersonAsked' => gettext("Person Asked|The name of the person being asked the question"),
   'QuestionAsked' => gettext("Question|A clear and direct question which is important to the person asking the question"),
   'QuestionDetails' => gettext("Details|Additional details about the question being asked and additional information the person asking would like to share about the question or their motivation for asking it"),
   'PersonAnsweringID' => gettext("Person Answering|The name of the person answering the question"),
   'AnswertoQuestion' => gettext("Answer|A clear and direct answer which is intended to fully answer the question being asked to the best of the answering person's ability"),
   'ReceivedDate' => gettext("Received Date|The date and time the question was first received by the person answering the question"),
   'AnswerDate' => gettext("Answer Date|The date and time the person answering the question provided the answer")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['PersonAnsweringID'], ShortPhrase($phrases['PersonAnsweringID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAnsweringID']->invalid = TRUE;
            }
$vMsg = Validate($data['AnswertoQuestion'], ShortPhrase($phrases['AnswertoQuestion']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AnswertoQuestion']->invalid = TRUE;
            }
$vMsg = Validate($data['ReceivedDate'], ShortPhrase($phrases['ReceivedDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ReceivedDate']->invalid = TRUE;
            }
$vMsg = Validate($data['AnswerDate'], ShortPhrase($phrases['AnswerDate']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['AnswerDate']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Town Hall Answers"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Town Hall Answer") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about a question") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the answer") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the answer") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the answer") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Answer") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"ReceivedDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_ReceivedDate\"
});
Calendar.setup({
   inputField : \"AnswerDate\",
".$User->getCalFormat(true)."
   showsTime   : true,
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_AnswerDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>