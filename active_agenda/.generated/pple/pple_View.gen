<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

    include_once(INCLUDE_PATH . '/ppleCustomizations.php');


    //list of objects containing the field information
    $fields = unserialize('a:57:{s:8:"PersonID";O:9:"viewfield":16:{s:4:"name";s:8:"PersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Person ID|Automatically assigned number used to track the contact information for people";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Organization|The organization the employee reports to";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"LastName";O:9:"viewfield":16:{s:4:"name";s:8:"LastName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:38:"Last Name|Family Name of an individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"FirstName";O:9:"viewfield":16:{s:4:"name";s:9:"FirstName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:38:"First Name|Given Name of an individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"MiddleName";O:9:"viewfield":16:{s:4:"name";s:10:"MiddleName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Middle Name|Middle Name or initial of an individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"DisplayName";O:9:"viewfield":16:{s:4:"name";s:11:"DisplayName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Display Name|Commonly used name of an individual used to display throughout this application";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"WorkAddress";O:9:"viewfield":16:{s:4:"name";s:11:"WorkAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Work Address|Physical street address where the person can be located at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"FullWorkPhone";O:9:"viewfield":16:{s:4:"name";s:13:"FullWorkPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Work Phone|Telephone number of the individual at their place of work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"WorkFax";O:9:"viewfield":16:{s:4:"name";s:7:"WorkFax";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Work Fax|Facsimile telephone number of the individual at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"HomeAddress";O:9:"viewfield":16:{s:4:"name";s:11:"HomeAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Home Address|Physical street address where the person can be located at home";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"HomePhone";O:9:"viewfield":16:{s:4:"name";s:9:"HomePhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Home Phone|Telephone number of the individual at home";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"HomeFax";O:9:"viewfield":16:{s:4:"name";s:7:"HomeFax";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Home Fax|Facsimile telephone number of the individual at home";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"MobilePhone";O:9:"viewfield":16:{s:4:"name";s:11:"MobilePhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Mobile Phone Number|Mobile telephone number";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"MobilePhoneAddress";O:9:"viewfield":16:{s:4:"name";s:18:"MobilePhoneAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Mobile Phone Address|Mobile telephone address for receiving text messages";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:18:"MobilePhoneAddress";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"WorkEmail";O:9:"viewfield":16:{s:4:"name";s:9:"WorkEmail";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Work Email|Email address used by the individual at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:9:"WorkEmail";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"HomeEmail";O:9:"viewfield":16:{s:4:"name";s:9:"HomeEmail";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Home Email|Email address used by the individual at home";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:9:"HomeEmail";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"PagerNumber";O:9:"viewfield":16:{s:4:"name";s:11:"PagerNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Pager Number|Telephone number used to page the individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"PagerPIN";O:9:"viewfield":16:{s:4:"name";s:8:"PagerPIN";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Pager PIN|Personal Identification Number used in association with an individual\'s pager";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Birthdate";O:9:"viewfield":16:{s:4:"name";s:9:"Birthdate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Birthdate|The date of the person\'s birth";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:3:"Age";O:9:"viewfield":16:{s:4:"name";s:3:"Age";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Age|The automatically calculated age of the employee based on the birthdate and the present date";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"SocialSecNo";O:9:"viewfield":16:{s:4:"name";s:11:"SocialSecNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Social Security Number|The identification number assigned to individuals by the individual\'s country";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"MaritalStatus";O:9:"viewfield":16:{s:4:"name";s:13:"MaritalStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Marital Status|Whether the employee is married or not";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"IdentificationNo";O:9:"viewfield":16:{s:4:"name";s:16:"IdentificationNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:112:"Identification Number|Any identification number, other than a driver\'s license number, possessed by the employee";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Gender";O:9:"viewfield":16:{s:4:"name";s:6:"Gender";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:29:"Gender|Gender of the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Race";O:9:"viewfield":16:{s:4:"name";s:4:"Race";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:25:"Race|Race of the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"EmployeeNo";O:9:"viewfield":16:{s:4:"name";s:10:"EmployeeNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Employee Number|A uniques number assigned by the organization to each employee for tracking purposes";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"OrgJobTitle";O:9:"viewfield":16:{s:4:"name";s:11:"OrgJobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Current Job Title|The job title occupied by the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"LocalLevel";O:9:"viewfield":16:{s:4:"name";s:10:"LocalLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Organization Level|The hierarchical level of the organization to which the job title belongs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"HireDate";O:9:"viewfield":16:{s:4:"name";s:8:"HireDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Hire Date|The date the employee was hired by the organization";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"TerminationDate";O:9:"viewfield":16:{s:4:"name";s:15:"TerminationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Termination Date|The date the employee was terminated from the organization";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"TerminationType";O:9:"viewfield":16:{s:4:"name";s:15:"TerminationType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Termination Type|The specific type of termination which resulted in the employee\'s separation from employment";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Service";O:9:"viewfield":16:{s:4:"name";s:7:"Service";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Term of Employment|The automatically calculated amount of time the employee has worked for the company";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:10:"Department";O:9:"viewfield":16:{s:4:"name";s:10:"Department";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Department|Department of the local organization which the employee belongs to";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Division";O:9:"viewfield":16:{s:4:"name";s:8:"Division";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Division|Name of the employee\'s division within the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Region";O:9:"viewfield":16:{s:4:"name";s:6:"Region";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Region|Geographical region of the organization the employee reports to";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"WorkAvailabilityGroup";O:9:"viewfield":16:{s:4:"name";s:21:"WorkAvailabilityGroup";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:210:"Availability Group|A broadly defined title or phrase used to associate work availability with specifics groups of similar types. Assignment of a group is required to calculate an employees labor utiliation rate";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"LaborUtilizationRate";O:9:"viewfield":16:{s:4:"name";s:20:"LaborUtilizationRate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Utilization Rate|The ratio of days worked compared to days of available work";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"Supervisor";O:9:"viewfield":16:{s:4:"name";s:10:"Supervisor";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:51:"Supervisor|The immediate supervisor of the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"EmploymentStatus";O:9:"viewfield":16:{s:4:"name";s:16:"EmploymentStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Employment Status|The amount of time an employee is available to work: Full, Part or Temporarily";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Active";O:9:"viewfield":16:{s:4:"name";s:6:"Active";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Active?|Whether the employee is presently active and available to work";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"WageStatus";O:9:"viewfield":16:{s:4:"name";s:10:"WageStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Wage Status|A either or choice regarding wage status. Choices include: salaried or hourly";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"HourlyWage";O:9:"viewfield":16:{s:4:"name";s:10:"HourlyWage";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:60:"Hourly Wage|The amount the employee is paid per hour of work";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Salary";O:9:"viewfield":16:{s:4:"name";s:6:"Salary";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Salary|The amount the employee is paid annually as a salary for work performed";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Shift";O:9:"viewfield":16:{s:4:"name";s:5:"Shift";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Shift|The shift during which the employee performs duties";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"I9DocCompleted";O:9:"viewfield":16:{s:4:"name";s:14:"I9DocCompleted";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"I9 Documentation Completed|Check this box if this employee has completed I9 documentation";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Preparer";O:9:"viewfield":16:{s:4:"name";s:8:"Preparer";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:75:"Preparer or Translator|The name of the individual that prepared the I9 form";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"I9ListDoc";O:9:"viewfield":16:{s:4:"name";s:9:"I9ListDoc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"I9 List Documents|The listed documents used to establish identity and employment eligibility";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"I9ListA";O:9:"viewfield":16:{s:4:"name";s:7:"I9ListA";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"List A Document|Document that establishes both identity and employment elegibility";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"I9ListB";O:9:"viewfield":16:{s:4:"name";s:7:"I9ListB";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"List B Document|Document that establishes identity";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"I9ListC";O:9:"viewfield":16:{s:4:"name";s:7:"I9ListC";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"List C Document|Document that establishes employment eligibility";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"DriversLicenseNo";O:9:"viewfield":16:{s:4:"name";s:16:"DriversLicenseNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:112:"Driver\'s License Number|The license number assigned to the individual granting the person the privilage to drive";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"DriversLicenseSt";O:9:"viewfield":16:{s:4:"name";s:16:"DriversLicenseSt";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:66:"Driver\'s License State|The state that granted the driver\'s license";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"DriversLicenseED";O:9:"viewfield":16:{s:4:"name";s:16:"DriversLicenseED";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:95:"Driver\'s License Expiration Date|The date the license number assigned to the individual expires";s:8:"dataType";s:11:"varchar(25)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"OpsCoVeh";O:9:"viewfield":16:{s:4:"name";s:8:"OpsCoVeh";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Operates Company Vehicle|Check this box if this employee operates a company vehicle";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"OpsCommVeh";O:9:"viewfield":16:{s:4:"name";s:10:"OpsCommVeh";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Operates Commercial Vehicle|Check this box if this employee operates a commercial vehicle";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"MVASigned";O:9:"viewfield":16:{s:4:"name";s:9:"MVASigned";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Motor Vehicle Agreement Signed|Check this box if the employee has signed a motor vehicle agreement";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"BusinessContinuity";O:9:"viewfield":16:{s:4:"name";s:18:"BusinessContinuity";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Business Continuity|This box should be checked if this employee is a critical asset in the event of a business continuation or recovery event.";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');


    //list of grids
    /**grids**/

    //phrases for field names, in field order
    $phrases = array(
   'PersonID' => gettext("Person ID|Automatically assigned number used to track the contact information for people"),
   'Organization' => gettext("Organization|The organization the employee reports to"),
   'LastName' => gettext("Last Name|Family Name of an individual"),
   'FirstName' => gettext("First Name|Given Name of an individual"),
   'MiddleName' => gettext("Middle Name|Middle Name or initial of an individual"),
   'DisplayName' => gettext("Display Name|Commonly used name of an individual used to display throughout this application"),
   'WorkAddress' => gettext("Work Address|Physical street address where the person can be located at work"),
   'FullWorkPhone' => gettext("Work Phone|Telephone number of the individual at their place of work"),
   'WorkFax' => gettext("Work Fax|Facsimile telephone number of the individual at work"),
   'HomeAddress' => gettext("Home Address|Physical street address where the person can be located at home"),
   'HomePhone' => gettext("Home Phone|Telephone number of the individual at home"),
   'HomeFax' => gettext("Home Fax|Facsimile telephone number of the individual at home"),
   'MobilePhone' => gettext("Mobile Phone Number|Mobile telephone number"),
   'MobilePhoneAddress' => gettext("Mobile Phone Address|Mobile telephone address for receiving text messages"),
   'WorkEmail' => gettext("Work Email|Email address used by the individual at work"),
   'HomeEmail' => gettext("Home Email|Email address used by the individual at home"),
   'PagerNumber' => gettext("Pager Number|Telephone number used to page the individual"),
   'PagerPIN' => gettext("Pager PIN|Personal Identification Number used in association with an individual's pager"),
   'Birthdate' => gettext("Birthdate|The date of the person's birth"),
   'Age' => gettext("Age|The automatically calculated age of the employee based on the birthdate and the present date"),
   'SocialSecNo' => gettext("Social Security Number|The identification number assigned to individuals by the individual's country"),
   'MaritalStatus' => gettext("Marital Status|Whether the employee is married or not"),
   'IdentificationNo' => gettext("Identification Number|Any identification number, other than a driver's license number, possessed by the employee"),
   'Gender' => gettext("Gender|Gender of the employee"),
   'Race' => gettext("Race|Race of the employee"),
   'EmployeeNo' => gettext("Employee Number|A uniques number assigned by the organization to each employee for tracking purposes"),
   'OrgJobTitle' => gettext("Current Job Title|The job title occupied by the employee"),
   'LocalLevel' => gettext("Organization Level|The hierarchical level of the organization to which the job title belongs"),
   'HireDate' => gettext("Hire Date|The date the employee was hired by the organization"),
   'TerminationDate' => gettext("Termination Date|The date the employee was terminated from the organization"),
   'TerminationType' => gettext("Termination Type|The specific type of termination which resulted in the employee's separation from employment"),
   'Service' => gettext("Term of Employment|The automatically calculated amount of time the employee has worked for the company"),
   'Department' => gettext("Department|Department of the local organization which the employee belongs to"),
   'Division' => gettext("Division|Name of the employee's division within the organization"),
   'Region' => gettext("Region|Geographical region of the organization the employee reports to"),
   'WorkAvailabilityGroup' => gettext("Availability Group|A broadly defined title or phrase used to associate work availability with specifics groups of similar types. Assignment of a group is required to calculate an employees labor utiliation rate"),
   'LaborUtilizationRate' => gettext("Utilization Rate|The ratio of days worked compared to days of available work"),
   'Supervisor' => gettext("Supervisor|The immediate supervisor of the employee"),
   'EmploymentStatus' => gettext("Employment Status|The amount of time an employee is available to work: Full, Part or Temporarily"),
   'Active' => gettext("Active?|Whether the employee is presently active and available to work"),
   'WageStatus' => gettext("Wage Status|A either or choice regarding wage status. Choices include: salaried or hourly"),
   'HourlyWage' => gettext("Hourly Wage|The amount the employee is paid per hour of work"),
   'Salary' => gettext("Salary|The amount the employee is paid annually as a salary for work performed"),
   'Shift' => gettext("Shift|The shift during which the employee performs duties"),
   'I9DocCompleted' => gettext("I9 Documentation Completed|Check this box if this employee has completed I9 documentation"),
   'Preparer' => gettext("Preparer or Translator|The name of the individual that prepared the I9 form"),
   'I9ListDoc' => gettext("I9 List Documents|The listed documents used to establish identity and employment eligibility"),
   'I9ListA' => gettext("List A Document|Document that establishes both identity and employment elegibility"),
   'I9ListB' => gettext("List B Document|Document that establishes identity"),
   'I9ListC' => gettext("List C Document|Document that establishes employment eligibility"),
   'DriversLicenseNo' => gettext("Driver's License Number|The license number assigned to the individual granting the person the privilage to drive"),
   'DriversLicenseSt' => gettext("Driver's License State|The state that granted the driver's license"),
   'DriversLicenseED' => gettext("Driver's License Expiration Date|The date the license number assigned to the individual expires"),
   'OpsCoVeh' => gettext("Operates Company Vehicle|Check this box if this employee operates a company vehicle"),
   'OpsCommVeh' => gettext("Operates Commercial Vehicle|Check this box if this employee operates a commercial vehicle"),
   'MVASigned' => gettext("Motor Vehicle Agreement Signed|Check this box if the employee has signed a motor vehicle agreement"),
   'BusinessContinuity' => gettext("Business Continuity|This box should be checked if this employee is a critical asset in the event of a business continuation or recovery event.")
   );


    $ownerField = 'OrganizationID';

    
    /**disbleGlobalModules**/
    /**useBestPractices**/

    //retrieve record
    $data = array();
    
    /**SQL|GET_BEGIN**/
    $SQL = "SELECT 
   `pple`.PersonID,
   `org1`.Name AS Organization,
   `ppl1`.LastName AS LastName,
   `ppl1`.FirstName AS FirstName,
   `ppl1`.MiddleName AS MiddleName,
   `ppl1`.DisplayName AS DisplayName,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkAddress1,''),'<br />',IFNULL(`ppl1`.WorkAddress2,''),'<br />',IFNULL(`ppl1`.WorkCity,''),', ',IFNULL(NULLIF(CONCAT(IFNULL(`sta3`.StateName,''),' (',IFNULL(`sta3`.StateAbbreviation,''),')'),' ()'),''),' ',IFNULL(`ppl1`.WorkPostalCode,''),'<br />',IFNULL(NULLIF(CONCAT(IFNULL(`ctr3`.CountryName,''),' (',IFNULL(`ctr3`.CountryAbbreviation,''),')'),' ()'),'')),'<br /><br />,  <br />') AS WorkAddress,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkPhone,''),', ext. ',IFNULL(`ppl1`.WorkExtension,'')),', ext. ') AS FullWorkPhone,
   `ppl1`.WorkFax AS WorkFax,
   NULLIF(CONCAT(IFNULL(`ppl1`.HomeAddress1,''),'<br />',IFNULL(`ppl1`.HomeAddress2,''),'<br />',IFNULL(`ppl1`.HomeCity,''),', ',IFNULL(`sta4`.StateAbbreviation,''),' ',IFNULL(`ppl1`.HomePostalCode,''),'<br />',IFNULL(NULLIF(CONCAT(IFNULL(`ctr4`.CountryName,''),' (',IFNULL(`ctr4`.CountryAbbreviation,''),')'),' ()'),'')),'<br /><br />,  <br />') AS HomeAddress,
   `ppl1`.HomePhone AS HomePhone,
   `ppl1`.HomeFax AS HomeFax,
   `ppl1`.MobilePhone AS MobilePhone,
   `ppl1`.MobilePhoneAddress AS MobilePhoneAddress,
   `ppl1`.WorkEmail AS WorkEmail,
   `ppl1`.HomeEmail AS HomeEmail,
   `ppl1`.PagerNumber AS PagerNumber,
   `ppl1`.PagerPIN AS PagerPIN,
   `dat1`.RelatedDate AS Birthdate,
   CONCAT(FLOOR(DATEDIFF(now(), `dat1`.RelatedDate)/365.24), ' years, ', ROUND(MOD(DATEDIFF(now(), `dat1`.RelatedDate), 365.24)/30.44), ' months') AS Age,
   `pple`.SocialSecNo,
   `cod1`.Description AS MaritalStatus,
   `pple`.IdentificationNo,
   `cod4`.Description AS Gender,
   `cod5`.Description AS Race,
   `pple`.EmployeeNo,
   NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,'')),'') AS OrgJobTitle,
   `cod3`.Description AS LocalLevel,
   `dat2`.RelatedDate AS HireDate,
   `dat3`.RelatedDate AS TerminationDate,
   `cod6`.Description AS TerminationType,
   CONCAT(FLOOR(DATEDIFF(`dat3`.RelatedDate, `dat2`.RelatedDate)/365.24), ' years, ', ROUND(MOD(DATEDIFF(`dat3`.RelatedDate, `dat2`.RelatedDate), 365.24)/30.44), ' months') AS Service,
   NULLIF(CONCAT(IFNULL(`orgdp1`.DepartmentName,'')),'') AS Department,
   NULLIF(CONCAT(IFNULL(`orgdv1`.DivisionName,'')),'') AS Division,
   NULLIF(CONCAT(IFNULL(`orgrg1`.RegionName,'')),'') AS Region,
   `cod10`.Description AS WorkAvailabilityGroup,
   `pple`.LaborUtilizationRate,
   `ppl2`.DisplayName AS Supervisor,
   `cod7`.Description AS EmploymentStatus,
   `pple`.Active,
   `cod8`.Description AS WageStatus,
   `pple`.HourlyWage,
   `pple`.Salary,
   `cod9`.Description AS Shift,
   `pple`.I9DocCompleted,
   `ppl3`.DisplayName AS Preparer,
   `cod11`.Description AS I9ListDoc,
   `cod12`.Description AS I9ListA,
   `cod13`.Description AS I9ListB,
   `cod14`.Description AS I9ListC,
   `pple`.DriversLicenseNo,
   `pple`.DriversLicenseSt,
   `pple`.DriversLicenseED,
   `pple`.OpsCoVeh,
   `pple`.OpsCommVeh,
   `pple`.MVASigned,
   `pple`.BusinessContinuity,
   NULLIF(CONCAT(IFNULL(`ppl1`.LastName,''),', ',IFNULL(`ppl1`.FirstName,''),' (',IFNULL(`ppl1`.DisplayName,''),') | ',IFNULL(`pple`.EmployeeNo,'')),',  () | ') AS RecordLabel,
   `ppl1`.OrganizationID AS OrganizationID
FROM `pple`
   
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`pple`.PersonID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'pple'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '49')
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`pple`.I9ListCID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '188')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`pple`.GenderID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '160')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`pple`.RaceID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '222')
     LEFT OUTER JOIN `orgja` AS orgja1 
    ON (`pple`.PersonID = `orgja1`.RelatedRecordID 
     AND `orgja1`.RelatedModuleID = 'pple'
     AND `orgja1`._Deleted = 0)
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`pple`.PersonID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'pple'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '40')
     LEFT OUTER JOIN `dat` AS dat3 
    ON (`pple`.PersonID = `dat3`.SourceRecordID 
     AND `dat3`.SourceModuleID = 'pple'
     AND `dat3`._Deleted = 0
     AND `dat3`.DateDescriptorID = '41')
     LEFT OUTER JOIN `cod` AS cod6 
   ON (`pple`.TerminationTypeID = `cod6`.CodeID 
     AND `cod6`.CodeTypeID = '36')
     LEFT OUTER JOIN `orgda` AS orgda1 
    ON (`pple`.PersonID = `orgda1`.RelatedRecordID 
     AND `orgda1`.RelatedModuleID = 'pple'
     AND `orgda1`._Deleted = 0)
     LEFT OUTER JOIN `orgrg` AS orgrg1 
   ON (`pple`.RegionID = `orgrg1`.RegionID )
     LEFT OUTER JOIN `cod` AS cod10 
   ON (`pple`.WorkAvailabilityGroupID = `cod10`.CodeID 
     AND `cod10`.CodeTypeID = '109')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`pple`.PersonID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'pple'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '104')
     LEFT OUTER JOIN `cod` AS cod7 
   ON (`pple`.EmploymentStatusID = `cod7`.CodeID 
     AND `cod7`.CodeTypeID = '145')
     LEFT OUTER JOIN `cod` AS cod8 
   ON (`pple`.WageStatusID = `cod8`.CodeID 
     AND `cod8`.CodeTypeID = '256')
     LEFT OUTER JOIN `cod` AS cod9 
   ON (`pple`.ShiftID = `cod9`.CodeID 
     AND `cod9`.CodeTypeID = '25')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`pple`.PersonID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'pple'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '69')
     LEFT OUTER JOIN `cod` AS cod11 
   ON (`pple`.I9ListDocID = `cod11`.CodeID 
     AND `cod11`.CodeTypeID = '171')
     LEFT OUTER JOIN `cod` AS cod12 
   ON (`pple`.I9ListAID = `cod12`.CodeID 
     AND `cod12`.CodeTypeID = '172')
     LEFT OUTER JOIN `cod` AS cod13 
   ON (`pple`.I9ListBID = `cod13`.CodeID 
     AND `cod13`.CodeTypeID = '173')
     LEFT OUTER JOIN `cod` AS cod14 
   ON (`pple`.I9ListCID = `cod14`.CodeID 
     AND `cod14`.CodeTypeID = '174')
     LEFT OUTER JOIN `org` AS org1 
   ON (`ppl1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cti` AS cti3 
   ON (`ppl1`.WorkCountyID = `cti3`.CountyID )
     LEFT OUTER JOIN `cti` AS cti4 
   ON (`ppl1`.HomeCountyID = `cti4`.CountyID )
     LEFT OUTER JOIN `orgdv` AS orgdv1 
   ON (`ppl1`.OrganizationID = `orgdv1`.OrganizationID 
     AND `ppl1`.OrganizationID = orgdv1.DivisionID)
     LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`orgja1`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
     LEFT OUTER JOIN `orgdp` AS orgdp1 
   ON (`orgda1`.DepartmentID = `orgdp1`.DepartmentID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc1`.PersonAccountableID = `ppl2`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`inv1`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `sta` AS sta3 
   ON (`cti3`.StateID = `sta3`.StateID )
     LEFT OUTER JOIN `sta` AS sta4 
   ON (`cti4`.StateID = `sta4`.StateID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`orgjt1`.LocalLevelID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '22')
     LEFT OUTER JOIN `ctr` AS ctr3 
   ON (`sta3`.CountryID = `ctr3`.CountryID )
     LEFT OUTER JOIN `ctr` AS ctr4 
   ON (`sta4`.CountryID = `ctr4`.CountryID )
WHERE
   pple.PersonID='/**RecordID**/'";

    $custom_employee_status = verifyEmployeeRecord();
if(EMPLOYEE_STATUS_NO_RECORD == $custom_employee_status || EMPLOYEE_STATUS_DELETED == $custom_employee_status){
loadPersonRecord('View');
} else {


    //get data
    $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $SQL), DB_FETCHMODE_ASSOC);
    dbErrorCheck($r);

    
    /**SQL|GET_END**/
    //need to repeat for each getSQL........
    $data = array_merge($data, $r[0]); //assign first (only) row
    
    }

    
    //check if user has permission to view or edit record - will redirect if no permission at all
    $allowEdit = $User->CheckViewScreenPermission();
    //$allowEdit = true;

    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    $tabsQS = MakeQS($tabsQSargs);

    //List tab
    $tabs['List'] = Array("list.php?$qs", gettext("List|View the list of Employment Records"));

    if ($allowEdit){
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an employment record") );
      $tempTabs['WorkContact'] = array( "edit.php?scr=WorkContact&$tabsQS", gettext("Work Contact|Edit the work address and contact information of an employee") );
      $tempTabs['Employment'] = array( "edit.php?scr=Employment&$tabsQS", gettext("Employment|Edit summary information about the employment details of an employee") );
      $tempTabs['JobHistory'] = array( "edit.php?scr=JobHistory&$tabsQS", gettext("Job History|Associate job title history with an employee") );
      $tempTabs['Availability'] = array( "edit.php?scr=Availability&$tabsQS", gettext("Availability|Associate availability modifications with an employee") );
      $tempTabs['PersonalData'] = array( "edit.php?scr=PersonalData&$tabsQS", gettext("Personal Data|Edit personal information for an employee") );
      $tempTabs['Dependents'] = array( "edit.php?scr=Dependents&$tabsQS", gettext("Dependents|Associate dependents with an employee") );
      $tempTabs['Emergency'] = array( "edit.php?scr=Emergency&$tabsQS", gettext("Emergency Contacts|Associate emergency contacts with an employee") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate business agreements and/or contracts with an employee") );
      $tempTabs['PriorWork'] = array( "edit.php?scr=PriorWork&$tabsQS", gettext("Prior Work|Associate prior employment with an employee") );
      $tempTabs['Qualifications'] = array( "edit.php?scr=Qualifications&$tabsQS", gettext("Qualifications|Associate qualifications with an employee") );
      $tempTabs['KSAExperience'] = array( "edit.php?scr=KSAExperience&$tabsQS", gettext("KSA Experience|Associate knowledge, skills, and abilities, based on experience, with an employee") );
      $tempTabs['DriverInfo'] = array( "edit.php?scr=DriverInfo&$tabsQS", gettext("Driver's Information|Edit summary information about the driving qualifications of an employee") );
      $tempTabs['Citizenship'] = array( "edit.php?scr=Citizenship&$tabsQS", gettext("Citizenship|Edit summary information about the citizenship of an employee") );
      $tempTabs['BasicInfo'] = array( "edit.php?mdl=ppl&rid=$recordID", gettext("Contact Info|Contact info for this person") );
$tabs = array_merge($tabs, $tempTabs);
    } else {
              $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['View'] = array( "", gettext("View|View summary information about").' '.gettext("an Employment Record") );
$tabs = array_merge($tabs, $tempTabs);
    }
    
    $recordLabelField = $data['RecordLabel'];

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $pageTitle = gettext("Employment Record");
    $screenPhrase = gettext("View|View summary information about an employee");

    $backlink = "list.php?$qs";

    $nextScreen = "Form";
    $editlink = "edit.php?$tabsQS&scr=$nextScreen";
    $content = renderViewTable($content, $allowEdit, $backlink, $editlink);

    //add byline info on record modification info
    $content .= "<div class=\"recinfo\">{$phrases['_ModDate']} {$data['_ModDate']}";
    if ($User->IsAdmin) {
        $content .= '&nbsp; &nbsp; <a href="audit.php?mdl='.$ModuleID.'&rid='.$recordID.'">'.gettext("Audit Trail").'</a> ';
    }
    $content .= "</div>";

    //display view grids here
   $Grid1 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"ppljt";s:6:"phrase";s:17:"Job Title History";s:6:"number";i:1;s:6:"Fields";a:5:{s:16:"PeopleJobTitleID";O:14:"invisiblefield":11:{s:4:"name";s:16:"PeopleJobTitleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Job Title ID|A unique number assigned to each job title occupied by each employee for a stated period of time";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppljt";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:10:"LocalLevel";O:9:"viewfield":16:{s:4:"name";s:10:"LocalLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Organization Level|A hierarchical level of an organization to which individuals of an organization are assigned";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppljt";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"JobTitleType";O:9:"viewfield":16:{s:4:"name";s:12:"JobTitleType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Job Title Type|A combined field used to describe this job title type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppljt";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"OrgJobTitle";O:9:"viewfield":16:{s:4:"name";s:11:"OrgJobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Job Title|A combined field used to describe this job title when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppljt";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Service";O:9:"viewfield":16:{s:4:"name";s:7:"Service";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:91:"Service|The automatically calculated amount of time the employee has worked for the company";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppljt";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `ppljt`
   
WHERE ppljt._Deleted = 0
   AND `ppljt`.PersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:1430:"SELECT 
   `ppljt`.PeopleJobTitleID,
`ppl1`.OrganizationID AS OrganizationID,
`cod1`.Description AS LocalLevel,
NULLIF(CONCAT(IFNULL(`orgtt1`.JobTitleTypeTitle,\'\')),\'\') AS JobTitleType,
NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,\'\')),\'\') AS OrgJobTitle,
CONCAT(FLOOR(DATEDIFF(IFNULL(`dat1`.RelatedDate, now()), `dat2`.RelatedDate)/365.24), \' years, \', ROUND(MOD(DATEDIFF(IFNULL(`dat1`.RelatedDate, now()), `dat2`.RelatedDate), 365.24)/30.44), \' months\') AS Service
FROM `ppljt`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`ppljt`.PersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`ppljt`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
   LEFT OUTER JOIN `orgtt` AS orgtt2 
   ON (`ppljt`.OrgJobTitleID = `orgtt2`.JobTitleTypeID )
   LEFT OUTER JOIN `dat` AS dat2 
    ON (`ppljt`.PeopleJobTitleID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'ppljt\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'28\')
   LEFT OUTER JOIN `dat` AS dat1 
    ON (`ppljt`.PeopleJobTitleID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'ppljt\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'36\')
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgjt1`.LocalLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'22\')
   LEFT OUTER JOIN `orgtt` AS orgtt1 
   ON (`orgtt2`.JobTitleTypeID = `orgtt1`.JobTitleTypeID )
WHERE ppljt._Deleted = 0
AND `ppljt`.PersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:5:{s:16:"PeopleJobTitleID";s:3:"int";s:10:"LocalLevel";N;s:12:"JobTitleType";N;s:11:"OrgJobTitle";N;s:7:"Service";N;}s:4:"name";N;s:10:"fieldAlign";a:5:{s:16:"PeopleJobTitleID";s:5:"right";s:10:"LocalLevel";s:4:"left";s:12:"JobTitleType";s:7:"justify";s:11:"OrgJobTitle";s:7:"justify";s:7:"Service";s:4:"left";}}');
   $content .= $Grid1->render('view.php', $qsArgs);
   $Grid2 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"pplam";s:6:"phrase";s:12:"Availability";s:6:"number";i:2;s:6:"Fields";a:8:{s:26:"AvailabilityModificationID";O:9:"viewfield":16:{s:4:"name";s:26:"AvailabilityModificationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Record ID|An automatically assigned number used to track employee availability modifications";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:28:"AvailabilityModificationType";O:9:"viewfield":16:{s:4:"name";s:28:"AvailabilityModificationType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Modification Type|A combined field used to describe this availability modification type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"StartDate";O:9:"viewfield":16:{s:4:"name";s:9:"StartDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Start Date|The date this period of modified availability began";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"EndDate";O:9:"viewfield":16:{s:4:"name";s:7:"EndDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:60:"End Date|The date this period of modified availability ended";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Days";O:9:"viewfield":16:{s:4:"name";s:4:"Days";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:48:"Days|The number of days of modified availability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:16:"DaysNotScheduled";O:9:"viewfield":16:{s:4:"name";s:16:"DaysNotScheduled";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:161:"Days Not Scheduled|The number of days the person would not have been scheduled to work and therefore did not lose time from work due to the modified availability";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ActualDays";O:9:"viewfield":16:{s:4:"name";s:10:"ActualDays";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:154:"Actual Days|The number of days the person would not have been scheduled to work and therefore did not lose time from work due to the modified availability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:24:"AvailabilityModification";O:9:"viewfield":16:{s:4:"name";s:24:"AvailabilityModification";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Availability ModificationID|A combined field used to describe this availability modification when associating it with other records";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplam";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:8:"countSQL";s:115:"SELECT 
    count(*) 
FROM `pplam`
   
WHERE pplam._Deleted = 0
   AND `pplam`.EmployeePersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:1399:"SELECT 
   `pplam`.AvailabilityModificationID,
`ppl1`.OrganizationID AS OrganizationID,
NULLIF(CONCAT(IFNULL(`pplat1`.ModificationType,\'\')),\'\') AS AvailabilityModificationType,
`dat1`.RelatedDate AS StartDate,
`dat2`.RelatedDate AS EndDate,
DATEDIFF(`dat2`.RelatedDate, `dat1`.RelatedDate) AS Days,
`pplam`.DaysNotScheduled,
IFNULL(DATEDIFF(`dat2`.RelatedDate, `dat1`.RelatedDate),0) - IFNULL(`pplam`.DaysNotScheduled,0) AS ActualDays,
NULLIF(CONCAT(IFNULL(`ppl1`.DisplayName,\'\'),\' | \',IFNULL(NULLIF(CONCAT(IFNULL(`pplat1`.ModificationType,\'\')),\'\'),\'\'),\' | \',IFNULL(DATEDIFF(`dat2`.RelatedDate, `dat1`.RelatedDate),\'\'),\' days\'),\' |  |  days\') AS AvailabilityModification
FROM `pplam`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplam`.EmployeePersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `pplat` AS pplat1 
   ON (`pplam`.AvailabilityModificationTypeID = `pplat1`.AvailabilityModificationTypeID )
   LEFT OUTER JOIN `dat` AS dat1 
    ON (`pplam`.AvailabilityModificationID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'pplam\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'28\')
   LEFT OUTER JOIN `dat` AS dat2 
    ON (`pplam`.AvailabilityModificationID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'pplam\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'36\')
WHERE pplam._Deleted = 0
AND `pplam`.EmployeePersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:16:"EmployeePersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:8:{s:26:"AvailabilityModificationID";s:3:"int";s:28:"AvailabilityModificationType";N;s:9:"StartDate";s:4:"date";s:7:"EndDate";s:4:"date";s:4:"Days";N;s:16:"DaysNotScheduled";s:5:"float";s:10:"ActualDays";N;s:24:"AvailabilityModification";s:4:"text";}s:4:"name";N;s:10:"fieldAlign";a:8:{s:26:"AvailabilityModificationID";s:5:"right";s:28:"AvailabilityModificationType";s:7:"justify";s:9:"StartDate";s:6:"center";s:7:"EndDate";s:6:"center";s:4:"Days";s:4:"left";s:16:"DaysNotScheduled";s:5:"right";s:10:"ActualDays";s:4:"left";s:24:"AvailabilityModification";s:7:"justify";}}');
   $content .= $Grid2->render('view.php', $qsArgs);
   $Grid3 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:4:"linm";s:6:"phrase";s:25:"Work Injury Modifications";s:6:"number";i:3;s:6:"Fields";a:7:{s:18:"WorkModificationID";O:14:"invisiblefield":11:{s:4:"name";s:18:"WorkModificationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Record ID|An automatically assigned number used to associate injuries and/or illnesses with work modifications";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"ModificationType";O:9:"viewfield":16:{s:4:"name";s:16:"ModificationType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Modification Type|The type of work modification resulting from this injury or illness";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"StartDate";O:9:"viewfield":16:{s:4:"name";s:9:"StartDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Start Date|The date this period of work modification began";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"EndDate";O:9:"viewfield":16:{s:4:"name";s:7:"EndDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"End Date|The date this period of work modification ended";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"ActualDays";O:9:"viewfield":16:{s:4:"name";s:10:"ActualDays";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:236:"Actual Days|A calculated field based on the difference between the number of days of lost work or modified work and the number of days the injured or ill person would not have been scheduled to work irrespective of the injury or illness";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:23:"AuthorizingOrganization";O:9:"viewfield":16:{s:4:"name";s:23:"AuthorizingOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:91:"Authorizing Organization|The organization responsible for authorizing the work modification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:22:"DisabilitySlipAttached";O:9:"viewfield":16:{s:4:"name";s:22:"DisabilitySlipAttached";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Disability Attached?|Whether the disability slip authorizing the work modification is attached to the record";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"linm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:400:"SELECT 
    count(*) 
FROM `linm`
   
   LEFT OUTER JOIN `lin` AS lin1 
   ON (`linm`.LossInjuryID = `lin1`.LossInjuryID )
   LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin1`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'lin\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'44\')
WHERE linm._Deleted = 0
   AND `inv1`.PersonInvolvedID = \'/**RecordID**/\'
";s:7:"listSQL";s:1366:"SELECT 
   `linm`.WorkModificationID,
`lin1`.OrganizationID AS OrganizationID,
`cod1`.Description AS ModificationType,
`dat1`.RelatedDate AS StartDate,
`dat2`.RelatedDate AS EndDate,
IFNULL(DATEDIFF(`dat2`.RelatedDate, `dat1`.RelatedDate) + 1,0) - IFNULL(`linm`.DaysNotScheduled,0) AS ActualDays,
`org1`.Name AS AuthorizingOrganization,
`linm`.DisabilitySlipAttached
FROM `linm`

   LEFT OUTER JOIN `lin` AS lin1 
   ON (`linm`.LossInjuryID = `lin1`.LossInjuryID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`linm`.ModificationTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'196\')
   LEFT OUTER JOIN `dat` AS dat1 
    ON (`linm`.WorkModificationID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'linm\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'28\')
   LEFT OUTER JOIN `dat` AS dat2 
    ON (`linm`.WorkModificationID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'linm\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'36\')
   LEFT OUTER JOIN `org` AS org1 
   ON (`linm`.AuthorizingOrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `inv` AS inv1 
    ON (`lin1`.LossInjuryID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'lin\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'44\')
WHERE linm._Deleted = 0
AND `inv1`.PersonInvolvedID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";N;s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:7:{s:18:"WorkModificationID";s:3:"int";s:16:"ModificationType";N;s:9:"StartDate";s:4:"date";s:7:"EndDate";s:4:"date";s:10:"ActualDays";N;s:23:"AuthorizingOrganization";N;s:22:"DisabilitySlipAttached";s:4:"bool";}s:4:"name";N;s:10:"fieldAlign";a:7:{s:18:"WorkModificationID";s:5:"right";s:16:"ModificationType";s:4:"left";s:9:"StartDate";s:6:"center";s:7:"EndDate";s:6:"center";s:10:"ActualDays";s:4:"left";s:23:"AuthorizingOrganization";s:4:"left";s:22:"DisabilitySlipAttached";s:6:"center";}}');
   $content .= $Grid3->render('view.php', $qsArgs);
   $Grid4 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"pplem";s:6:"phrase";s:18:"Emergency Contacts";s:6:"number";i:4;s:6:"Fields";a:8:{s:14:"EmergContactID";O:14:"invisiblefield":11:{s:4:"name";s:14:"EmergContactID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Contact ID|A unique number assigned to each emergency contact for each employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:8:"_ModDate";O:9:"viewfield":16:{s:4:"name";s:8:"_ModDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:11:"Modified On";s:8:"dataType";s:8:"datetime";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ContactLastName";O:9:"viewfield":16:{s:4:"name";s:15:"ContactLastName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"Last Name|Family name of the emergency contact";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"ContactFirstName";O:9:"viewfield":16:{s:4:"name";s:16:"ContactFirstName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:46:"First Name|Given name of the emergency contact";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Relationship";O:9:"viewfield":16:{s:4:"name";s:12:"Relationship";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Relationship|The relationship between the emergency contact and the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ContactPhone";O:9:"viewfield":16:{s:4:"name";s:12:"ContactPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:48:"Phone|Telephone number of the individual at home";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ContactAltPhone";O:9:"viewfield":16:{s:4:"name";s:15:"ContactAltPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Alternate Phone|Alternate telephone number where the person can also be reached";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ContactPriority";O:9:"viewfield":16:{s:4:"name";s:15:"ContactPriority";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Priority Level|A number that indicates the priority in which attempts to make contact are to be made";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplem";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:115:"SELECT 
    count(*) 
FROM `pplem`
   
WHERE pplem._Deleted = 0
   AND `pplem`.EmployeePersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:543:"SELECT 
   `pplem`.EmergContactID,
`ppl1`.OrganizationID AS OrganizationID,
`pplem`._ModDate,
`pplem`.ContactLastName,
`pplem`.ContactFirstName,
`cod1`.Description AS Relationship,
`pplem`.ContactPhone,
`pplem`.ContactAltPhone,
`pplem`.ContactPriority
FROM `pplem`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplem`.EmployeePersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`pplem`.RelationshipID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'270\')
WHERE pplem._Deleted = 0
AND `pplem`.EmployeePersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:16:"EmployeePersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:8:{s:14:"EmergContactID";s:3:"int";s:8:"_ModDate";s:8:"datetime";s:15:"ContactLastName";s:11:"varchar(50)";s:16:"ContactFirstName";s:11:"varchar(50)";s:12:"Relationship";N;s:12:"ContactPhone";s:11:"varchar(50)";s:15:"ContactAltPhone";s:11:"varchar(50)";s:15:"ContactPriority";s:3:"int";}s:4:"name";N;s:10:"fieldAlign";a:8:{s:14:"EmergContactID";s:5:"right";s:8:"_ModDate";s:6:"center";s:15:"ContactLastName";s:4:"left";s:16:"ContactFirstName";s:4:"left";s:12:"Relationship";s:4:"left";s:12:"ContactPhone";s:4:"left";s:15:"ContactAltPhone";s:4:"left";s:15:"ContactPriority";s:5:"right";}}');
   $content .= $Grid4->render('view.php', $qsArgs);
   $Grid5 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:4:"ppld";s:6:"phrase";s:10:"Dependents";s:6:"number";i:5;s:6:"Fields";a:7:{s:11:"DependentID";O:14:"invisiblefield":11:{s:4:"name";s:11:"DependentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Dependent ID|A unique number assigned to each employee\'s\' dependent";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:8:"LastName";O:9:"viewfield":16:{s:4:"name";s:8:"LastName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Last Name|Family name of the employee dependent";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"FirstName";O:9:"viewfield":16:{s:4:"name";s:9:"FirstName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"First Name|Given name of the employee dependent";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Relationship";O:9:"viewfield":16:{s:4:"name";s:12:"Relationship";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Relationship|The relationship of the dependent to the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"DepGender";O:9:"viewfield":16:{s:4:"name";s:9:"DepGender";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:52:"Dependent Gender|Gender of the employee\'s dependent\'";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"DepAge";O:9:"viewfield":16:{s:4:"name";s:6:"DepAge";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:115:"Dependent Age|Age of the employee\'s dependent which is automatically calculated using the birthdate and server date";s:8:"dataType";s:10:"varchar(5)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Employed";O:9:"viewfield":16:{s:4:"name";s:8:"Employed";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Employed|Whether this dependent is employed";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"ppld";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:112:"SELECT 
    count(*) 
FROM `ppld`
   
WHERE ppld._Deleted = 0
   AND `ppld`.EmployeePersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:605:"SELECT 
   `ppld`.DependentID,
`ppl1`.OrganizationID AS OrganizationID,
`ppld`.LastName,
`ppld`.FirstName,
`cod1`.Description AS Relationship,
`cod2`.Description AS DepGender,
`ppld`.DepAge,
`ppld`.Employed
FROM `ppld`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`ppld`.EmployeePersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`ppld`.RelationshipID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'78\')
   LEFT OUTER JOIN `cod` AS cod2 
   ON (`ppld`.DepGenderID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'133\')
WHERE ppld._Deleted = 0
AND `ppld`.EmployeePersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:16:"EmployeePersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:7:{s:11:"DependentID";s:3:"int";s:8:"LastName";s:11:"varchar(50)";s:9:"FirstName";s:11:"varchar(50)";s:12:"Relationship";N;s:9:"DepGender";N;s:6:"DepAge";s:10:"varchar(5)";s:8:"Employed";s:4:"bool";}s:4:"name";N;s:10:"fieldAlign";a:7:{s:11:"DependentID";s:5:"right";s:8:"LastName";s:4:"left";s:9:"FirstName";s:4:"left";s:12:"Relationship";s:4:"left";s:9:"DepGender";s:4:"left";s:6:"DepAge";s:4:"left";s:8:"Employed";s:6:"center";}}');
   $content .= $Grid5->render('view.php', $qsArgs);
   $Grid6 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"pplek";s:6:"phrase";s:18:"KSAs By Experience";s:6:"number";i:6;s:6:"Fields";a:5:{s:13:"EmployeeKSAID";O:14:"invisiblefield":11:{s:4:"name";s:13:"EmployeeKSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Qualification ID|A unique number used to associate and track employee qualifications";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:3:"KSA";O:9:"viewfield":16:{s:4:"name";s:3:"KSA";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"KSA|A combined field used to describe this KSA when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"KSADesc";O:9:"viewfield":16:{s:4:"name";s:7:"KSADesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"KSA Description|A brief phrase used to describe the knowldege, skill, and or ability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"KSALevel";O:9:"viewfield":16:{s:4:"name";s:8:"KSALevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:93:"KSA Level|A term or phrase used to distinguish levels of KSA achievement and/or qualification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"KSALevelDesc";O:9:"viewfield":16:{s:4:"name";s:12:"KSALevelDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"KSA Level Description|A brief but detailed description of knowldege, skill, and/or ability level";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `pplek`
   
WHERE pplek._Deleted = 0
   AND `pplek`.PersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:685:"SELECT 
   `pplek`.EmployeeKSAID,
`ppl1`.OrganizationID AS OrganizationID,
NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,
`ksa1`.KSADesc AS KSADesc,
`cod1`.Description AS KSALevel,
`ksal1`.KSALevelDesc AS KSALevelDesc
FROM `pplek`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplek`.PersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID )
   LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal1`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\')
WHERE pplek._Deleted = 0
AND `pplek`.PersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:5:{s:13:"EmployeeKSAID";s:3:"int";s:3:"KSA";N;s:7:"KSADesc";N;s:8:"KSALevel";N;s:12:"KSALevelDesc";N;}s:4:"name";N;s:10:"fieldAlign";a:5:{s:13:"EmployeeKSAID";s:5:"right";s:3:"KSA";s:7:"justify";s:7:"KSADesc";s:7:"justify";s:8:"KSALevel";s:4:"left";s:12:"KSALevelDesc";s:7:"justify";}}');
   $content .= $Grid6->render('view.php', $qsArgs);
   $Grid7 = unserialize('O:8:"viewgrid":21:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:8:"pple_ksa";s:6:"phrase";s:28:"Knowledge, Skills, Abilities";s:6:"number";i:7;s:6:"Fields";a:5:{s:8:"PersonID";O:14:"invisiblefield":11:{s:4:"name";s:8:"PersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"pple_ksa";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:3:"KSA";O:9:"viewfield":16:{s:4:"name";s:3:"KSA";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"pple_ksa";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"pple_ksa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Level";O:9:"viewfield":16:{s:4:"name";s:5:"Level";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"pple_ksa";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"pple_ksa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:14:"Days Remaining";s:8:"dataType";s:8:"pple_ksa";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"pple_ksa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:4:"Type";O:9:"viewfield":16:{s:4:"name";s:4:"Type";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:8:"pple_ksa";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"pple_ksa";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:6301:"SELECT COUNT(*) FROM ( SELECT `inv1`.PersonInvolvedID AS PersonID,`trak`.KSAID AS KSAID,NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,`trak`.LevelID AS LevelID,NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa2`.KSATitle,\'\'),\' (\',IFNULL(`ksa2`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod1`.Description,\'\')),\' - \') AS Level,CASE WHEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) > 0 THEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) ELSE 0 END AS DaysRemaining,\'Training\' AS Type FROM `trak` inner JOIN `tracl` AS `tracl` ON (`trak`.CourseID = `tracl`.CourseID) LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`trak`.KSAID = `ksa1`.KSAID ) LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`trak`.LevelID = `ksal1`.LevelID ) inner JOIN `traas` AS `traas` ON (`tracl`.TrainingClassID = `traas`.TrainingClassID) LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal1`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\') LEFT OUTER JOIN `ksa` AS ksa2 
   ON (`ksal1`.KSAID = `ksa2`.KSAID ) LEFT OUTER JOIN `inv` AS inv1 
    ON (`traas`.AttendeeSchedID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'traas\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'57\') LEFT OUTER JOIN `tracl` AS tracl1 
   ON (`traas`.TrainingClassID = `tracl1`.TrainingClassID ) LEFT OUTER JOIN `tra` AS tra1 
   ON (`tracl1`.CourseID = `tra1`.CourseID ) WHERE `trak`._Deleted = 0  AND CASE WHEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) > 0 THEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) ELSE 0 END > \'0\' UNION SELECT `pplek`.PersonID AS PersonID,`pplek`.KSAID AS KSAID,NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,`pplek`.LevelID AS LevelID,NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa2`.KSATitle,\'\'),\' (\',IFNULL(`ksa2`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod2`.Description,\'\')),\' - \') AS Level,\'n/a\' AS DaysRemaining,\'Experience\' AS Type FROM `pplek`  LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID ) LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID ) LEFT OUTER JOIN `cod` AS cod2 
   ON (`ksal1`.KSALevelID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'267\') LEFT OUTER JOIN `ksa` AS ksa2 
   ON (`ksal1`.KSAID = `ksa2`.KSAID ) WHERE `pplek`._Deleted = 0  ) AS pple_ksa WHERE 1=1 ";s:7:"listSQL";s:6350:"SELECT PersonID, KSAID, KSA, LevelID, Level, DaysRemaining, Type FROM ( SELECT `inv1`.PersonInvolvedID AS PersonID,`trak`.KSAID AS KSAID,NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,`trak`.LevelID AS LevelID,NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa2`.KSATitle,\'\'),\' (\',IFNULL(`ksa2`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod1`.Description,\'\')),\' - \') AS Level,CASE WHEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) > 0 THEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) ELSE 0 END AS DaysRemaining,\'Training\' AS Type FROM `trak` inner JOIN `tracl` AS `tracl` ON (`trak`.CourseID = `tracl`.CourseID) LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`trak`.KSAID = `ksa1`.KSAID ) LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`trak`.LevelID = `ksal1`.LevelID ) inner JOIN `traas` AS `traas` ON (`tracl`.TrainingClassID = `traas`.TrainingClassID) LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal1`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\') LEFT OUTER JOIN `ksa` AS ksa2 
   ON (`ksal1`.KSAID = `ksa2`.KSAID ) LEFT OUTER JOIN `inv` AS inv1 
    ON (`traas`.AttendeeSchedID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = \'traas\'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = \'57\') LEFT OUTER JOIN `tracl` AS tracl1 
   ON (`traas`.TrainingClassID = `tracl1`.TrainingClassID ) LEFT OUTER JOIN `tra` AS tra1 
   ON (`tracl1`.CourseID = `tra1`.CourseID ) WHERE `trak`._Deleted = 0  AND CASE WHEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) > 0 THEN DATEDIFF(CASE `tra1`.ValidityUnitID 
                WHEN 48 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity SECOND)
                WHEN 5 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity HOUR)
                WHEN 53 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity DAY)
                WHEN 54 THEN 
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (7 * `tra1`.Validity) DAY)
                WHEN 55 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity MONTH)
                WHEN 56 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL (3 * `tra1`.Validity) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`tracl1`.ClassStartTime, INTERVAL `tra1`.Validity YEAR)
                ELSE
                    NULL
                END, NOW()) ELSE 0 END > \'0\' UNION SELECT `pplek`.PersonID AS PersonID,`pplek`.KSAID AS KSAID,NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,`pplek`.LevelID AS LevelID,NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa2`.KSATitle,\'\'),\' (\',IFNULL(`ksa2`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod2`.Description,\'\')),\' - \') AS Level,\'n/a\' AS DaysRemaining,\'Experience\' AS Type FROM `pplek`  LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID ) LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID ) LEFT OUTER JOIN `cod` AS cod2 
   ON (`ksal1`.KSALevelID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'267\') LEFT OUTER JOIN `ksa` AS ksa2 
   ON (`ksal1`.KSAID = `ksa2`.KSAID ) WHERE `pplek`._Deleted = 0  ) AS pple_ksa WHERE 1=1 ";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:5:{s:8:"PersonID";s:8:"pple_ksa";s:3:"KSA";s:8:"pple_ksa";s:5:"Level";s:8:"pple_ksa";s:13:"DaysRemaining";s:8:"pple_ksa";s:4:"Type";s:8:"pple_ksa";}s:4:"name";N;s:10:"isDataView";b:1;s:10:"fieldAlign";a:5:{s:8:"PersonID";s:4:"left";s:3:"KSA";s:4:"left";s:5:"Level";s:4:"left";s:13:"DaysRemaining";s:4:"left";s:4:"Type";s:4:"left";}}');
   $content .= $Grid7->render('view.php', $qsArgs);
   $Grid8 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"pplep";s:6:"phrase";s:16:"Prior Employment";s:6:"number";i:8;s:6:"Fields";a:4:{s:15:"PriorEmployerID";O:14:"invisiblefield":11:{s:4:"name";s:15:"PriorEmployerID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Record ID|A unique number used to associate and track prior employers";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplep";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"EmployerName";O:9:"viewfield":16:{s:4:"name";s:12:"EmployerName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Prior Employer|The name of the organization providing prior employment";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplep";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"JobTitle";O:9:"viewfield":16:{s:4:"name";s:8:"JobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Job Title|The job title of the person while working for the prior employer";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplep";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"YearsofService";O:9:"viewfield":16:{s:4:"name";s:14:"YearsofService";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:77:"Years of Service|The number of years the person worked for the prior employer";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplep";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `pplep`
   
WHERE pplep._Deleted = 0
   AND `pplep`.PersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:298:"SELECT 
   `pplep`.PriorEmployerID,
`ppl1`.OrganizationID AS OrganizationID,
`pplep`.EmployerName,
`pplep`.JobTitle,
`pplep`.YearsofService
FROM `pplep`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplep`.PersonID = `ppl1`.PersonID )
WHERE pplep._Deleted = 0
AND `pplep`.PersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:4:{s:15:"PriorEmployerID";s:3:"int";s:12:"EmployerName";s:12:"varchar(128)";s:8:"JobTitle";s:12:"varchar(128)";s:14:"YearsofService";s:5:"float";}s:4:"name";N;s:10:"fieldAlign";a:4:{s:15:"PriorEmployerID";s:5:"right";s:12:"EmployerName";s:4:"left";s:8:"JobTitle";s:4:"left";s:14:"YearsofService";s:5:"right";}}');
   $content .= $Grid8->render('view.php', $qsArgs);
   $Grid9 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:5:"ppleq";s:6:"phrase";s:14:"Qualifications";s:6:"number";i:9;s:6:"Fields";a:7:{s:15:"QualificationID";O:14:"invisiblefield":11:{s:4:"name";s:15:"QualificationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Qualification ID|A unique number used to associate and track employee qualifications";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:13:"LearningLevel";O:9:"viewfield":16:{s:4:"name";s:13:"LearningLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Learning Level|The level of education or experience associated with the respective institution or organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"DegreeEarned";O:9:"viewfield":16:{s:4:"name";s:12:"DegreeEarned";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Degree Earned|The degree of certificate earned from the institution or organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"CredentialName";O:9:"viewfield":16:{s:4:"name";s:14:"CredentialName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:104:"Credential|The specific title of the degree or credential earned as a result of this learning experience";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"YearsAttended";O:9:"viewfield":16:{s:4:"name";s:13:"YearsAttended";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Years Attended|The number of years the person attended the institution or was associated with the organization";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"SpecialSkills";O:9:"viewfield":16:{s:4:"name";s:13:"SpecialSkills";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Special Skills|Any special skills or experience acquired during this person\'s association with the institution or organization";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"QualificationStatus";O:9:"viewfield":16:{s:4:"name";s:19:"QualificationStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:27:"Status|Qualification status";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"ppleq";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `ppleq`
   
WHERE ppleq._Deleted = 0
   AND `ppleq`.PersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:779:"SELECT 
   `ppleq`.QualificationID,
`ppl1`.OrganizationID AS OrganizationID,
`cod1`.Description AS LearningLevel,
`cod2`.Description AS DegreeEarned,
`ppleq`.CredentialName,
`ppleq`.YearsAttended,
`ppleq`.SpecialSkills,
`cod3`.Description AS QualificationStatus
FROM `ppleq`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`ppleq`.PersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`ppleq`.LearningLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'179\')
   LEFT OUTER JOIN `cod` AS cod2 
   ON (`ppleq`.DegreeEarnedID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'132\')
   LEFT OUTER JOIN `cod` AS cod3 
   ON (`ppleq`.QualificationStatusID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = \'217\')
WHERE ppleq._Deleted = 0
AND `ppleq`.PersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:7:{s:15:"QualificationID";s:3:"int";s:13:"LearningLevel";N;s:12:"DegreeEarned";N;s:14:"CredentialName";s:12:"varchar(128)";s:13:"YearsAttended";s:5:"float";s:13:"SpecialSkills";s:12:"varchar(128)";s:19:"QualificationStatus";N;}s:4:"name";N;s:10:"fieldAlign";a:7:{s:15:"QualificationID";s:5:"right";s:13:"LearningLevel";s:4:"left";s:12:"DegreeEarned";s:4:"left";s:14:"CredentialName";s:4:"left";s:13:"YearsAttended";s:5:"right";s:13:"SpecialSkills";s:4:"left";s:19:"QualificationStatus";s:4:"left";}}');
   $content .= $Grid9->render('view.php', $qsArgs);
   $Grid10 = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:0:{}s:6:"isInfo";b:0;s:10:"isGuidance";b:0;s:10:"isVertical";b:0;s:15:"verticalFormats";a:0:{}s:8:"moduleID";s:3:"agr";s:6:"phrase";s:10:"Agreements";s:6:"number";i:10;s:6:"Fields";a:5:{s:11:"AgreementID";O:14:"invisiblefield":11:{s:4:"name";s:11:"AgreementID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:142:"Record ID|An automatically assigned number used to associate agreements and contracts with related organizations, people, property, and events";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"agr";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:9:"AgmtTitle";O:9:"viewfield":16:{s:4:"name";s:9:"AgmtTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Agreement Title|A brief phrase used to describe the title of this contract or agreement";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"agr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"AgreementDate";O:9:"viewfield":16:{s:4:"name";s:13:"AgreementDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:83:"Effective Date|Date the agreement or contract was entered into and became effective";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"agr";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationDate";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:54:"Expiration Date|Date the agreement or contract expires";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"agr";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"AgmtStatus";O:9:"viewfield":16:{s:4:"name";s:10:"AgmtStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Status|Current status of the agreement or contract";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"agr";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:143:"SELECT 
    count(*) 
FROM `agr`
   
WHERE agr._Deleted = 0
   AND `agr`.RelatedModuleID = \'pple\'
AND `agr`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:793:"SELECT 
   `agr`.AgreementID,
`agr`.OrganizationID,
`agr`.AgmtTitle,
`dat1`.RelatedDate AS AgreementDate,
`dat2`.RelatedDate AS ExpirationDate,
`cod1`.Description AS AgmtStatus
FROM `agr`

   LEFT OUTER JOIN `dat` AS dat1 
    ON (`agr`.AgreementID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = \'agr\'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = \'17\')
   LEFT OUTER JOIN `dat` AS dat2 
    ON (`agr`.AgreementID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = \'agr\'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = \'10\')
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`agr`.AgmtStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'86\')
WHERE agr._Deleted = 0
AND `agr`.RelatedModuleID = \'pple\'
AND `agr`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:5:{s:11:"AgreementID";s:3:"int";s:9:"AgmtTitle";s:12:"varchar(128)";s:13:"AgreementDate";s:4:"date";s:14:"ExpirationDate";s:4:"date";s:10:"AgmtStatus";N;}s:4:"name";N;s:10:"fieldAlign";a:5:{s:11:"AgreementID";s:5:"right";s:9:"AgmtTitle";s:4:"left";s:13:"AgreementDate";s:6:"center";s:14:"ExpirationDate";s:6:"center";s:10:"AgmtStatus";s:4:"left";}}');
   $content .= $Grid10->render('view.php', $qsArgs);


//View Screen Sections here
/**VIEWSCREENSECTIONS**/
?>
