<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:12:{s:8:"PersonID";O:9:"viewfield":16:{s:4:"name";s:8:"PersonID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Person ID|Automatically assigned number used to track the contact information for people";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Organization|The organization the employee reports to";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"LastName";O:9:"viewfield":16:{s:4:"name";s:8:"LastName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:38:"Last Name|Family Name of an individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"FirstName";O:9:"viewfield":16:{s:4:"name";s:9:"FirstName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:38:"First Name|Given Name of an individual";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"DisplayName";O:9:"viewfield":16:{s:4:"name";s:11:"DisplayName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Display Name|Commonly used name of an individual used to display throughout this application";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"EmployeeNo";O:9:"viewfield":16:{s:4:"name";s:10:"EmployeeNo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Employee Number|A uniques number assigned by the organization to each employee for tracking purposes";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"OrgJobTitle";O:9:"viewfield":16:{s:4:"name";s:11:"OrgJobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:56:"Current Job Title|The job title occupied by the employee";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"WorkAddress";O:9:"viewfield":16:{s:4:"name";s:11:"WorkAddress";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Work Address|Physical street address where the person can be located at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"FullWorkPhone";O:9:"viewfield":16:{s:4:"name";s:13:"FullWorkPhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Work Phone|Telephone number of the individual at their place of work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"WorkFax";O:9:"viewfield":16:{s:4:"name";s:7:"WorkFax";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Work Fax|Facsimile telephone number of the individual at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"MobilePhone";O:9:"viewfield":16:{s:4:"name";s:11:"MobilePhone";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:43:"Mobile Phone Number|Mobile telephone number";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"WorkEmail";O:9:"viewfield":16:{s:4:"name";s:9:"WorkEmail";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Work Email|Email address used by the individual at work";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";s:9:"WorkEmail";s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Employment Record");

//field value array
$data = array(
        'PersonID' => '',
         'Organization' => '',
         'LastName' => '',
         'FirstName' => '',
         'DisplayName' => '',
         'EmployeeNo' => '',
         'OrgJobTitle' => '',
         'WorkAddress' => '',
         'FullWorkPhone' => '',
         'WorkFax' => '',
         'MobilePhone' => '',
         'WorkEmail' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":31:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1183:"SELECT 
   `pplek`.EmployeeKSAID,
   NULLIF(CONCAT(IFNULL(`ksasc1`.CapabilityTitle,\'\'),\' (\',IFNULL(`ksasc1`.CapabilityAbbr,\'\'),\')\'),\' ()\') AS Capability,
   `ksa1`.CapabilityID AS CapabilityID,
   NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,
   `pplek`.KSAID,
   `ksa1`.KSADesc AS KSADesc,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa2`.KSATitle,\'\'),\' (\',IFNULL(`ksa2`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod2`.Description,\'\')),\' - \') AS Level,
   `pplek`.LevelID,
   `ksal1`.KSALevelDesc AS KSALevelDesc,
   `ppl1`.OrganizationID AS OrganizationID
FROM `pplek`
   
     LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID )
     LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplek`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa1`.CapabilityID = `ksasc1`.CapabilityID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`ksal1`.KSALevelID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'267\')
     LEFT OUTER JOIN `ksa` AS ksa2 
   ON (`ksal1`.KSAID = `ksa2`.KSAID )
WHERE
   pplek.EmployeeKSAID=\'/**RowID**/\'";s:9:"getRowSQL";s:687:"SELECT 
   `pplek`.EmployeeKSAID,
   NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,
   `ksa1`.KSADesc AS KSADesc,
   `cod1`.Description AS KSALevel,
   `ksal1`.KSALevelDesc AS KSALevelDesc,
   `ppl1`.OrganizationID AS OrganizationID
FROM `pplek`
   
     LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID )
     LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplek`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal1`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\')
WHERE
   pplek.EmployeeKSAID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:6:{s:13:"EmployeeKSAID";O:14:"invisiblefield":11:{s:4:"name";s:13:"EmployeeKSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Qualification ID|A unique number used to associate and track employee qualifications";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"CapabilityID";O:10:"combofield":26:{s:4:"name";s:12:"CapabilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:109:"Capability|A combined field used to describe this strategic capability when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"ksasc";s:10:"foreignKey";s:12:"CapabilityID";s:12:"foreignField";s:10:"Capability";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:281:"SELECT 
`ksasc`.CapabilityID AS ID, NULLIF(CONCAT(IFNULL(`ksasc`.CapabilityTitle,\'\'),\' (\',IFNULL(`ksasc`.CapabilityAbbr,\'\'),\')\'),\' ()\') AS Name FROM `ksasc`
 
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc`.AreaID = `ksaae1`.AreaID )
WHERE ksasc._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:281:"SELECT 
`ksasc`.CapabilityID AS ID, NULLIF(CONCAT(IFNULL(`ksasc`.CapabilityTitle,\'\'),\' (\',IFNULL(`ksasc`.CapabilityAbbr,\'\'),\')\'),\' ()\') AS Name FROM `ksasc`
 
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc`.AreaID = `ksaae1`.AreaID )

WHERE `ksasc`.CapabilityID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:5:"KSAID";a:1:{s:4:"name";s:5:"KSAID";}}s:8:"moduleID";s:5:"pplek";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:31:"`ksaae1`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:5:"KSAID";O:10:"combofield":26:{s:4:"name";s:5:"KSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"KSA|A combined field used to describe this KSA when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"ksa";s:10:"foreignKey";s:5:"KSAID";s:12:"foreignField";s:3:"KSA";s:13:"listCondition";N;s:14:"listConditions";a:1:{s:21:"QualificationMethodID";O:13:"listcondition":3:{s:4:"name";s:21:"QualificationMethodID";s:4:"mode";s:2:"in";s:6:"values";a:2:{i:0;s:3:"\'1\'";i:1;s:3:"\'3\'";}}}s:3:"SQL";s:417:"SELECT 
`ksa`.KSAID AS ID, NULLIF(CONCAT(IFNULL(`ksa`.KSATitle,\'\'),\' (\',IFNULL(`ksa`.KSAAbbr,\'\'),\')\'),\' ()\') AS Name, `ksa`.CapabilityID AS ParentID FROM `ksa`
 
 LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa`.CapabilityID = `ksasc1`.CapabilityID )
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc1`.AreaID = `ksaae1`.AreaID )
WHERE ksa._Deleted = 0
 AND `ksa`.QualificationMethodID IN (\'1\',\'3\')
 ORDER BY Name, ID;";s:6:"getSQL";s:364:"SELECT 
`ksa`.KSAID AS ID, NULLIF(CONCAT(IFNULL(`ksa`.KSATitle,\'\'),\' (\',IFNULL(`ksa`.KSAAbbr,\'\'),\')\'),\' ()\') AS Name, `ksa`.CapabilityID AS ParentID FROM `ksa`
 
 LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa`.CapabilityID = `ksasc1`.CapabilityID )
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc1`.AreaID = `ksaae1`.AreaID )

WHERE `ksa`.KSAID = \'/*recordID*/\'";s:11:"parentField";s:12:"CapabilityID";s:21:"parentListModuleField";N;s:11:"childFields";a:2:{s:7:"LevelID";a:1:{s:4:"name";s:7:"LevelID";}s:7:"KSADesc";a:1:{s:4:"name";s:7:"KSADesc";}}s:8:"moduleID";s:5:"pplek";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:31:"`ksaae1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:7:"KSADesc";O:9:"viewfield":16:{s:4:"name";s:7:"KSADesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"KSA Description|A brief phrase used to describe the knowldege, skill, and or ability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:5:"KSAID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:7:"LevelID";O:10:"combofield":26:{s:4:"name";s:7:"LevelID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"KSA Level|A combined field used to describe this KSA level when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"ksal";s:10:"foreignKey";s:7:"LevelID";s:12:"foreignField";s:5:"Level";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:621:"SELECT 
`ksal`.LevelID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod1`.Description,\'\')),\' - \') AS Name, `ksal`.KSAID AS ParentID FROM `ksal`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\')
 LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`ksal`.KSAID = `ksa1`.KSAID )
 LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa1`.CapabilityID = `ksasc1`.CapabilityID )
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc1`.AreaID = `ksaae1`.AreaID )
WHERE ksal._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:616:"SELECT 
`ksal`.LevelID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\'),\'\'),\' - \',IFNULL(`cod1`.Description,\'\')),\' - \') AS Name, `ksal`.KSAID AS ParentID FROM `ksal`
 
 LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\')
 LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`ksal`.KSAID = `ksa1`.KSAID )
 LEFT OUTER JOIN `ksasc` AS ksasc1 
   ON (`ksa1`.CapabilityID = `ksasc1`.CapabilityID )
 LEFT OUTER JOIN `ksaae` AS ksaae1 
   ON (`ksasc1`.AreaID = `ksaae1`.AreaID )

WHERE `ksal`.LevelID = \'/*recordID*/\'";s:11:"parentField";s:5:"KSAID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:12:"KSALevelDesc";a:1:{s:4:"name";s:12:"KSALevelDesc";}}s:8:"moduleID";s:5:"pplek";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:31:"`ksaae1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:12:"KSALevelDesc";O:9:"viewfield":16:{s:4:"name";s:12:"KSALevelDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"KSA Level Description|A brief but detailed description of knowldege, skill, and/or ability level";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:7:"LevelID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:13:"EmployeeKSAID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"pplek";s:6:"phrase";s:18:"KSAs By Experience";s:6:"number";i:1;s:6:"Fields";a:5:{s:13:"EmployeeKSAID";O:14:"invisiblefield":11:{s:4:"name";s:13:"EmployeeKSAID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Qualification ID|A unique number used to associate and track employee qualifications";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:3:"KSA";O:9:"viewfield":16:{s:4:"name";s:3:"KSA";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"KSA|A combined field used to describe this KSA when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"KSADesc";O:9:"viewfield":16:{s:4:"name";s:7:"KSADesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"KSA Description|A brief phrase used to describe the knowldege, skill, and or ability";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"KSALevel";O:9:"viewfield":16:{s:4:"name";s:8:"KSALevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:93:"KSA Level|A term or phrase used to distinguish levels of KSA achievement and/or qualification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"KSALevelDesc";O:9:"viewfield":16:{s:4:"name";s:12:"KSALevelDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"KSA Level Description|A brief but detailed description of knowldege, skill, and/or ability level";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"pplek";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:107:"SELECT 
    count(*) 
FROM `pplek`
   
WHERE pplek._Deleted = 0
   AND `pplek`.PersonID = \'/**RecordID**/\'
";s:7:"listSQL";s:685:"SELECT 
   `pplek`.EmployeeKSAID,
`ppl1`.OrganizationID AS OrganizationID,
NULLIF(CONCAT(IFNULL(`ksa1`.KSATitle,\'\'),\' (\',IFNULL(`ksa1`.KSAAbbr,\'\'),\')\'),\' ()\') AS KSA,
`ksa1`.KSADesc AS KSADesc,
`cod1`.Description AS KSALevel,
`ksal1`.KSALevelDesc AS KSALevelDesc
FROM `pplek`

   LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pplek`.PersonID = `ppl1`.PersonID )
   LEFT OUTER JOIN `ksa` AS ksa1 
   ON (`pplek`.KSAID = `ksa1`.KSAID )
   LEFT OUTER JOIN `ksal` AS ksal1 
   ON (`pplek`.LevelID = `ksal1`.LevelID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`ksal1`.KSALevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'267\')
WHERE pplek._Deleted = 0
AND `pplek`.PersonID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:8:"PersonID";s:9:"parentKey";s:8:"PersonID";s:8:"PKFields";a:1:{i:0;s:13:"EmployeeKSAID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;}');


    /**guidanceGrid**/

    $PKField = 'PersonID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "DriverInfo";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    include_once(INCLUDE_PATH . '/ppleCustomizations.php');
$custom_employee_status = verifyEmployeeRecord();
loadPersonRecord('Form');


    $getSQL = "SELECT 
   `pple`.PersonID,
   `org1`.Name AS Organization,
   `ppl1`.LastName AS LastName,
   `ppl1`.FirstName AS FirstName,
   `ppl1`.DisplayName AS DisplayName,
   `pple`.EmployeeNo,
   NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,'')),'') AS OrgJobTitle,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkAddress1,''),'<br />',IFNULL(`ppl1`.WorkAddress2,''),'<br />',IFNULL(`ppl1`.WorkCity,''),', ',IFNULL(NULLIF(CONCAT(IFNULL(`sta3`.StateName,''),' (',IFNULL(`sta3`.StateAbbreviation,''),')'),' ()'),''),' ',IFNULL(`ppl1`.WorkPostalCode,''),'<br />',IFNULL(NULLIF(CONCAT(IFNULL(`ctr3`.CountryName,''),' (',IFNULL(`ctr3`.CountryAbbreviation,''),')'),' ()'),'')),'<br /><br />,  <br />') AS WorkAddress,
   NULLIF(CONCAT(IFNULL(`ppl1`.WorkPhone,''),', ext. ',IFNULL(`ppl1`.WorkExtension,'')),', ext. ') AS FullWorkPhone,
   `ppl1`.WorkFax AS WorkFax,
   `ppl1`.MobilePhone AS MobilePhone,
   `ppl1`.WorkEmail AS WorkEmail,
   NULLIF(CONCAT(IFNULL(`ppl1`.LastName,''),', ',IFNULL(`ppl1`.FirstName,''),' (',IFNULL(`ppl1`.DisplayName,''),') | ',IFNULL(`pple`.EmployeeNo,'')),',  () | ') AS RecordLabel,
   `ppl1`.OrganizationID AS OrganizationID
FROM `pple`
   
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`pple`.PersonID = `ppl1`.PersonID )
     LEFT OUTER JOIN `orgja` AS orgja1 
    ON (`pple`.PersonID = `orgja1`.RelatedRecordID 
     AND `orgja1`.RelatedModuleID = 'pple'
     AND `orgja1`._Deleted = 0)
     LEFT OUTER JOIN `org` AS org1 
   ON (`ppl1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cti` AS cti3 
   ON (`ppl1`.WorkCountyID = `cti3`.CountyID )
     LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`orgja1`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
     LEFT OUTER JOIN `sta` AS sta3 
   ON (`cti3`.StateID = `sta3`.StateID )
     LEFT OUTER JOIN `ctr` AS ctr3 
   ON (`sta3`.CountryID = `ctr3`.CountryID )
WHERE
   pple.PersonID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if(EMPLOYEE_STATUS_NO_RECORD !== $custom_employee_status){

        $existing = true;

        $pageTitle = gettext("Employment Record");
        $screenPhrase = gettext("KSA Experience|Associate knowledge, skills, and abilities, based on experience, with an employee");

        if(EMPLOYEE_STATUS_CURRENT === $custom_employee_status){


        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        }

    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Employment Records");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'PersonID' => gettext("Person ID|Automatically assigned number used to track the contact information for people"),
   'Organization' => gettext("Organization|The organization the employee reports to"),
   'LastName' => gettext("Last Name|Family Name of an individual"),
   'FirstName' => gettext("First Name|Given Name of an individual"),
   'DisplayName' => gettext("Display Name|Commonly used name of an individual used to display throughout this application"),
   'EmployeeNo' => gettext("Employee Number|A uniques number assigned by the organization to each employee for tracking purposes"),
   'OrgJobTitle' => gettext("Current Job Title|The job title occupied by the employee"),
   'WorkAddress' => gettext("Work Address|Physical street address where the person can be located at work"),
   'FullWorkPhone' => gettext("Work Phone|Telephone number of the individual at their place of work"),
   'WorkFax' => gettext("Work Fax|Facsimile telephone number of the individual at work"),
   'MobilePhone' => gettext("Mobile Phone Number|Mobile telephone number"),
   'WorkEmail' => gettext("Work Email|Email address used by the individual at work")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    $existing = true;


    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Employment Records"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("an Employment Record") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about an employment record") );
      $tempTabs['WorkContact'] = array( "edit.php?scr=WorkContact&$tabsQS", gettext("Work Contact|Edit the work address and contact information of an employee") );
      $tempTabs['Employment'] = array( "edit.php?scr=Employment&$tabsQS", gettext("Employment|Edit summary information about the employment details of an employee") );
      $tempTabs['JobHistory'] = array( "edit.php?scr=JobHistory&$tabsQS", gettext("Job History|Associate job title history with an employee") );
      $tempTabs['Availability'] = array( "edit.php?scr=Availability&$tabsQS", gettext("Availability|Associate availability modifications with an employee") );
      $tempTabs['PersonalData'] = array( "edit.php?scr=PersonalData&$tabsQS", gettext("Personal Data|Edit personal information for an employee") );
      $tempTabs['Dependents'] = array( "edit.php?scr=Dependents&$tabsQS", gettext("Dependents|Associate dependents with an employee") );
      $tempTabs['Emergency'] = array( "edit.php?scr=Emergency&$tabsQS", gettext("Emergency Contacts|Associate emergency contacts with an employee") );
      $tempTabs['Agreements'] = array( "edit.php?scr=Agreements&$tabsQS", gettext("Agreements|Associate business agreements and/or contracts with an employee") );
      $tempTabs['PriorWork'] = array( "edit.php?scr=PriorWork&$tabsQS", gettext("Prior Work|Associate prior employment with an employee") );
      $tempTabs['Qualifications'] = array( "edit.php?scr=Qualifications&$tabsQS", gettext("Qualifications|Associate qualifications with an employee") );
      $tempTabs['KSAExperience'] = array( "", gettext("KSA Experience|Associate knowledge, skills, and abilities, based on experience, with an employee") );
      $tempTabs['DriverInfo'] = array( "edit.php?scr=DriverInfo&$tabsQS", gettext("Driver's Information|Edit summary information about the driving qualifications of an employee") );
      $tempTabs['Citizenship'] = array( "edit.php?scr=Citizenship&$tabsQS", gettext("Citizenship|Edit summary information about the citizenship of an employee") );
      $tempTabs['BasicInfo'] = array( "edit.php?mdl=ppl&rid=$recordID", gettext("Contact Info|Contact info for this person") );
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['KSAExperience'] = array( "", gettext("New Employment Record") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>