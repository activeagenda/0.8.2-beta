<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:15:{s:15:"ManagedChangeID";O:9:"viewfield":16:{s:4:"name";s:15:"ManagedChangeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|A combined field used to describe this managed change when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"PolicyOrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:20:"PolicyOrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:16:"ChangeCategoryID";a:1:{s:4:"name";s:16:"ChangeCategoryID";}}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:16:"ChangeCategoryID";O:14:"codecombofield":27:{s:4:"name";s:16:"ChangeCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'48\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:337:"SELECT DISTINCT
`mocg`.ChangeCategoryID AS ID, `cod1`.Description AS Name, `mocg`.PolicyOrganizationID AS ParentID
FROM `mocg`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`mocg`.ChangeCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'48\')
WHERE `mocg`._Deleted = 0
AND `mocg`.ChangeCategoryID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:288:"SELECT DISTINCT
`mocg`.ChangeCategoryID AS ID, `cod1`.Description AS Name, `mocg`.PolicyOrganizationID AS ParentID
FROM `mocg`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`mocg`.ChangeCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'48\')
WHERE `mocg`.ChangeCategoryID = \'/*recordID*/\'";s:11:"parentField";s:20:"PolicyOrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:17:"ChangeGuidelineID";a:2:{s:4:"name";s:17:"ChangeGuidelineID";s:15:"listParentField";s:16:"ChangeCategoryID";}}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"48";}s:17:"ChangeGuidelineID";O:10:"combofield":26:{s:4:"name";s:17:"ChangeGuidelineID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:4:"mocg";s:10:"foreignKey";s:17:"ChangeGuidelineID";s:12:"foreignField";s:15:"ChangeGuideline";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:192:"SELECT 
`mocg`.ChangeGuidelineID AS ID, NULLIF(CONCAT(IFNULL(`mocg`.GuidelineTitle,\'\')),\'\') AS Name, `mocg`.ChangeCategoryID AS ParentID FROM `mocg`
WHERE mocg._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:197:"SELECT 
`mocg`.ChangeGuidelineID AS ID, NULLIF(CONCAT(IFNULL(`mocg`.GuidelineTitle,\'\')),\'\') AS Name, `mocg`.ChangeCategoryID AS ParentID FROM `mocg`

WHERE `mocg`.ChangeGuidelineID = \'/*recordID*/\'";s:11:"parentField";s:16:"ChangeCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:3:{s:9:"TypeScope";a:1:{s:4:"name";s:9:"TypeScope";}s:10:"TypeDegree";a:1:{s:4:"name";s:10:"TypeDegree";}s:23:"PolicyPersonAccountable";a:1:{s:4:"name";s:23:"PolicyPersonAccountable";}}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:35:"`mocg`.PolicyOrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:18:"ManagedChangeTitle";O:9:"editfield":14:{s:4:"name";s:18:"ManagedChangeTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:19:"PersonAccountableID";O:16:"personcombofield":29:{s:4:"name";s:19:"PersonAccountableID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"ppl";s:10:"foreignKey";s:8:"PersonID";s:12:"foreignField";s:11:"DisplayName";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:109:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`
WHERE ppl._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:105:"SELECT 
`ppl`.PersonID AS ID, `ppl`.DisplayName AS Name FROM `ppl`

WHERE `ppl`.PersonID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`ppl`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:8:"orgField";O:10:"combofield":26:{s:4:"name";s:23:"PersonAccountableID_org";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";N;s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"ppl";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:14:"conditionField";N;s:14:"conditionValue";N;}s:23:"PolicyPersonAccountable";O:9:"viewfield":16:{s:4:"name";s:23:"PolicyPersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:144:"Policy Person Accountable|The individual assigned primary accountability for providing oversight and support for the change management guideline";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:17:"ChangeGuidelineID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:9:"TypeScope";O:9:"viewfield":16:{s:4:"name";s:9:"TypeScope";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Scope Guidance|A detailed description of the scope of the change guideline";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:17:"ChangeGuidelineID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:5:"Scope";O:9:"memofield":15:{s:4:"name";s:5:"Scope";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:10:"TypeDegree";O:9:"viewfield":16:{s:4:"name";s:10:"TypeDegree";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Degree Guidance|A detailed description of the degree of the change guideline";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:17:"ChangeGuidelineID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:6:"Degree";O:9:"memofield":15:{s:4:"name";s:6:"Degree";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}s:9:"BeginDate";O:9:"datefield":15:{s:4:"name";s:9:"BeginDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:14:"CompletionDate";O:9:"datefield":15:{s:4:"name";s:14:"CompletionDate";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";s:4:"date";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:5:"align";s:5:"right";s:12:"defaultValue";N;s:14:"conditionField";N;s:14:"conditionValue";N;}s:21:"ManagedChangeStatusID";O:14:"codecombofield":27:{s:4:"name";s:21:"ManagedChangeStatusID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'66\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'66\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"moc";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"66";}}');

$hasEditableFields = true;


$singularRecordName = gettext("Managed Change");

//field value array
$data = array(
        'ManagedChangeID' => '',
         'PolicyOrganizationID' => '',
         'ChangeCategoryID' => '',
         'ChangeGuidelineID' => '',
         'ManagedChangeTitle' => '',
         'OrganizationID' => '',
         'PersonAccountableID' => '',
         'PolicyPersonAccountable' => '',
         'TypeScope' => '',
         'Scope' => '',
         'TypeDegree' => '',
         'Degree' => '',
         'BeginDate' => '',
         'CompletionDate' => '',
         'ManagedChangeStatusID' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();


    /**guidanceGrid**/

    $PKField = 'ManagedChangeID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Design";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `moc`.ManagedChangeID,
   `org1`.Name AS PolicyOrganization,
   `mocg1`.PolicyOrganizationID AS PolicyOrganizationID,
   `cod1`.Description AS ChangeCategory,
   `mocg1`.ChangeCategoryID AS ChangeCategoryID,
   NULLIF(CONCAT(IFNULL(`mocg1`.GuidelineTitle,'')),'') AS ChangeGuideline,
   `moc`.ChangeGuidelineID,
   `moc`.ManagedChangeTitle,
   `org2`.Name AS Organization,
   `moc`.OrganizationID,
   `ppl2`.DisplayName AS PersonAccountable,
   `acc2`.PersonAccountableID AS PersonAccountableID,
   `ppl1`.DisplayName AS PolicyPersonAccountable,
   `mocg1`.Scope AS TypeScope,
   `moc`.Scope,
   `mocg1`.Degree AS TypeDegree,
   `moc`.Degree,
   `dat1`.RelatedDate AS BeginDate,
   `dat2`.RelatedDate AS CompletionDate,
   `cod2`.Description AS ManagedChangeStatus,
   `moc`.ManagedChangeStatusID,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`mocg1`.GuidelineTitle,'')),''),''),' (',IFNULL(`moc`.ManagedChangeTitle,''),')'),' ()') AS RecordLabel
FROM `moc`
   
     LEFT OUTER JOIN `mocg` AS mocg1 
   ON (`moc`.ChangeGuidelineID = `mocg1`.ChangeGuidelineID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`moc`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`moc`.ManagedChangeID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'moc'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '144')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`moc`.ManagedChangeID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'moc'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '28')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`moc`.ManagedChangeID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'moc'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '3')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`moc`.ManagedChangeStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '66')
     LEFT OUTER JOIN `org` AS org1 
   ON (`mocg1`.PolicyOrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`mocg1`.ChangeCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '48')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`mocg1`.ChangeGuidelineID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'mocg'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '143')
     LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc2`.PersonAccountableID = `ppl2`.PersonID )
WHERE
   moc.ManagedChangeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Managed Change");
        $screenPhrase = gettext("Form|Edit summary information about the managed change");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Managed Changes");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ManagedChangeID' => gettext("Record ID|A combined field used to describe this managed change when associating it with other records"),
   'PolicyOrganizationID' => gettext("Policy Organization|The organization responsible for issuing the change management guideline"),
   'ChangeCategoryID' => gettext("Change Category|The category of change requiring management"),
   'ChangeGuidelineID' => gettext("Change Guideline|The change guideline used to guide this change"),
   'ManagedChangeTitle' => gettext("Change Title|A short, descriptive, title for the change to be managed"),
   'OrganizationID' => gettext("Organization|The organization affected by, and responsible for, the managed change"),
   'PersonAccountableID' => gettext("Person Accountable|The individual assigned primary accountability for providing oversight and support for the managed change"),
   'PolicyPersonAccountable' => gettext("Policy Person Accountable|The individual assigned primary accountability for providing oversight and support for the change management guideline"),
   'TypeScope' => gettext("Scope Guidance|A detailed description of the scope of the change guideline"),
   'Scope' => gettext("Scope|A detailed description of the scope of the change"),
   'TypeDegree' => gettext("Degree Guidance|A detailed description of the degree of the change guideline"),
   'Degree' => gettext("Degree|A detailed description of the degree of the change"),
   'BeginDate' => gettext("Begin Date|The date the managed change began"),
   'CompletionDate' => gettext("Completion Date|Date the managed change was completed"),
   'ManagedChangeStatusID' => gettext("Status|The present status of the managed change")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**DB_SAVE_BEGIN**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        $vMsg = Validate($data['ManagedChangeTitle'], ShortPhrase($phrases['ManagedChangeTitle']), 'notEmpty');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ManagedChangeTitle']->invalid = TRUE;
            }
$vMsg = Validate($data['OrganizationID'], ShortPhrase($phrases['OrganizationID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['OrganizationID']->invalid = TRUE;
            }
$vMsg = Validate($data['PersonAccountableID'], ShortPhrase($phrases['PersonAccountableID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['PersonAccountableID']->invalid = TRUE;
            }
$vMsg = Validate($data['Scope'], ShortPhrase($phrases['Scope']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Scope']->invalid = TRUE;
            }
$vMsg = Validate($data['Degree'], ShortPhrase($phrases['Degree']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['Degree']->invalid = TRUE;
            }
$vMsg = Validate($data['BeginDate'], ShortPhrase($phrases['BeginDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['BeginDate']->invalid = TRUE;
            }
$vMsg = Validate($data['CompletionDate'], ShortPhrase($phrases['CompletionDate']), 'noValidation');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['CompletionDate']->invalid = TRUE;
            }
$vMsg = Validate($data['ManagedChangeStatusID'], ShortPhrase($phrases['ManagedChangeStatusID']), 'RequireSelection');
            if($vMsg != ''){
                $vMsgs .= $vMsg;
                $fields['ManagedChangeStatusID']->invalid = TRUE;
            }



        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**DB_SAVE_END**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Managed Changes"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "view.php?$tabsQS&delete=1";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Managed Change") );
      $tempTabs['Form'] = array( "", gettext("Form|Edit summary information about the managed change") );
      $tempTabs['Design'] = array( "edit.php?scr=Design&$tabsQS", gettext("Design|Edit the design considerations for the managed change") );
      $tempTabs['Construction'] = array( "edit.php?scr=Construction&$tabsQS", gettext("Construction|Edit the construction considerations for the managed change") );
      $tempTabs['Operations'] = array( "edit.php?scr=Operations&$tabsQS", gettext("Operations|Edit the operational considerations for the managed change") );
      $tempTabs['Maintenance'] = array( "edit.php?scr=Maintenance&$tabsQS", gettext("Maintenance|Edit the maintenance considerations for the managed change") );
      $tempTabs['Decommission'] = array( "edit.php?scr=Decommission&$tabsQS", gettext("Decommission|Edit the decommissioning considerations for the managed change") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the managed change") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the managed change") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Exposures|Associate cost exposures with the managed change") );
      $tempTabs['Opportunities'] = array( "edit.php?scr=Opportunities&$tabsQS", gettext("Opportunities|Associate financial opportunities with the managed change") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the managed change") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the managed change") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the managed change") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the managed change") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the managed change") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the managed change") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the managed change") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the managed change") );
      $tempTabs['JobTitles'] = array( "edit.php?scr=JobTitles&$tabsQS", gettext("Jobs|Associate job titles with the managed change") );
      $tempTabs['JobAnalyses'] = array( "edit.php?scr=JobAnalyses&$tabsQS", gettext("Job Analyses|Associate job analyses with the managed change") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the managed change") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Form'] = array( "", gettext("New Change") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    $content .= "
<script type=\"text/javascript\">
Calendar.setup({
   inputField : \"BeginDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_BeginDate\"
});
Calendar.setup({
   inputField : \"CompletionDate\",
".$User->getCalFormat(false)."
   onUpdate    : indicateUnsavedDateChanges,
   button      : \"cal_CompletionDate\"
});
</script>\n";
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>