<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:14:{s:15:"ManagedChangeID";O:9:"viewfield":16:{s:4:"name";s:15:"ManagedChangeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Record ID|A combined field used to describe this managed change when associating it with other records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ChangeGuidelineID";O:14:"invisiblefield":11:{s:4:"name";s:17:"ChangeGuidelineID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Organization|The organization affected by, and responsible for, the managed change";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:124:"Person Accountable|The individual assigned primary accountability for providing oversight and support for the managed change";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ChangeCategory";O:9:"viewfield":16:{s:4:"name";s:14:"ChangeCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:59:"Change Category|The category of change requiring management";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"ChangeGuideline";O:9:"viewfield":16:{s:4:"name";s:15:"ChangeGuideline";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Change Guideline|The change guideline used to guide this change";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ManagedChangeTitle";O:9:"viewfield":16:{s:4:"name";s:18:"ManagedChangeTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:69:"Change Title|A short, descriptive, title for the change to be managed";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:5:"Scope";O:9:"viewfield":16:{s:4:"name";s:5:"Scope";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:55:"Scope|A detailed description of the scope of the change";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:6:"Degree";O:9:"viewfield":16:{s:4:"name";s:6:"Degree";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:57:"Degree|A detailed description of the degree of the change";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"BeginDate";O:9:"viewfield":16:{s:4:"name";s:9:"BeginDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:44:"Begin Date|The date the managed change began";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"CompletionDate";O:9:"viewfield":16:{s:4:"name";s:14:"CompletionDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:53:"Completion Date|Date the managed change was completed";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"TotalEstOpp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstOpp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"Estimated Opportunity|The total estimated financial opportunity associated with the managed change";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:11:"TotalEstExp";O:9:"viewfield":16:{s:4:"name";s:11:"TotalEstExp";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Estimated Exposure|The total estimated cost exposure associated with the managed change";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:19:"ManagedChangeStatus";O:9:"viewfield":16:{s:4:"name";s:19:"ManagedChangeStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Status|The present status of the managed change";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Managed Change");

//field value array
$data = array(
        'ManagedChangeID' => '',
         'ChangeGuidelineID' => '',
         'Organization' => '',
         'PersonAccountable' => '',
         'ChangeCategory' => '',
         'ChangeGuideline' => '',
         'ManagedChangeTitle' => '',
         'Scope' => '',
         'Degree' => '',
         'BeginDate' => '',
         'CompletionDate' => '',
         'TotalEstOpp' => '',
         'TotalEstExp' => '',
         'ManagedChangeStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:1216:"SELECT 
   `orgja`.JobTitleAssocID,
   `org1`.Name AS Organization,
   `orgjt1`.OrganizationID AS OrganizationID,
   `cod1`.Description AS Function,
   `orgjt1`.FunctionID AS FunctionID,
   NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,\'\')),\'\') AS OrgJobTitle,
   `orgja`.OrgJobTitleID,
   `cod2`.Description AS JobTitleCategory,
   NULLIF(CONCAT(IFNULL(`orgtt1`.JobTitleTypeTitle,\'\')),\'\') AS JobTitleType,
   `cod3`.Description AS LocalLevel,
   `orgjt1`.JobDescription AS JobDescription,
   `orgja`.MannerAffected
FROM `orgja`
   
     LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`orgja`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgjt1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgjt1`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'4\')
     LEFT OUTER JOIN `orgtt` AS orgtt1 
   ON (`orgjt1`.JobTitleTypeID = `orgtt1`.JobTitleTypeID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`orgjt1`.LocalLevelID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = \'22\')
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`orgtt1`.JobTitleCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'20\')
WHERE
   orgja.JobTitleAssocID=\'/**RowID**/\'";s:9:"getRowSQL";s:433:"SELECT 
   `org1`.Name AS Organization,
   NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,\'\')),\'\') AS OrgJobTitle,
   `orgja`.MannerAffected,
   `orgjt1`.OrganizationID AS OrganizationID
FROM `orgja`
   
     LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`orgja`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`orgjt1`.OrganizationID = `org1`.OrganizationID )
WHERE
   orgja.JobTitleAssocID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:9:{s:15:"JobTitleAssocID";O:14:"invisiblefield":11:{s:4:"name";s:15:"JobTitleAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Record ID|An automatically assigned number used to associate job titles with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Organization|The organization where this job title is utilized";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"FunctionID";a:1:{s:4:"name";s:10:"FunctionID";}}s:8:"moduleID";s:5:"orgja";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:10:"FunctionID";O:14:"codecombofield":27:{s:4:"name";s:10:"FunctionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:48:"Function|The functional purpose of the job title";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:16:"CodeTypeID = \'4\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:318:"SELECT DISTINCT
`orgjt`.FunctionID AS ID, `cod1`.Description AS Name, `orgjt`.OrganizationID AS ParentID
FROM `orgjt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgjt`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'4\')
WHERE `orgjt`._Deleted = 0
AND `orgjt`.FunctionID IS NOT NULL
 ORDER BY Name, ID, ParentID;";s:6:"getSQL";s:268:"SELECT DISTINCT
`orgjt`.FunctionID AS ID, `cod1`.Description AS Name, `orgjt`.OrganizationID AS ParentID
FROM `orgjt`

LEFT OUTER JOIN `cod` AS cod1 
   ON (`orgjt`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'4\')
WHERE `orgjt`.FunctionID = \'/*recordID*/\'";s:11:"parentField";s:14:"OrganizationID";s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:13:"OrgJobTitleID";a:2:{s:4:"name";s:13:"OrgJobTitleID";s:15:"listParentField";s:10:"FunctionID";}}s:8:"moduleID";s:5:"orgja";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:1:"4";}s:13:"OrgJobTitleID";O:10:"combofield":26:{s:4:"name";s:13:"OrgJobTitleID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:122:"Job Title|A description of the job title based on a combination of field values assigned from within the Job Titles module";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:5:"orgjt";s:10:"foreignKey";s:13:"OrgJobTitleID";s:12:"foreignField";s:11:"OrgJobTitle";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:185:"SELECT 
`orgjt`.OrgJobTitleID AS ID, NULLIF(CONCAT(IFNULL(`orgjt`.JobTitleName,\'\')),\'\') AS Name, `orgjt`.FunctionID AS ParentID FROM `orgjt`
WHERE orgjt._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:186:"SELECT 
`orgjt`.OrgJobTitleID AS ID, NULLIF(CONCAT(IFNULL(`orgjt`.JobTitleName,\'\')),\'\') AS Name, `orgjt`.FunctionID AS ParentID FROM `orgjt`

WHERE `orgjt`.OrgJobTitleID = \'/*recordID*/\'";s:11:"parentField";s:10:"FunctionID";s:21:"parentListModuleField";N;s:11:"childFields";a:4:{s:16:"JobTitleCategory";a:1:{s:4:"name";s:16:"JobTitleCategory";}s:12:"JobTitleType";a:1:{s:4:"name";s:12:"JobTitleType";}s:10:"LocalLevel";a:1:{s:4:"name";s:10:"LocalLevel";}s:14:"JobDescription";a:1:{s:4:"name";s:14:"JobDescription";}}s:8:"moduleID";s:5:"orgja";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:30:"`orgjt`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:16:"JobTitleCategory";O:9:"viewfield":16:{s:4:"name";s:16:"JobTitleCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:76:"Job Title Category|A broad categoy used to group job titles of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"OrgJobTitleID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"JobTitleType";O:9:"viewfield":16:{s:4:"name";s:12:"JobTitleType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Job Title Type|A combined field used to describe this job title type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"OrgJobTitleID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:10:"LocalLevel";O:9:"viewfield":16:{s:4:"name";s:10:"LocalLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:92:"Organization Level|The hierarchical level of the organization to which the job title belongs";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"OrgJobTitleID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"JobDescription";O:9:"viewfield":16:{s:4:"name";s:14:"JobDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Job Description|A brief description of the elements of the job to be performed by the person occupying this job title";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:13:"OrgJobTitleID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"MannerAffected";O:9:"memofield":15:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Manner Affected|A detailed description of the manner in which this job title is affected by the related record";s:8:"dataType";s:4:"text";s:8:"validate";s:0:"";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:15:"JobTitleAssocID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"orgja";s:6:"phrase";s:19:"Job Titles Affected";s:6:"number";i:1;s:6:"Fields";a:3:{s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Organization|The organization where this job title is utilized";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"OrgJobTitle";O:9:"viewfield":16:{s:4:"name";s:11:"OrgJobTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:122:"Job Title|A description of the job title based on a combination of field values assigned from within the Job Titles module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"MannerAffected";O:9:"viewfield":16:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:110:"Manner Affected|A detailed description of the manner in which this job title is affected by the related record";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"orgja";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:150:"SELECT 
    count(*) 
FROM `orgja`
   
WHERE orgja._Deleted = 0
   AND `orgja`.RelatedModuleID = \'moc\'
AND `orgja`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:507:"SELECT 
   `orgja`.JobTitleAssocID,
`orgjt1`.OrganizationID AS OrganizationID,
`org1`.Name AS Organization,
NULLIF(CONCAT(IFNULL(`orgjt1`.JobTitleName,\'\')),\'\') AS OrgJobTitle,
`orgja`.MannerAffected
FROM `orgja`

   LEFT OUTER JOIN `orgjt` AS orgjt1 
   ON (`orgja`.OrgJobTitleID = `orgjt1`.OrgJobTitleID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`orgjt1`.OrganizationID = `org1`.OrganizationID )
WHERE orgja._Deleted = 0
AND `orgja`.RelatedModuleID = \'moc\'
AND `orgja`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:15:"ManagedChangeID";s:8:"PKFields";a:1:{i:0;s:15:"JobTitleAssocID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"moc";}}');


    /**guidanceGrid**/

    $PKField = 'ManagedChangeID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "JobAnalyses";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `moc`.ManagedChangeID,
   `moc`.ChangeGuidelineID,
   `org2`.Name AS Organization,
   `ppl2`.DisplayName AS PersonAccountable,
   `cod1`.Description AS ChangeCategory,
   NULLIF(CONCAT(IFNULL(`mocg1`.GuidelineTitle,'')),'') AS ChangeGuideline,
   `moc`.ManagedChangeTitle,
   `moc`.Scope,
   `moc`.Degree,
   `dat1`.RelatedDate AS BeginDate,
   `dat2`.RelatedDate AS CompletionDate,
   `opt1`.TotalEstOpp AS TotalEstOpp,
   `cosex1`.TotalEstExp AS TotalEstExp,
   `cod2`.Description AS ManagedChangeStatus,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`mocg1`.GuidelineTitle,'')),''),''),' (',IFNULL(`moc`.ManagedChangeTitle,''),')'),' ()') AS RecordLabel,
   `moc`.OrganizationID
FROM `moc`
   
     LEFT OUTER JOIN `org` AS org2 
   ON (`moc`.OrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`moc`.ManagedChangeID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'moc'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '144')
     LEFT OUTER JOIN `mocg` AS mocg1 
   ON (`moc`.ChangeGuidelineID = `mocg1`.ChangeGuidelineID )
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`moc`.ManagedChangeID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'moc'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '28')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`moc`.ManagedChangeID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'moc'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '3')
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`opt`.Estimate, 2)) AS TotalEstOpp,
`opt`.RelatedRecordID FROM `opt` 
 WHERE `opt`._Deleted = 0 
 AND RelatedModuleID = 'moc' 
 AND 'moc' = `opt`.RelatedModuleID
GROUP BY `opt`.RelatedRecordID 
) AS opt1 
ON (`moc`.ManagedChangeID = opt1.RelatedRecordID) 
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`cosex`.Estimate, 2)) AS TotalEstExp,
`cosex`.RelatedRecordID FROM `cosex` 
 WHERE `cosex`._Deleted = 0 
 AND RelatedModuleID = 'moc' 
 AND 'moc' = `cosex`.RelatedModuleID
GROUP BY `cosex`.RelatedRecordID 
) AS cosex1 
ON (`moc`.ManagedChangeID = cosex1.RelatedRecordID) 
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`moc`.ManagedChangeStatusID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '66')
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc2`.PersonAccountableID = `ppl2`.PersonID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`mocg1`.ChangeCategoryID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '48')
WHERE
   moc.ManagedChangeID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Managed Change");
        $screenPhrase = gettext("Jobs|Associate job titles with the managed change");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Managed Changes");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ManagedChangeID' => gettext("Record ID|A combined field used to describe this managed change when associating it with other records"),
   'ChangeGuidelineID' => gettext("Change Guideline|The change guideline used to guide this change"),
   'Organization' => gettext("Organization|The organization affected by, and responsible for, the managed change"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for providing oversight and support for the managed change"),
   'ChangeCategory' => gettext("Change Category|The category of change requiring management"),
   'ChangeGuideline' => gettext("Change Guideline|The change guideline used to guide this change"),
   'ManagedChangeTitle' => gettext("Change Title|A short, descriptive, title for the change to be managed"),
   'Scope' => gettext("Scope|A detailed description of the scope of the change"),
   'Degree' => gettext("Degree|A detailed description of the degree of the change"),
   'BeginDate' => gettext("Begin Date|The date the managed change began"),
   'CompletionDate' => gettext("Completion Date|Date the managed change was completed"),
   'TotalEstOpp' => gettext("Estimated Opportunity|The total estimated financial opportunity associated with the managed change"),
   'TotalEstExp' => gettext("Estimated Exposure|The total estimated cost exposure associated with the managed change"),
   'ManagedChangeStatus' => gettext("Status|The present status of the managed change")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Managed Changes"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Managed Change") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the managed change") );
      $tempTabs['Design'] = array( "edit.php?scr=Design&$tabsQS", gettext("Design|Edit the design considerations for the managed change") );
      $tempTabs['Construction'] = array( "edit.php?scr=Construction&$tabsQS", gettext("Construction|Edit the construction considerations for the managed change") );
      $tempTabs['Operations'] = array( "edit.php?scr=Operations&$tabsQS", gettext("Operations|Edit the operational considerations for the managed change") );
      $tempTabs['Maintenance'] = array( "edit.php?scr=Maintenance&$tabsQS", gettext("Maintenance|Edit the maintenance considerations for the managed change") );
      $tempTabs['Decommission'] = array( "edit.php?scr=Decommission&$tabsQS", gettext("Decommission|Edit the decommissioning considerations for the managed change") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the managed change") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the managed change") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Exposures|Associate cost exposures with the managed change") );
      $tempTabs['Opportunities'] = array( "edit.php?scr=Opportunities&$tabsQS", gettext("Opportunities|Associate financial opportunities with the managed change") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the managed change") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the managed change") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the managed change") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the managed change") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the managed change") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the managed change") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the managed change") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the managed change") );
      $tempTabs['JobTitles'] = array( "", gettext("Jobs|Associate job titles with the managed change") );
      $tempTabs['JobAnalyses'] = array( "edit.php?scr=JobAnalyses&$tabsQS", gettext("Job Analyses|Associate job analyses with the managed change") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the managed change") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['JobTitles'] = array( "", gettext("New Change") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>