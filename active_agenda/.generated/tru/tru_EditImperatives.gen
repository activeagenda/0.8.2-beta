<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:22:{s:14:"TrustAccountID";O:9:"viewfield":16:{s:4:"name";s:14:"TrustAccountID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Record ID|An automatically assigned number used to track accounts used to trunce the risk management process";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Organization|The organization responsible for funding and managing the trust account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Person Accountable|The individual assigned primary accountability for the trust account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"AccountName";O:9:"viewfield":16:{s:4:"name";s:11:"AccountName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Account Name|A unique name or title used to identify the trust account";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"TrustAccountNumber";O:9:"viewfield":16:{s:4:"name";s:18:"TrustAccountNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Trust Account Number|A unique number used to identify the trust account";s:8:"dataType";s:11:"varchar(50)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"AccountDesc";O:9:"viewfield":16:{s:4:"name";s:11:"AccountDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Account Description|A detailed description of the trust account";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:13:"EffectiveDate";O:9:"viewfield":16:{s:4:"name";s:13:"EffectiveDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:58:"Effective Date|The date the trust account became effective";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"ExpirationDate";O:9:"viewfield":16:{s:4:"name";s:14:"ExpirationDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:50:"Expiration Date|The date the trust account expires";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"AccountOrganization";O:9:"viewfield":16:{s:4:"name";s:19:"AccountOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Budget Organization|The organization responsible for managing the budget account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"AccountCategory";O:9:"viewfield":16:{s:4:"name";s:15:"AccountCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Budget Category|A broad categoy used to group accounts of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"AccountType";O:9:"viewfield":16:{s:4:"name";s:11:"AccountType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:102:"Budget Type|A combined field used to describe this account type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"Account";O:9:"viewfield":16:{s:4:"name";s:7:"Account";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Budget Account|A combined field used to describe the budget account when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"BudgetNumber";O:9:"viewfield":16:{s:4:"name";s:12:"BudgetNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:85:"Number|A number used by internal accounting to track budgets and related expenditures";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"BudgetAccountDesc";O:9:"viewfield":16:{s:4:"name";s:17:"BudgetAccountDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:63:"Budget Description|A detailed description of the budget account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"BudgetedAmount";O:9:"viewfield":16:{s:4:"name";s:14:"BudgetedAmount";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:71:"Budget Amount|The total amount of money deposited to the budget account";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"TrustAmount";O:9:"viewfield":16:{s:4:"name";s:11:"TrustAmount";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:180:"Amount Per Participant|The amount of trust issued to each participant in the trust account. The trust amount is stated in the currency assigned to this installation of the software";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:27:"TotalDistributionsAvailable";O:9:"viewfield":16:{s:4:"name";s:27:"TotalDistributionsAvailable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Total Distributions Available|A calculated field representing the total number of distributions available";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:18:"DistributionNumber";O:9:"viewfield":16:{s:4:"name";s:18:"DistributionNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:89:"Distributions Made|A calculated field representing the total number of distributions made";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"Distributions";O:9:"viewfield":16:{s:4:"name";s:13:"Distributions";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:145:"Amount Distributed|A calculated field representing the total value of the trust account based on the number of distributions of the Trust Amount.";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:22:"DistributionsRemaining";O:9:"viewfield":16:{s:4:"name";s:22:"DistributionsRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Distributions Available|A calculated field representing the total number of distributions remaining";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:9:"Available";O:9:"viewfield":16:{s:4:"name";s:9:"Available";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:210:"Amount Available|A calculated field based on the subtraction of the total distributions from the total amount budgeted for the trust account. This amount represents the amount available for further distribution";s:8:"dataType";s:5:"money";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"AccountStatus";O:9:"viewfield":16:{s:4:"name";s:13:"AccountStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:42:"Status|Present status of the trust account";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Trust Account");

//field value array
$data = array(
        'TrustAccountID' => '',
         'Organization' => '',
         'PersonAccountable' => '',
         'AccountName' => '',
         'TrustAccountNumber' => '',
         'AccountDesc' => '',
         'EffectiveDate' => '',
         'ExpirationDate' => '',
         'AccountOrganization' => '',
         'AccountCategory' => '',
         'AccountType' => '',
         'Account' => '',
         'BudgetNumber' => '',
         'BudgetAccountDesc' => '',
         'BudgetedAmount' => '',
         'TrustAmount' => '',
         'TotalDistributionsAvailable' => '',
         'DistributionNumber' => '',
         'Distributions' => '',
         'DistributionsRemaining' => '',
         'Available' => '',
         'AccountStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:466:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskImperativeID,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:9:"getRowSQL";s:439:"SELECT 
   `rsk`.ImperativeID,
   `cod1`.Description AS RiskImperative,
   `rsk`.RiskDescription,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `rsk`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
WHERE
   rsk.ImperativeID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"RiskImperativeID";O:14:"coderadiofield":29:{s:4:"name";s:16:"RiskImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'234\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'234\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"rsk";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:11:"orientation";s:8:"vertical";s:14:"conditionField";N;s:14:"conditionValue";N;}s:15:"RiskDescription";O:9:"memofield":15:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:12:"ImperativeID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"rsk";s:6:"phrase";s:16:"Risk Imperatives";s:6:"number";i:1;s:6:"Fields";a:3:{s:12:"ImperativeID";O:14:"invisiblefield":11:{s:4:"name";s:12:"ImperativeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Record ID|An automatically assigned number used to track records within modules";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"RiskImperative";O:9:"viewfield":16:{s:4:"name";s:14:"RiskImperative";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Risk Imperative|The risk imperative which is associated with the related record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"RiskDescription";O:9:"viewfield":16:{s:4:"name";s:15:"RiskDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Description|A detailed description of the manner in which the risk imperative is impacted by the related record";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsk";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:142:"SELECT 
    count(*) 
FROM `rsk`
   
WHERE rsk._Deleted = 0
   AND `rsk`.RelatedModuleID = \'tru\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:487:"SELECT 
   `rsk`.ImperativeID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`cod1`.Description AS RiskImperative,
`rsk`.RiskDescription
FROM `rsk`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`rsk`.RelatedRecordID = rdc1.RecordID AND `rsk`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsk`.RiskImperativeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'234\')
WHERE rsk._Deleted = 0
AND `rsk`.RelatedModuleID = \'tru\'
AND `rsk`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:14:"TrustAccountID";s:8:"PKFields";a:1:{i:0;s:12:"ImperativeID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"tru";}}');


    /**guidanceGrid**/

    $PKField = 'TrustAccountID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Standards";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `tru`.TrustAccountID,
   `org1`.Name AS Organization,
   `ppl1`.DisplayName AS PersonAccountable,
   `tru`.AccountName,
   `tru`.TrustAccountNumber,
   `tru`.AccountDesc,
   `dat1`.RelatedDate AS EffectiveDate,
   `dat2`.RelatedDate AS ExpirationDate,
   `org2`.Name AS AccountOrganization,
   `cod2`.Description AS AccountCategory,
   NULLIF(CONCAT(IFNULL(`budat1`.AccountTypeTitle,'')),'') AS AccountType,
   NULLIF(CONCAT(IFNULL(`buda1`.AccountName,''),' | ',IFNULL(`buda1`.AccountNumber,'')),' | ') AS Account,
   `bud1`.BudgetNumber AS BudgetNumber,
   `buda1`.AccountDesc AS BudgetAccountDesc,
   `buda1`.AccountAmount AS BudgetedAmount,
   `tru`.TrustAmount,
   IFNULL(ROUND(`buda1`.AccountAmount, 2),0) / ROUND(`tru`.TrustAmount, 2) AS TotalDistributionsAvailable,
   IFNULL(ROUND(`trud1`.Distributions, 2),0) / ROUND(`tru`.TrustAmount, 2) AS DistributionNumber,
   `trud1`.Distributions AS Distributions,
   IFNULL(ROUND(IFNULL(ROUND(`buda1`.AccountAmount, 2),0) - IFNULL(ROUND(`trud1`.Distributions, 2),0), 2),0) / ROUND(`tru`.TrustAmount, 2) AS DistributionsRemaining,
   IFNULL(ROUND(`buda1`.AccountAmount, 2),0) - IFNULL(ROUND(`trud1`.Distributions, 2),0) AS Available,
   `cod1`.Description AS AccountStatus,
   NULLIF(CONCAT(IFNULL(`tru`.AccountName,''),' | ',IFNULL(`tru`.TrustAccountNumber,''),' | ',IFNULL(ROUND(`tru`.TrustAmount, 2),'')),' |  | ') AS RecordLabel,
   `tru`.OrganizationID
FROM `tru`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`tru`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`tru`.TrustAccountID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'tru'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '1')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`tru`.TrustAccountID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'tru'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '17')
     LEFT OUTER JOIN `dat` AS dat2 
    ON (`tru`.TrustAccountID = `dat2`.SourceRecordID 
     AND `dat2`.SourceModuleID = 'tru'
     AND `dat2`._Deleted = 0
     AND `dat2`.DateDescriptorID = '10')
     LEFT OUTER JOIN `buda` AS buda1 
   ON (`tru`.AccountID = `buda1`.AccountID )
     LEFT OUTER JOIN (SELECT 
SUM(ROUND(`tru1`.TrustAmount, 2)) AS Distributions,
`trud`.TrustAccountID FROM `trud` 

LEFT OUTER JOIN `tru` AS tru1 
   ON (`trud`.TrustAccountID = `tru1`.TrustAccountID )
 WHERE `trud`._Deleted = 0 
GROUP BY `trud`.TrustAccountID 
) AS trud1 
ON (`tru`.TrustAccountID = trud1.TrustAccountID) 
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tru`.AccountStatusID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '83')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `org` AS org2 
   ON (`buda1`.AccountOrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `budat` AS budat1 
   ON (`buda1`.AccountTypeID = `budat1`.AccountTypeID )
     LEFT OUTER JOIN `bud` AS bud1 
   ON (`buda1`.BudgetID = `bud1`.BudgetID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`budat1`.AccountCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '31')
WHERE
   tru.TrustAccountID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Trust Account");
        $screenPhrase = gettext("Imperatives|Associate risk imperatives with the trust account");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Trust Accounts");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'TrustAccountID' => gettext("Record ID|An automatically assigned number used to track accounts used to trunce the risk management process"),
   'Organization' => gettext("Organization|The organization responsible for funding and managing the trust account"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for the trust account"),
   'AccountName' => gettext("Account Name|A unique name or title used to identify the trust account"),
   'TrustAccountNumber' => gettext("Trust Account Number|A unique number used to identify the trust account"),
   'AccountDesc' => gettext("Account Description|A detailed description of the trust account"),
   'EffectiveDate' => gettext("Effective Date|The date the trust account became effective"),
   'ExpirationDate' => gettext("Expiration Date|The date the trust account expires"),
   'AccountOrganization' => gettext("Budget Organization|The organization responsible for managing the budget account"),
   'AccountCategory' => gettext("Budget Category|A broad categoy used to group accounts of similar types"),
   'AccountType' => gettext("Budget Type|A combined field used to describe this account type when associating it with other records"),
   'Account' => gettext("Budget Account|A combined field used to describe the budget account when associating it with other records"),
   'BudgetNumber' => gettext("Number|A number used by internal accounting to track budgets and related expenditures"),
   'BudgetAccountDesc' => gettext("Budget Description|A detailed description of the budget account"),
   'BudgetedAmount' => gettext("Budget Amount|The total amount of money deposited to the budget account"),
   'TrustAmount' => gettext("Amount Per Participant|The amount of trust issued to each participant in the trust account. The trust amount is stated in the currency assigned to this installation of the software"),
   'TotalDistributionsAvailable' => gettext("Total Distributions Available|A calculated field representing the total number of distributions available"),
   'DistributionNumber' => gettext("Distributions Made|A calculated field representing the total number of distributions made"),
   'Distributions' => gettext("Amount Distributed|A calculated field representing the total value of the trust account based on the number of distributions of the Trust Amount."),
   'DistributionsRemaining' => gettext("Distributions Available|A calculated field representing the total number of distributions remaining"),
   'Available' => gettext("Amount Available|A calculated field based on the subtraction of the total distributions from the total amount budgeted for the trust account. This amount represents the amount available for further distribution"),
   'AccountStatus' => gettext("Status|Present status of the trust account")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Trust Accounts"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Trust Account") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the trust account") );
      $tempTabs['Distributions'] = array( "edit.php?scr=Distributions&$tabsQS", gettext("Distributions|Associate trust distributions with the trust account") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the trust account") );
      $tempTabs['BusinessContinuity'] = array( "edit.php?scr=BusinessContinuity&$tabsQS", gettext("Continuity|Associate business continuity requirements with the trust account") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the trust account") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the trust account") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the trust account") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the trust account") );
      $tempTabs['Insurance'] = array( "edit.php?scr=Insurance&$tabsQS", gettext("Insurance|Associate insurance consequences with the trust account") );
      $tempTabs['Permits'] = array( "edit.php?scr=Permits&$tabsQS", gettext("Permits|Associate operating permits with the trust account") );
      $tempTabs['Publicity'] = array( "edit.php?scr=Publicity&$tabsQS", gettext("Publicity|Associate publicity with the trust account") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the trust account") );
      $tempTabs['Responsibilities'] = array( "edit.php?scr=Responsibilities&$tabsQS", gettext("Responsibilities|Associate responsibilities with the trust account") );
      $tempTabs['Classifications'] = array( "edit.php?scr=Classifications&$tabsQS", gettext("Classifications|Associate risk classifications with the trust account") );
      $tempTabs['Imperatives'] = array( "", gettext("Imperatives|Associate risk imperatives with the trust account") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the trust account") );
      $tempTabs['Suppliers'] = array( "edit.php?scr=Suppliers&$tabsQS", gettext("Suppliers|Associate suppliers with the trust account") );
      $tempTabs['Training'] = array( "edit.php?scr=Training&$tabsQS", gettext("Training|Associate training with the trust account") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the trust account") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the trust account") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("File Retention|Associate file retention methods with the trust account") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the trust account") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Imperatives'] = array( "", gettext("New Account") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>