<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:19:{s:15:"FileRetentionID";O:9:"viewfield":16:{s:4:"name";s:15:"FileRetentionID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:128:"Record ID|An automatically assigned number used to associate physical file retention methods and start dates with physical files";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"FileTypeID";O:14:"invisiblefield":11:{s:4:"name";s:10:"FileTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"SystemNumber";O:9:"viewfield":16:{s:4:"name";s:12:"SystemNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:262:"System Number|A unique number assigned to the phisical file based on a combination of fields from within the file retention module. The system number is comprised of the filing organization ID, the filing location ID, the file type ID and the record retention ID";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"PhysicalFileStartDate";O:9:"viewfield":16:{s:4:"name";s:21:"PhysicalFileStartDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"File Start Date|The date the physical file associated with the record was stated";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:7:"FileReq";O:9:"viewfield":16:{s:4:"name";s:7:"FileReq";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"File Requirement|A combined field used to describe this file requirement when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"FilingOrganization";O:9:"viewfield":16:{s:4:"name";s:18:"FilingOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:94:"Filing Organization|The name of the organization where the  where the physical file is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"File Location|Specific area within the facility where the physical file is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Original";O:9:"viewfield":16:{s:4:"name";s:8:"Original";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Original File|Whether the file is the original file consisting of original documentation";s:8:"dataType";s:4:"bool";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:23:"FilingPersonAccountable";O:9:"viewfield":16:{s:4:"name";s:23:"FilingPersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Person Accountable|The name of the person responsible for records retention and disposal";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:11:"FileSubject";O:9:"viewfield":16:{s:4:"name";s:11:"FileSubject";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:98:"File Subject|The name of the individual, when applicable, that is the subject of the physical file";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"FileName";O:9:"viewfield":16:{s:4:"name";s:8:"FileName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"File Name|A short title or phrase used to identify the physical file";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"FileNumber";O:9:"viewfield":16:{s:4:"name";s:10:"FileNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"File Number|A number manually assigned to a file for tracking purposes";s:8:"dataType";s:11:"varchar(20)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"FilingMethod";O:9:"viewfield":16:{s:4:"name";s:12:"FilingMethod";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:70:"Filing Method|The specific method utilized to retain the physical file";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"FilingMethodDesc";O:9:"viewfield":16:{s:4:"name";s:16:"FilingMethodDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:105:"Filing Method Description|A detailed description of the file retention method associated with this record";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"FilingDisposition";O:9:"viewfield":16:{s:4:"name";s:17:"FilingDisposition";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:95:"Disposition Method|The file disposition method following the expiration of the retention period";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:21:"FilingDispositionDesc";O:9:"viewfield":16:{s:4:"name";s:21:"FilingDispositionDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:141:"Disposition Method Description|A detailed description of the file disposition requirements associated with this module or type of information";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:27:"PhysicalFileDispositionDate";O:9:"viewfield":16:{s:4:"name";s:27:"PhysicalFileDispositionDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"File Disposition Date|The actual or projected disposal date of the physical file associated with the record";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:13:"DaysRemaining";O:9:"viewfield":16:{s:4:"name";s:13:"DaysRemaining";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:139:"Days Remaining|The total number of days remaining before the phyisical file should be disposed of in accordance with the disposition policy";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:18:"PhysicalFileStatus";O:9:"viewfield":16:{s:4:"name";s:18:"PhysicalFileStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"File Status|The current status of the physical file associated with the record";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Physical File");

//field value array
$data = array(
        'FileRetentionID' => '',
         'FileTypeID' => '',
         'SystemNumber' => '',
         'PhysicalFileStartDate' => '',
         'FileReq' => '',
         'FilingOrganization' => '',
         'Location' => '',
         'Original' => '',
         'FilingPersonAccountable' => '',
         'FileSubject' => '',
         'FileName' => '',
         'FileNumber' => '',
         'FilingMethod' => '',
         'FilingMethodDesc' => '',
         'FilingDisposition' => '',
         'FilingDispositionDesc' => '',
         'PhysicalFileDispositionDate' => '',
         'DaysRemaining' => '',
         'PhysicalFileStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[2] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:465:"SELECT 
   `rsp`.ResponsibilityID,
   `org1`.Name AS Organization,
   `rsp`.OrganizationID,
   `cod1`.Description AS OrgLevel,
   `rsp`.OrgLevelID,
   `rsp`.ResponsibilityTitle,
   `rsp`.OrgResponsibility
FROM `rsp`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`rsp`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsp`.OrgLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'22\')
WHERE
   rsp.ResponsibilityID=\'/**RowID**/\'";s:9:"getRowSQL";s:389:"SELECT 
   `org1`.Name AS Organization,
   `cod1`.Description AS OrgLevel,
   `rsp`.ResponsibilityTitle,
   `rsp`.OrganizationID
FROM `rsp`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`rsp`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsp`.OrgLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'22\')
WHERE
   rsp.ResponsibilityID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:5:{s:16:"ResponsibilityID";O:14:"invisiblefield":11:{s:4:"name";s:16:"ResponsibilityID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:126:"Record ID|An automatically assigned number used to track organizational level responsibilities associated with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:14:"OrganizationID";O:13:"orgcombofield":26:{s:4:"name";s:14:"OrganizationID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Organization|The organization where this level based responsibility is enforced";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"org";s:10:"foreignKey";s:14:"OrganizationID";s:12:"foreignField";s:4:"Name";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:108:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`
WHERE org._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:110:"SELECT 
`org`.OrganizationID AS ID, `org`.Name AS Name FROM `org`

WHERE `org`.OrganizationID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"rsp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`org`.OrganizationID IN (%s)";s:12:"defaultValue";s:12:"defaultorgID";s:15:"suppressItemAdd";b:0;}s:10:"OrgLevelID";O:14:"codecombofield":27:{s:4:"name";s:10:"OrgLevelID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Organization Level|The hierarchical level of the organization";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'22\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:141:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'22\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:3:"rsp";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:2:"22";}s:19:"ResponsibilityTitle";O:9:"editfield":14:{s:4:"name";s:19:"ResponsibilityTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Responsibility Title|A short phrase or title used to describe the organizational level responsibility";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:17:"OrgResponsibility";O:9:"memofield":15:{s:4:"name";s:17:"OrgResponsibility";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Responsibility|A detailed description of the specific responsibility of the organization level as it pertains to the related record";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:16:"ResponsibilityID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:3:"rsp";s:6:"phrase";s:22:"Level Responsibilities";s:6:"number";i:2;s:6:"Fields";a:3:{s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Organization|The organization where this level based responsibility is enforced";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"OrgLevel";O:9:"viewfield":16:{s:4:"name";s:8:"OrgLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Organization Level|The hierarchical level of the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"ResponsibilityTitle";O:9:"viewfield":16:{s:4:"name";s:19:"ResponsibilityTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:101:"Responsibility Title|A short phrase or title used to describe the organizational level responsibility";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:3:"rsp";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:144:"SELECT 
    count(*) 
FROM `rsp`
   
WHERE rsp._Deleted = 0
   AND `rsp`.RelatedModuleID = \'filph\'
AND `rsp`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:459:"SELECT 
   `rsp`.ResponsibilityID,
`rsp`.OrganizationID,
`org1`.Name AS Organization,
`cod1`.Description AS OrgLevel,
`rsp`.ResponsibilityTitle
FROM `rsp`

   LEFT OUTER JOIN `org` AS org1 
   ON (`rsp`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rsp`.OrgLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'22\')
WHERE rsp._Deleted = 0
AND `rsp`.RelatedModuleID = \'filph\'
AND `rsp`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:15:"FileRetentionID";s:8:"PKFields";a:1:{i:0;s:16:"ResponsibilityID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:5:"filph";}}');


    $guidanceGrid = unserialize('O:8:"viewgrid":20:{s:13:"orderByFields";a:1:{s:20:"GuidanceOrganization";N;}s:6:"isInfo";b:0;s:10:"isGuidance";b:1;s:10:"isVertical";b:1;s:15:"verticalFormats";a:3:{s:16:"OrganizationLogo";s:9:"LogoField";s:25:"ResponsibilityConsidTitle";s:10:"TitleField";s:31:"ResponsibilityConsidDescription";s:12:"FeatureField";}s:8:"moduleID";s:4:"rspc";s:6:"phrase";s:23:"Responsibility Guidance";s:6:"number";N;s:6:"Fields";a:7:{s:22:"ResponsibilityConsidID";O:14:"invisiblefield":11:{s:4:"name";s:22:"ResponsibilityConsidID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:111:"Record ID|An automatically assigned number used to associate responsibility considerations with related records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:16:"OrganizationLogo";O:9:"viewfield":16:{s:4:"name";s:16:"OrganizationLogo";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Organization Logo|Displays the logo of the guidance organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:25:"ResponsibilityConsidTitle";O:9:"viewfield":16:{s:4:"name";s:25:"ResponsibilityConsidTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:79:"Title|A short title or phrase used to describe the responsibility consideration";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:31:"ResponsibilityConsidDescription";O:9:"viewfield":16:{s:4:"name";s:31:"ResponsibilityConsidDescription";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:180:"Consideration|A detailed description of the responsibility consideration and the manner in which the activity associated with the related record may be impacted by responsibilities";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"OrgLevel";O:9:"viewfield":16:{s:4:"name";s:8:"OrgLevel";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Organization Level|The hierarchical level of the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:20:"GuidanceOrganization";O:9:"viewfield":16:{s:4:"name";s:20:"GuidanceOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:120:"Guidance Provided By|A combined field used to describe the guidance organization when associating it with guidance types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"GuidancePerson";O:9:"viewfield":16:{s:4:"name";s:14:"GuidancePerson";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:67:"Guidance Person|The individual providing guidance for consideration";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"rspc";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:487:"SELECT 
    count(*) 
FROM `rspc`
   
   LEFT OUTER JOIN `gui` AS gui1 
   ON (`rspc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
 INNER JOIN (SELECT `fil1`.FileTypeID AS FileTypeID
FROM `filph` AS `iparent`

   LEFT OUTER JOIN `fil` AS fil1 
   ON (`iparent`.FileReqID = `fil1`.FileReqID )
WHERE `iparent`.FileRetentionID = \'/**RecordID**/\' 
) AS `parent` ON ( 
 `parent`.FileTypeID = `gui1`.RelatedRecordID)

WHERE rspc._Deleted = 0
   AND `gui1`.RelatedModuleID = \'filt\'
";s:7:"listSQL";s:1516:"SELECT 
   `rspc`.ResponsibilityConsidID,
`rspc`.GuidanceOrganizationID,
NULLIF(CONCAT(\'<img src=\\"org/\',IFNULL(IFNULL(`org1`.GuidanceLogoName, \'transparent.gif\'),\'\'),\'\\" alt=\\"logo\\" />\'),\'<img src=\\\\\\"org/\\\\\\" alt=\\\\\\"logo\\\\\\" />\') AS OrganizationLogo,
`rspc`.ResponsibilityConsidTitle,
`rspc`.ResponsibilityConsidDescription,
`cod1`.Description AS OrgLevel,
NULLIF(CONCAT(IFNULL(`org2`.Name,\'\')),\'\') AS GuidanceOrganization,
`ppl1`.DisplayName AS GuidancePerson
FROM `rspc`

   LEFT OUTER JOIN `gui` AS gui1 
   ON (`rspc`.GuidanceOrganizationID = `gui1`.GuidanceOrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`rspc`.OrgLevelID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'22\')
   LEFT OUTER JOIN `org` AS org1 
   ON (`gui1`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `org` AS org2 
   ON (`gui1`.OrganizationID = `org2`.OrganizationID )
   LEFT OUTER JOIN `acc` AS acc1 
    ON (`gui1`.GuidanceOrganizationID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = \'gui\'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = \'184\')
   LEFT OUTER JOIN `ppl` AS ppl1 
ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
 INNER JOIN (SELECT `fil1`.FileTypeID AS FileTypeID
FROM `filph` AS `iparent`

   LEFT OUTER JOIN `fil` AS fil1 
   ON (`iparent`.FileReqID = `fil1`.FileReqID )
WHERE `iparent`.FileRetentionID = \'/**RecordID**/\' 
) AS `parent` ON ( 
 `parent`.FileTypeID = `gui1`.RelatedRecordID)

WHERE rspc._Deleted = 0
AND `gui1`.RelatedModuleID = \'filt\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";N;s:8:"PKFields";N;s:13:"formatOptions";a:2:{s:13:"suppressTitle";b:1;s:19:"suppressRecordIcons";b:1;}s:10:"fieldTypes";a:7:{s:22:"ResponsibilityConsidID";s:3:"int";s:16:"OrganizationLogo";N;s:25:"ResponsibilityConsidTitle";s:12:"varchar(128)";s:31:"ResponsibilityConsidDescription";s:4:"text";s:8:"OrgLevel";N;s:20:"GuidanceOrganization";N;s:14:"GuidancePerson";N;}s:4:"name";N;s:10:"fieldAlign";a:7:{s:22:"ResponsibilityConsidID";s:5:"right";s:16:"OrganizationLogo";s:7:"justify";s:25:"ResponsibilityConsidTitle";s:4:"left";s:31:"ResponsibilityConsidDescription";s:7:"justify";s:8:"OrgLevel";s:4:"left";s:20:"GuidanceOrganization";s:7:"justify";s:14:"GuidancePerson";s:4:"left";}}');


    $PKField = 'FileRetentionID';

    $ownerField = 'FilingOrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[2]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Accountability";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `filph`.FileRetentionID,
   `fil1`.FileTypeID AS FileTypeID,
   NULLIF(CONCAT(IFNULL(`filph`.FilingOrganizationID,''),IFNULL(`orgla1`.LocationID,''),IFNULL(`fil1`.FileTypeID,''),IFNULL(`filph`.FileRetentionID,'')),'') AS SystemNumber,
   `dat1`.RelatedDate AS PhysicalFileStartDate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`filt2`.FileTypeTitle,'')),''),'')),'') AS FileReq,
   `org2`.Name AS FilingOrganization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `filph`.Original,
   `ppl2`.DisplayName AS FilingPersonAccountable,
   `ppl3`.DisplayName AS FileSubject,
   `filph`.FileName,
   `filph`.FileNumber,
   `cod4`.Description AS FilingMethod,
   `filph`.FilingMethodDesc,
   `cod5`.Description AS FilingDisposition,
   `filph`.FilingDispositionDesc,
   CASE `fil1`.FileRetentionUnitsID 
                WHEN 48 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod SECOND)
                WHEN 5 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod HOUR)
                WHEN 53 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod DAY)
                WHEN 54 THEN 
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL (7 * `fil1`.FileRetentionPeriod) DAY)
                WHEN 55 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod MONTH)
                WHEN 56 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL (3 * `fil1`.FileRetentionPeriod) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod YEAR)
                ELSE
                    NULL
                END AS PhysicalFileDispositionDate,
   DATEDIFF(CASE `fil1`.FileRetentionUnitsID 
                WHEN 48 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod SECOND)
                WHEN 5 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod MINUTE)
                WHEN 19 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod HOUR)
                WHEN 53 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod DAY)
                WHEN 54 THEN 
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL (7 * `fil1`.FileRetentionPeriod) DAY)
                WHEN 55 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod MONTH)
                WHEN 56 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL (3 * `fil1`.FileRetentionPeriod) MONTH)
                WHEN 57 THEN
                    DATE_ADD(`dat1`.RelatedDate, INTERVAL `fil1`.FileRetentionPeriod YEAR)
                ELSE
                    NULL
                END, NOW()) AS DaysRemaining,
   `cod6`.Description AS PhysicalFileStatus,
   NULLIF(CONCAT(IFNULL(`org2`.Name,''),' | ',IFNULL(`filph`.FileName,''),' ',IFNULL(`ppl3`.DisplayName,'')),' |  ') AS RecordLabel,
   `filph`.FilingOrganizationID
FROM `filph`
   
     LEFT OUTER JOIN `fil` AS fil1 
   ON (`filph`.FileReqID = `fil1`.FileReqID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`filph`.FileRetentionID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'filph'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`filph`.FileRetentionID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'filph'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '28')
     LEFT OUTER JOIN `org` AS org2 
   ON (`filph`.FilingOrganizationID = `org2`.OrganizationID )
     LEFT OUTER JOIN `acc` AS acc2 
    ON (`filph`.FileRetentionID = `acc2`.SourceRecordID 
     AND `acc2`.SourceModuleID = 'filph'
     AND `acc2`._Deleted = 0
     AND `acc2`.AccountabilityDescriptorID = '107')
     LEFT OUTER JOIN `inv` AS inv1 
    ON (`filph`.FileRetentionID = `inv1`.SourceRecordID 
     AND `inv1`.SourceModuleID = 'filph'
     AND `inv1`._Deleted = 0
     AND `inv1`.InvolvementDescriptorID = '85')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`filph`.FilingMethodID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '63')
     LEFT OUTER JOIN `cod` AS cod5 
   ON (`filph`.FilingDispositionID = `cod5`.CodeID 
     AND `cod5`.CodeTypeID = '79')
     LEFT OUTER JOIN `cod` AS cod6 
   ON (`filph`.PhysicalFileStatusID = `cod6`.CodeID 
     AND `cod6`.CodeTypeID = '85')
     LEFT OUTER JOIN `filt` AS filt2 
   ON (`fil1`.FileTypeID = `filt2`.FileTypeID )
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl2 
   ON (`acc2`.PersonAccountableID = `ppl2`.PersonID )
     LEFT OUTER JOIN `ppl` AS ppl3 
   ON (`inv1`.PersonInvolvedID = `ppl3`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   filph.FileRetentionID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Physical File");
        $screenPhrase = gettext("Responsibilities|Associate responsibilities with the physical documentation file");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Physical Files");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'FileRetentionID' => gettext("Record ID|An automatically assigned number used to associate physical file retention methods and start dates with physical files"),
   'FileTypeID' => gettext("File Type|A combined field used to describe this file type when associating it with other files"),
   'SystemNumber' => gettext("System Number|A unique number assigned to the phisical file based on a combination of fields from within the file retention module. The system number is comprised of the filing organization ID, the filing location ID, the file type ID and the record retention ID"),
   'PhysicalFileStartDate' => gettext("File Start Date|The date the physical file associated with the record was stated"),
   'FileReq' => gettext("File Requirement|A combined field used to describe this file requirement when associating it with other records"),
   'FilingOrganization' => gettext("Filing Organization|The name of the organization where the  where the physical file is located"),
   'Location' => gettext("File Location|Specific area within the facility where the physical file is located"),
   'Original' => gettext("Original File|Whether the file is the original file consisting of original documentation"),
   'FilingPersonAccountable' => gettext("Person Accountable|The name of the person responsible for records retention and disposal"),
   'FileSubject' => gettext("File Subject|The name of the individual, when applicable, that is the subject of the physical file"),
   'FileName' => gettext("File Name|A short title or phrase used to identify the physical file"),
   'FileNumber' => gettext("File Number|A number manually assigned to a file for tracking purposes"),
   'FilingMethod' => gettext("Filing Method|The specific method utilized to retain the physical file"),
   'FilingMethodDesc' => gettext("Filing Method Description|A detailed description of the file retention method associated with this record"),
   'FilingDisposition' => gettext("Disposition Method|The file disposition method following the expiration of the retention period"),
   'FilingDispositionDesc' => gettext("Disposition Method Description|A detailed description of the file disposition requirements associated with this module or type of information"),
   'PhysicalFileDispositionDate' => gettext("File Disposition Date|The actual or projected disposal date of the physical file associated with the record"),
   'DaysRemaining' => gettext("Days Remaining|The total number of days remaining before the phyisical file should be disposed of in accordance with the disposition policy"),
   'PhysicalFileStatus' => gettext("File Status|The current status of the physical file associated with the record")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        /**-remove_begin-**/

        /**CUSTOM_CODE|save**/

        //validate submitted data:
        $vMsgs = "";
        


        if(0 != strlen($vMsgs)){
            //prepend a general error message
            $vMsgs = gettext("The record has not been saved, because:")."\n".$vMsgs;
            $vMsgs = nl2br($vMsgs);

            //return error messages
            $messages[] = array('e', $vMsgs);

        } else {
        
            /**CUSTOM_CODE|check_deleted_row_exists**/

            $dh = GetDataHandler($ModuleID);
            $recordID = $dh->saveRow($data, $recordID);
            
            //recreate $nextlink b/c of new record ID when inserting
            if(!$existing){
                $qsArgs['rid'] = $recordID; //pass both to tabs and other links
                $tabsQSargs = $qsArgs;
                unset($tabsQSargs['scr']);
                //$tabsQSargs['rid'] = $recordID;
                $tabsQS = MakeQS($tabsQSargs);
                $nextlink = "edit.php?$tabsQS&scr=$nextScreen";

                $existing = true;
            }
        }

        /**CUSTOM_CODE|save_end**/
        /**-remove_end-**/

        /**RE-GET_BEGIN**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**RE-GET_END**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Physical Files"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Physical File") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the physical file") );
      $tempTabs['Audits'] = array( "edit.php?scr=Audits&$tabsQS", gettext("Audits|Associate audits with the physical documentation file") );
      $tempTabs['BusinessContinuity'] = array( "edit.php?scr=BusinessContinuity&$tabsQS", gettext("Continuity|Associate business continuity requirements with the physical documentation file") );
      $tempTabs['Responsibilities'] = array( "", gettext("Responsibilities|Associate responsibilities with the physical documentation file") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the physical documentation file") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the physical documentation file") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the physical documentation file") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Responsibilities'] = array( "", gettext("New File") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>