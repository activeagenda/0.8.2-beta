<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:15:"ConfinedSpaceID";O:9:"viewfield":16:{s:4:"name";s:15:"ConfinedSpaceID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Record ID|An automatically assigned number used to track confined spaces throughout the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"ConfinedSpaceTypeID";O:14:"invisiblefield":11:{s:4:"name";s:19:"ConfinedSpaceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:17:"ConfinedSpaceType";O:9:"viewfield":16:{s:4:"name";s:17:"ConfinedSpaceType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Confined Space Type|A combined field used to describe this confined space type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ConfinedSpaceTitle";O:9:"viewfield":16:{s:4:"name";s:18:"ConfinedSpaceTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Title|A word or short phrase used to identify this specific confined space";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:22:"ConfinedSpaceDescGuide";O:9:"viewfield":16:{s:4:"name";s:22:"ConfinedSpaceDescGuide";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Guidance Description|A brief but thorough description of the confined space type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ConfinedSpaceDesc";O:9:"viewfield":16:{s:4:"name";s:17:"ConfinedSpaceDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Description|A detailed description of this confined space and any special characteristics associated with entry or egress";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Organization|The name of the organization where the confined space exists";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Location|Specific area within the facility where the confined space is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Person Accountable|The individual assigned primary accountability for managing the risks associated with this local confined space";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Last Review|The date of the last formal review of the confined space";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Confined Space");

//field value array
$data = array(
        'ConfinedSpaceID' => '',
         'ConfinedSpaceTypeID' => '',
         'ConfinedSpaceType' => '',
         'ConfinedSpaceTitle' => '',
         'ConfinedSpaceDescGuide' => '',
         'ConfinedSpaceDesc' => '',
         'Organization' => '',
         'Location' => '',
         'PersonAccountable' => '',
         'LastReviewDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:880:"SELECT 
   `hzea`.HZEControlProcedureAssocID,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`eqp1`.EquipmentName,\'\'),\' | \',IFNULL(`eqp1`.ModelNo,\'\')),\' |  | \') AS Equipment,
   `eqpin1`.EquipmentID AS EquipmentID,
   NULLIF(CONCAT(IFNULL(`hze1`.ControlProcTitle,\'\')),\'\') AS HazEnergyControl,
   `hzea`.HazEnergyControlID,
   `eqpin1`.OrganizationID AS OrganizationID
FROM `hzea`
   
     LEFT OUTER JOIN `hze` AS hze1 
   ON (`hzea`.HazEnergyControlID = `hze1`.HazEnergyControlID )
     LEFT OUTER JOIN `eqpin` AS eqpin1 
   ON (`hze1`.EquipmentInventoryID = `eqpin1`.EquipmentInventoryID )
     LEFT OUTER JOIN `eqp` AS eqp1 
   ON (`eqpin1`.EquipmentID = `eqp1`.EquipmentID )
     LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp1`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )
WHERE
   hzea.HZEControlProcedureAssocID=\'/**RowID**/\'";s:9:"getRowSQL";s:1190:"SELECT 
   `org1`.Name AS HZEEquipOrganization,
   `cod1`.Description AS HZEEquipmentType,
   `org2`.Name AS HZEManufacturer,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`eqp1`.EquipmentName,\'\'),\' | \',IFNULL(`eqp1`.ModelNo,\'\')),\' |  | \') AS Equipment,
   NULLIF(CONCAT(IFNULL(`hze1`.ControlProcTitle,\'\')),\'\') AS HazEnergyControl,
   `eqpin1`.OrganizationID AS OrganizationID
FROM `hzea`
   
     LEFT OUTER JOIN `hze` AS hze1 
   ON (`hzea`.HazEnergyControlID = `hze1`.HazEnergyControlID )
     LEFT OUTER JOIN `eqpin` AS eqpin1 
   ON (`hze1`.EquipmentInventoryID = `eqpin1`.EquipmentInventoryID )
     LEFT OUTER JOIN `eqp` AS eqp1 
   ON (`eqpin1`.EquipmentID = `eqp1`.EquipmentID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`eqp1`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`eqp1`.EquipmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'65\')
     LEFT OUTER JOIN `org` AS org2 
   ON (`eqp1`.ManufacturerID = `org2`.OrganizationID )
     LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp1`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )
WHERE
   hzea.HZEControlProcedureAssocID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:3:{s:26:"HZEControlProcedureAssocID";O:14:"invisiblefield":11:{s:4:"name";s:26:"HZEControlProcedureAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Association ID|An automatically assigned number used to track hazardous energy control procedure associations with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:11:"EquipmentID";O:10:"combofield":26:{s:4:"name";s:11:"EquipmentID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Equipment|A description of the equipment based on a combination of field values assigned from within the equipment module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"eqp";s:10:"foreignKey";s:11:"EquipmentID";s:12:"foreignField";s:9:"Equipment";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:348:"SELECT 
`eqp`.EquipmentID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`eqp`.EquipmentName,\'\'),\' | \',IFNULL(`eqp`.ModelNo,\'\')),\' |  | \') AS Name FROM `eqp`
 
 LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )
WHERE eqp._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:347:"SELECT 
`eqp`.EquipmentID AS ID, NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`eqp`.EquipmentName,\'\'),\' | \',IFNULL(`eqp`.ModelNo,\'\')),\' |  | \') AS Name FROM `eqp`
 
 LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )

WHERE `eqp`.EquipmentID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:18:"HazEnergyControlID";a:1:{s:4:"name";s:18:"HazEnergyControlID";}}s:8:"moduleID";s:4:"hzea";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`eqp`.OrganizationID IN (%s)";s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:18:"HazEnergyControlID";O:10:"combofield":26:{s:4:"name";s:18:"HazEnergyControlID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:173:"Hazard Energy Control|A description of the hazardous energy control procedure based on a combination of field values assigned from within the Hazardous Energy Control module";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"hze";s:10:"foreignKey";s:18:"HazEnergyControlID";s:12:"foreignField";s:16:"HazEnergyControl";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:294:"SELECT 
`hze`.HazEnergyControlID AS ID, NULLIF(CONCAT(IFNULL(`hze`.ControlProcTitle,\'\')),\'\') AS Name, `eqpin1`.EquipmentID AS ParentID FROM `hze`
 
 LEFT OUTER JOIN `eqpin` AS eqpin1 
   ON (`hze`.EquipmentInventoryID = `eqpin1`.EquipmentInventoryID )
WHERE hze._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:300:"SELECT 
`hze`.HazEnergyControlID AS ID, NULLIF(CONCAT(IFNULL(`hze`.ControlProcTitle,\'\')),\'\') AS Name, `eqpin1`.EquipmentID AS ParentID FROM `hze`
 
 LEFT OUTER JOIN `eqpin` AS eqpin1 
   ON (`hze`.EquipmentInventoryID = `eqpin1`.EquipmentInventoryID )

WHERE `hze`.HazEnergyControlID = \'/*recordID*/\'";s:11:"parentField";s:11:"EquipmentID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:4:"hzea";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:31:"`eqpin1`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:26:"HZEControlProcedureAssocID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"hzea";s:6:"phrase";s:14:"Energy Control";s:6:"number";i:1;s:6:"Fields";a:5:{s:20:"HZEEquipOrganization";O:9:"viewfield":16:{s:4:"name";s:20:"HZEEquipOrganization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Equipment Organization|The organization associated with equipment to be controlled";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"HZEEquipmentType";O:9:"viewfield":16:{s:4:"name";s:16:"HZEEquipmentType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:217:"Equipment Type|A method of grouping equipment of similar types so that asset protection measures can be assigned to all equipment of the same type and equipment can be easily filtered and associated with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"HZEManufacturer";O:9:"viewfield":16:{s:4:"name";s:15:"HZEManufacturer";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:106:"Manufacturer|The name of the organization that manufacturers the equipment possessing the hazardous energy";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Equipment";O:9:"viewfield":16:{s:4:"name";s:9:"Equipment";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Equipment|A description of the equipment based on a combination of field values assigned from within the Equipment module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:16:"HazEnergyControl";O:9:"viewfield":16:{s:4:"name";s:16:"HazEnergyControl";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:173:"Hazard Energy Control|A description of the hazardous energy control procedure based on a combination of field values assigned from within the Hazardous Energy Control module";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"hzea";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:146:"SELECT 
    count(*) 
FROM `hzea`
   
WHERE hzea._Deleted = 0
   AND `hzea`.RelatedModuleID = \'csp\'
AND `hzea`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:1245:"SELECT 
   `hzea`.HZEControlProcedureAssocID,
`eqpin1`.OrganizationID AS OrganizationID,
`org1`.Name AS HZEEquipOrganization,
`cod1`.Description AS HZEEquipmentType,
`org2`.Name AS HZEManufacturer,
NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`eqpt1`.EquipmentTypeTitle,\'\')),\'\'),\'\'),\' | \',IFNULL(`eqp1`.EquipmentName,\'\'),\' | \',IFNULL(`eqp1`.ModelNo,\'\')),\' |  | \') AS Equipment,
NULLIF(CONCAT(IFNULL(`hze1`.ControlProcTitle,\'\')),\'\') AS HazEnergyControl
FROM `hzea`

   LEFT OUTER JOIN `hze` AS hze1 
   ON (`hzea`.HazEnergyControlID = `hze1`.HazEnergyControlID )
   LEFT OUTER JOIN `eqpin` AS eqpin1 
   ON (`hze1`.EquipmentInventoryID = `eqpin1`.EquipmentInventoryID )
   LEFT OUTER JOIN `eqp` AS eqp1 
   ON (`eqpin1`.EquipmentID = `eqp1`.EquipmentID )
   LEFT OUTER JOIN `org` AS org1 
   ON (`eqp1`.OrganizationID = `org1`.OrganizationID )
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`eqp1`.EquipmentTypeID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'65\')
   LEFT OUTER JOIN `org` AS org2 
   ON (`eqp1`.ManufacturerID = `org2`.OrganizationID )
   LEFT OUTER JOIN `eqpt` AS eqpt1 
   ON (`eqp1`.EquipmentTypeID = `eqpt1`.EquipmentTypeID )
WHERE hzea._Deleted = 0
AND `hzea`.RelatedModuleID = \'csp\'
AND `hzea`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:15:"ConfinedSpaceID";s:8:"PKFields";a:1:{i:0;s:26:"HZEControlProcedureAssocID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"csp";}}');


    /**guidanceGrid**/

    $PKField = 'ConfinedSpaceID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "JobAnalyses";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `csp`.ConfinedSpaceID,
   `csp`.ConfinedSpaceTypeID,
   NULLIF(CONCAT(IFNULL(`cspt1`.ConfinedSpaceTitle,'')),'') AS ConfinedSpaceType,
   `csp`.ConfinedSpaceTitle,
   `cspt1`.ConfinedSpaceDesc AS ConfinedSpaceDescGuide,
   `csp`.ConfinedSpaceDesc,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `ppl1`.DisplayName AS PersonAccountable,
   `dat1`.RelatedDate AS LastReviewDate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`cspt1`.ConfinedSpaceTitle,'')),''),''),' | ',IFNULL(`csp`.ConfinedSpaceTitle,''),' | ',IFNULL(`org1`.Name,'')),' |  | ') AS RecordLabel,
   `csp`.OrganizationID
FROM `csp`
   
     LEFT OUTER JOIN `cspt` AS cspt1 
   ON (`csp`.ConfinedSpaceTypeID = `cspt1`.ConfinedSpaceTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`csp`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`csp`.ConfinedSpaceID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'csp'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`csp`.ConfinedSpaceID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'csp'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '152')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`csp`.ConfinedSpaceID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'csp'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '20')
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   csp.ConfinedSpaceID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Confined Space");
        $screenPhrase = gettext("Energy|Associate energy control procedures with the confined space");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Confined Space");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ConfinedSpaceID' => gettext("Record ID|An automatically assigned number used to track confined spaces throughout the organization"),
   'ConfinedSpaceTypeID' => gettext("Confined Space Type|A combined field used to describe this confined space type when associating it with other records"),
   'ConfinedSpaceType' => gettext("Confined Space Type|A combined field used to describe this confined space type when associating it with other records"),
   'ConfinedSpaceTitle' => gettext("Title|A word or short phrase used to identify this specific confined space"),
   'ConfinedSpaceDescGuide' => gettext("Guidance Description|A brief but thorough description of the confined space type"),
   'ConfinedSpaceDesc' => gettext("Description|A detailed description of this confined space and any special characteristics associated with entry or egress"),
   'Organization' => gettext("Organization|The name of the organization where the confined space exists"),
   'Location' => gettext("Location|Specific area within the facility where the confined space is located"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the risks associated with this local confined space"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the confined space")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Confined Spaces"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Confined Space") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a confined space") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Checklist|Associate checklist items with the confined space") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the confined space") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the confined space") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the confined space") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the confined space") );
      $tempTabs['Chemicals'] = array( "edit.php?scr=Chemicals&$tabsQS", gettext("Chemicals|Associate chemicals encountered within the confined space") );
      $tempTabs['EnergyControl'] = array( "", gettext("Energy|Associate energy control procedures with the confined space") );
      $tempTabs['JobAnalyses'] = array( "edit.php?scr=JobAnalyses&$tabsQS", gettext("Job Analyses|Associate job analyses with the confined space") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the confined space") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the confined space") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the confined space") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the confined space") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['EnergyControl'] = array( "", gettext("New Space") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>