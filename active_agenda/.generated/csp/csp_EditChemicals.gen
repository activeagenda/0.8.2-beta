<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:10:{s:15:"ConfinedSpaceID";O:9:"viewfield":16:{s:4:"name";s:15:"ConfinedSpaceID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:100:"Record ID|An automatically assigned number used to track confined spaces throughout the organization";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"ConfinedSpaceTypeID";O:14:"invisiblefield":11:{s:4:"name";s:19:"ConfinedSpaceTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:17:"ConfinedSpaceType";O:9:"viewfield":16:{s:4:"name";s:17:"ConfinedSpaceType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:117:"Confined Space Type|A combined field used to describe this confined space type when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:18:"ConfinedSpaceTitle";O:9:"viewfield":16:{s:4:"name";s:18:"ConfinedSpaceTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:74:"Title|A word or short phrase used to identify this specific confined space";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:22:"ConfinedSpaceDescGuide";O:9:"viewfield":16:{s:4:"name";s:22:"ConfinedSpaceDescGuide";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:80:"Guidance Description|A brief but thorough description of the confined space type";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"ConfinedSpaceDesc";O:9:"viewfield":16:{s:4:"name";s:17:"ConfinedSpaceDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:121:"Description|A detailed description of this confined space and any special characteristics associated with entry or egress";s:8:"dataType";s:4:"text";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Organization|The name of the organization where the confined space exists";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Location";O:9:"viewfield":16:{s:4:"name";s:8:"Location";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:78:"Location|Specific area within the facility where the confined space is located";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:130:"Person Accountable|The individual assigned primary accountability for managing the risks associated with this local confined space";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:14:"LastReviewDate";O:9:"viewfield":16:{s:4:"name";s:14:"LastReviewDate";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Last Review|The date of the last formal review of the confined space";s:8:"dataType";s:4:"date";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:6:"center";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("Confined Space");

//field value array
$data = array(
        'ConfinedSpaceID' => '',
         'ConfinedSpaceTypeID' => '',
         'ConfinedSpaceType' => '',
         'ConfinedSpaceTitle' => '',
         'ConfinedSpaceDescGuide' => '',
         'ConfinedSpaceDesc' => '',
         'Organization' => '',
         'Location' => '',
         'PersonAccountable' => '',
         'LastReviewDate' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:654:"SELECT 
   `chma`.ChemicalAssocID,
   NULLIF(CONCAT(IFNULL(`chm1`.CommonName,\'\'),\' | CAS: \',IFNULL(`chm1`.CASNumber,\'\')),\' | CAS: \') AS Chemical,
   `chma`.ChemicalID,
   `chm1`.ProductName AS ProductName,
   `chm1`.CommonName AS CommonName,
   `chm1`.ChemicalName AS ChemicalName,
   `chm1`.CASNumber AS CASNumber,
   `chma`.MannerAffected,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `chma`
   
     LEFT OUTER JOIN `chm` AS chm1 
   ON (`chma`.ChemicalID = `chm1`.ChemicalID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`chma`.RelatedRecordID = rdc1.RecordID AND `chma`.RelatedModuleID = rdc1.ModuleID)
WHERE
   chma.ChemicalAssocID=\'/**RowID**/\'";s:9:"getRowSQL";s:457:"SELECT 
   `chma`.ChemicalAssocID,
   `chm1`.CommonName AS CommonName,
   `chm1`.ChemicalName AS ChemicalName,
   `chm1`.CASNumber AS CASNumber,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `chma`
   
     LEFT OUTER JOIN `chm` AS chm1 
   ON (`chma`.ChemicalID = `chm1`.ChemicalID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`chma`.RelatedRecordID = rdc1.RecordID AND `chma`.RelatedModuleID = rdc1.ModuleID)
WHERE
   chma.ChemicalAssocID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:7:{s:15:"ChemicalAssocID";O:14:"invisiblefield":11:{s:4:"name";s:15:"ChemicalAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Record ID|An automatically assigned number used to track chemical associations with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:10:"ChemicalID";O:10:"combofield":26:{s:4:"name";s:10:"ChemicalID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:119:"Chemical|A description of the chemical based on a combination of field values assigned from within the Chemicals module";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"chm";s:10:"foreignKey";s:10:"ChemicalID";s:12:"foreignField";s:8:"Chemical";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:186:"SELECT 
`chm`.ChemicalID AS ID, NULLIF(CONCAT(IFNULL(`chm`.CommonName,\'\'),\' | CAS: \',IFNULL(`chm`.CASNumber,\'\')),\' | CAS: \') AS Name FROM `chm`
WHERE chm._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:184:"SELECT 
`chm`.ChemicalID AS ID, NULLIF(CONCAT(IFNULL(`chm`.CommonName,\'\'),\' | CAS: \',IFNULL(`chm`.CASNumber,\'\')),\' | CAS: \') AS Name FROM `chm`

WHERE `chm`.ChemicalID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:4:{s:11:"ProductName";a:1:{s:4:"name";s:11:"ProductName";}s:10:"CommonName";a:1:{s:4:"name";s:10:"CommonName";}s:12:"ChemicalName";a:1:{s:4:"name";s:12:"ChemicalName";}s:9:"CASNumber";a:1:{s:4:"name";s:9:"CASNumber";}}s:8:"moduleID";s:4:"chma";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";s:28:"`chm`.OrganizationID IN (%s)";s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}s:11:"ProductName";O:9:"viewfield":16:{s:4:"name";s:11:"ProductName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:131:"Product Name|A name assigned to a chemical or chemical compound by its manufacturer for product marketing and trademarking purposes";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ChemicalID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:10:"CommonName";O:9:"viewfield":16:{s:4:"name";s:10:"CommonName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:235:"Common Name|A common name assigned to a chemical by the organization using it. Common names are more easily recognized than chemical names and can include code names used by an organization to quickly and accurately identify a chemical";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ChemicalID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:12:"ChemicalName";O:9:"viewfield":16:{s:4:"name";s:12:"ChemicalName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Chemical Name|The technical name for a chemical";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ChemicalID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:9:"CASNumber";O:9:"viewfield":16:{s:4:"name";s:9:"CASNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:168:"CAS Number|Chemical Abstracts Service Registry Number. CAS Registry Numbers (often referred to as CAS RNs or CAS Numbers) are unique identifiers for chemical substances";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";s:10:"ChemicalID";s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:1;}s:14:"MannerAffected";O:9:"memofield":15:{s:4:"name";s:14:"MannerAffected";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:82:"Manner Affected|The manner in which the related record is affected by the chemical";s:8:"dataType";s:4:"text";s:8:"validate";s:12:"noValidation";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:15:"ChemicalAssocID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:4:"chma";s:6:"phrase";s:9:"Chemicals";s:6:"number";i:1;s:6:"Fields";a:4:{s:15:"ChemicalAssocID";O:14:"invisiblefield":11:{s:4:"name";s:15:"ChemicalAssocID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:99:"Record ID|An automatically assigned number used to track chemical associations with related records";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:10:"CommonName";O:9:"viewfield":16:{s:4:"name";s:10:"CommonName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:235:"Common Name|A common name assigned to a chemical by the organization using it. Common names are more easily recognized than chemical names and can include code names used by an organization to quickly and accurately identify a chemical";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"ChemicalName";O:9:"viewfield":16:{s:4:"name";s:12:"ChemicalName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:47:"Chemical Name|The technical name for a chemical";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"CASNumber";O:9:"viewfield":16:{s:4:"name";s:9:"CASNumber";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:168:"CAS Number|Chemical Abstracts Service Registry Number. CAS Registry Numbers (often referred to as CAS RNs or CAS Numbers) are unique identifiers for chemical substances";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:4:"chma";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:146:"SELECT 
    count(*) 
FROM `chma`
   
WHERE chma._Deleted = 0
   AND `chma`.RelatedModuleID = \'csp\'
AND `chma`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:501:"SELECT 
   `chma`.ChemicalAssocID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`chm1`.CommonName AS CommonName,
`chm1`.ChemicalName AS ChemicalName,
`chm1`.CASNumber AS CASNumber
FROM `chma`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`chma`.RelatedRecordID = rdc1.RecordID AND `chma`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `chm` AS chm1 
   ON (`chma`.ChemicalID = `chm1`.ChemicalID )
WHERE chma._Deleted = 0
AND `chma`.RelatedModuleID = \'csp\'
AND `chma`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:15:"ConfinedSpaceID";s:8:"PKFields";a:1:{i:0;s:15:"ChemicalAssocID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"csp";}}');


    /**guidanceGrid**/

    $PKField = 'ConfinedSpaceID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "EnergyControl";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `csp`.ConfinedSpaceID,
   `csp`.ConfinedSpaceTypeID,
   NULLIF(CONCAT(IFNULL(`cspt1`.ConfinedSpaceTitle,'')),'') AS ConfinedSpaceType,
   `csp`.ConfinedSpaceTitle,
   `cspt1`.ConfinedSpaceDesc AS ConfinedSpaceDescGuide,
   `csp`.ConfinedSpaceDesc,
   `org1`.Name AS Organization,
   NULLIF(CONCAT_WS(', ',`bui1`.BuildingName,`buir1`.RoomName,`orgl1`.LocationName),'') AS Location,
   `ppl1`.DisplayName AS PersonAccountable,
   `dat1`.RelatedDate AS LastReviewDate,
   NULLIF(CONCAT(IFNULL(NULLIF(CONCAT(IFNULL(`cspt1`.ConfinedSpaceTitle,'')),''),''),' | ',IFNULL(`csp`.ConfinedSpaceTitle,''),' | ',IFNULL(`org1`.Name,'')),' |  | ') AS RecordLabel,
   `csp`.OrganizationID
FROM `csp`
   
     LEFT OUTER JOIN `cspt` AS cspt1 
   ON (`csp`.ConfinedSpaceTypeID = `cspt1`.ConfinedSpaceTypeID )
     LEFT OUTER JOIN `org` AS org1 
   ON (`csp`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `orgla` AS orgla1 
    ON (`csp`.ConfinedSpaceID = `orgla1`.SourceRecordID 
     AND `orgla1`.SourceModuleID = 'csp'
     AND `orgla1`._Deleted = 0)
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`csp`.ConfinedSpaceID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'csp'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '152')
     LEFT OUTER JOIN `dat` AS dat1 
    ON (`csp`.ConfinedSpaceID = `dat1`.SourceRecordID 
     AND `dat1`.SourceModuleID = 'csp'
     AND `dat1`._Deleted = 0
     AND `dat1`.DateDescriptorID = '20')
     LEFT OUTER JOIN `orgl` AS orgl1 
   ON (`orgla1`.LocationID = `orgl1`.LocationID )
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `buir` AS buir1 
   ON (`orgl1`.RoomID = `buir1`.RoomID )
     LEFT OUTER JOIN `bui` AS bui1 
   ON (`buir1`.BuildingID = `bui1`.BuildingID )
WHERE
   csp.ConfinedSpaceID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("Confined Space");
        $screenPhrase = gettext("Chemicals|Associate chemicals encountered within the confined space");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("Confined Space");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'ConfinedSpaceID' => gettext("Record ID|An automatically assigned number used to track confined spaces throughout the organization"),
   'ConfinedSpaceTypeID' => gettext("Confined Space Type|A combined field used to describe this confined space type when associating it with other records"),
   'ConfinedSpaceType' => gettext("Confined Space Type|A combined field used to describe this confined space type when associating it with other records"),
   'ConfinedSpaceTitle' => gettext("Title|A word or short phrase used to identify this specific confined space"),
   'ConfinedSpaceDescGuide' => gettext("Guidance Description|A brief but thorough description of the confined space type"),
   'ConfinedSpaceDesc' => gettext("Description|A detailed description of this confined space and any special characteristics associated with entry or egress"),
   'Organization' => gettext("Organization|The name of the organization where the confined space exists"),
   'Location' => gettext("Location|Specific area within the facility where the confined space is located"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for managing the risks associated with this local confined space"),
   'LastReviewDate' => gettext("Last Review|The date of the last formal review of the confined space")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of Confined Spaces"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a Confined Space") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about a confined space") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Checklist|Associate checklist items with the confined space") );
      $tempTabs['CostExposures'] = array( "edit.php?scr=CostExposures&$tabsQS", gettext("Cost Exposures|Associate cost exposures with the confined space") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the confined space") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the confined space") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the confined space") );
      $tempTabs['Chemicals'] = array( "", gettext("Chemicals|Associate chemicals encountered within the confined space") );
      $tempTabs['EnergyControl'] = array( "edit.php?scr=EnergyControl&$tabsQS", gettext("Energy|Associate energy control procedures with the confined space") );
      $tempTabs['JobAnalyses'] = array( "edit.php?scr=JobAnalyses&$tabsQS", gettext("Job Analyses|Associate job analyses with the confined space") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities with the confined space") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the confined space") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate file retention methods with the confined space") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the confined space") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['Chemicals'] = array( "", gettext("New Space") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>