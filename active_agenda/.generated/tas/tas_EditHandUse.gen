<?php
/**
 *  Template file for generated files (alt. a generated file)
 *
 *  PHP version 4
 *
 *
 * LICENSE NOTE:
 *
 * Copyright  2003-2007 Active Agenda Inc., All Rights Reserved.
 *
 * Unless explicitly acquired and licensed from Licensor under a "commercial license",
 * the contents of this file are subject to the Reciprocal Public License ("RPL")
 * Version 1.4, or subsequent versions as allowed by the RPL,and You may not copy
 * or use this file in either source code or executable form, except in compliance
 * with the terms and conditions of the RPL. You may obtain a copy of the RPL from
 * Active Agenda Inc. at http://www.activeagenda.net/license.
 *
 * All software distributed under the Licenses is provided strictly on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND ACTIVE AGENDA
 * INC. HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY 
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT,
 * OR NON-INFRINGEMENT. See the Licenses for specific language governing rights and
 * limitations under the Licenses.
 *
 *
 * @author         Mattias Thorslund <mthorslund@activeagenda.net>
 * @copyright      2003-2007 Active Agenda Inc.
 * @license        http://www.activeagenda.net/license  RPL 1.4
 * @version        SVN: $Revision: 499 $
 * @last-modified  SVN: $Date: 2007-02-16 13:43:40 -0800 (Fri, 16 Feb 2007) $
 */

/**CUSTOM_CODE|classdef**/

//list of objects containing the field information
$fields = unserialize('a:11:{s:6:"TaskID";O:9:"viewfield":16:{s:4:"name";s:6:"TaskID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:97:"Record ID|A unique number assigned to each task so that tasks can be associated with job analyses";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"TaskTypeID";O:14:"invisiblefield":11:{s:4:"name";s:10:"TaskTypeID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"Organization";O:9:"viewfield":16:{s:4:"name";s:12:"Organization";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:62:"Organization|The organization associated with the general task";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"Function";O:9:"viewfield":16:{s:4:"name";s:8:"Function";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:88:"Function|The business purpose of the department responsible for the task to be performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:17:"PersonAccountable";O:9:"viewfield":16:{s:4:"name";s:17:"PersonAccountable";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:215:"Person Accountable|The individual assigned primary accountability for ensuring that the general task has been reviewed and all associated controls, equipment are assigned and a functional analysis has been performed";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:12:"TaskCategory";O:9:"viewfield":16:{s:4:"name";s:12:"TaskCategory";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:61:"Category|A broad categoy used to group tasks of similar types";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskType";O:9:"viewfield":16:{s:4:"name";s:8:"TaskType";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:64:"Task Type|The type of general task performed by the organization";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskName";O:9:"viewfield":16:{s:4:"name";s:8:"TaskName";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:73:"Task|A descriptive name of the general task performed by the organization";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:8:"TaskDesc";O:9:"viewfield":16:{s:4:"name";s:8:"TaskDesc";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:208:"Task Description|A detailed description of the general task performed by the organization. The detailed description will be very important to others interested in assigning this task to different job analyses";s:8:"dataType";s:12:"varchar(255)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:19:"CriticalControlTask";O:9:"viewfield":16:{s:4:"name";s:19:"CriticalControlTask";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:141:"Critical Control Task|Whether this general task is considered a critical control as it relates to a business process or product specification";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"TaskStatus";O:9:"viewfield":16:{s:4:"name";s:10:"TaskStatus";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:40:"Status|Status of the task review process";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}');

$hasEditableFields = false;


$singularRecordName = gettext("General Task");

//field value array
$data = array(
        'TaskID' => '',
         'TaskTypeID' => '',
         'Organization' => '',
         'Function' => '',
         'PersonAccountable' => '',
         'TaskCategory' => '',
         'TaskType' => '',
         'TaskName' => '',
         'TaskDesc' => '',
         'CriticalControlTask' => '',
         'TaskStatus' => ''
    );
foreach($data as $fieldName=>$value){
    $data[$fieldName] = $_POST[$fieldName];
}



//list of grids
   $grids = array();
   $grids[1] = unserialize('O:8:"editgrid":32:{s:9:"insertSQL";N;s:9:"updateSQL";N;s:9:"deleteSQL";N;s:6:"logSQL";N;s:10:"getFormSQL";s:908:"SELECT 
   `tashu`.HandUseID,
   `tashu`.HandUseTitle,
   `cod1`.Description AS UseofHands,
   `tashu`.UseofHandsID,
   `cod2`.Description AS TimeUnitCategory,
   `uts1`.UnitCategoryID AS TimeUnitCategoryID,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
   `tashu`.TimeUnitID,
   `tashu`.HandUseDuration,
   `tashu`.Frequency,
   `tashu`.HandUseDesc,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `tashu`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tashu`.UseofHandsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'248\')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`tashu`.TimeUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`tashu`.RelatedRecordID = rdc1.RecordID AND `tashu`.RelatedModuleID = rdc1.ModuleID)
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`uts1`.UnitCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = \'37\')
WHERE
   tashu.HandUseID=\'/**RowID**/\'";s:9:"getRowSQL";s:628:"SELECT 
   `tashu`.HandUseID,
   `tashu`.HandUseTitle,
   `cod1`.Description AS UseofHands,
   NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
   `tashu`.HandUseDuration,
   `tashu`.Frequency,
   `rdc1`.OrganizationID AS OwnerOrganizationID
FROM `tashu`
   
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tashu`.UseofHandsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'248\')
     LEFT OUTER JOIN `uts` AS uts1 
   ON (`tashu`.TimeUnitID = `uts1`.UnitID )
     LEFT OUTER JOIN `rdc` AS rdc1 ON (`tashu`.RelatedRecordID = rdc1.RecordID AND `tashu`.RelatedModuleID = rdc1.ModuleID)
WHERE
   tashu.HandUseID=\'/**RowID**/\'";s:12:"remoteFields";N;s:11:"hasGridForm";b:1;s:10:"FormFields";a:6:{s:9:"HandUseID";O:14:"invisiblefield":11:{s:4:"name";s:9:"HandUseID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Hand Use ID|An automatically assigned number used to associate hand use activities with organizational tasks";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"HandUseTitle";O:9:"editfield":14:{s:4:"name";s:12:"HandUseTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Hand Use Title|A short phrase used to describe the hand use requirement associated with the task";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:2:"75";s:9:"maxLength";s:3:"128";s:5:"align";s:4:"left";}s:12:"UseofHandsID";O:14:"codecombofield":27:{s:4:"name";s:12:"UseofHandsID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Use of Hands|The specific type of hand use associated with this task";s:8:"dataType";s:3:"int";s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:18:"CodeTypeID = \'248\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:142:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'248\'
 ORDER BY SortOrder, Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"tashu";s:8:"findMode";s:4:"text";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;s:10:"codeTypeID";s:3:"248";}s:15:"HandUseDuration";O:9:"editfield":14:{s:4:"name";s:15:"HandUseDuration";s:10:"parentName";N;s:6:"Fields";a:3:{s:4:"Self";N;s:18:"TimeUnitCategoryID";O:10:"combofield":26:{s:4:"name";s:18:"TimeUnitCategoryID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"cod";s:10:"foreignKey";s:6:"CodeID";s:12:"foreignField";s:11:"Description";s:13:"listCondition";s:17:"CodeTypeID = \'37\'";s:14:"listConditions";a:0:{}s:3:"SQL";s:130:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`
WHERE cod._Deleted = 0
 AND CodeTypeID = \'37\'
 ORDER BY Name, ID;";s:6:"getSQL";s:101:"SELECT 
`cod`.CodeID AS ID, `cod`.Description AS Name FROM `cod`

WHERE `cod`.CodeID = \'/*recordID*/\'";s:11:"parentField";N;s:21:"parentListModuleField";N;s:11:"childFields";a:1:{s:10:"TimeUnitID";a:1:{s:4:"name";s:10:"TimeUnitID";}}s:8:"moduleID";s:5:"tashu";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";N;s:15:"suppressItemAdd";b:0;}s:10:"TimeUnitID";O:10:"combofield":26:{s:4:"name";s:10:"TimeUnitID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";N;s:8:"dataType";N;s:8:"validate";s:16:"RequireSelection";s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:0:"";s:13:"displayFormat";s:0:"";s:9:"isDefault";N;s:12:"foreignTable";s:3:"uts";s:10:"foreignKey";s:6:"UnitID";s:12:"foreignField";s:4:"Unit";s:13:"listCondition";N;s:14:"listConditions";a:0:{}s:3:"SQL";s:168:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`
WHERE uts._Deleted = 0
 ORDER BY Name, ID;";s:6:"getSQL";s:162:"SELECT 
`uts`.UnitID AS ID, NULLIF(CONCAT(IFNULL(`uts`.UnitName,\'\')),\'\') AS Name, `uts`.UnitCategoryID AS ParentID FROM `uts`

WHERE `uts`.UnitID = \'/*recordID*/\'";s:11:"parentField";s:18:"TimeUnitCategoryID";s:21:"parentListModuleField";N;s:11:"childFields";a:0:{}s:8:"moduleID";s:5:"tashu";s:8:"findMode";s:0:"";s:16:"ownerFieldFilter";N;s:12:"defaultValue";s:0:"";s:15:"suppressItemAdd";b:0;}}s:6:"phrase";s:46:"Duration|The duration of the hand use activity";s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:9:"Frequency";O:9:"editfield":14:{s:4:"name";s:9:"Frequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Cycles Per Duration|The frequency of repetitive cycles occurring over the duration of the hand use activity";s:8:"dataType";s:5:"float";s:8:"validate";s:27:"Number notEmpty notNegative";s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"size";s:1:"5";s:9:"maxLength";s:1:"5";s:5:"align";s:4:"left";}s:11:"HandUseDesc";O:9:"memofield":15:{s:4:"name";s:11:"HandUseDesc";s:10:"parentName";s:0:"";s:6:"Fields";a:0:{}s:6:"phrase";s:84:"Hand Use Description|A detailed description of the hand use associated with the task";s:8:"dataType";s:4:"text";s:8:"validate";s:8:"notEmpty";s:7:"invalid";N;s:8:"formName";s:8:"mainForm";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:4:"rows";s:1:"5";s:4:"cols";s:2:"75";s:14:"conditionField";N;s:14:"conditionValue";N;}}s:10:"selectedID";N;s:7:"encType";s:0:"";s:16:"IDTranslationSQL";s:0:"";s:20:"listExtendedConditon";s:0:"";s:7:"PKField";s:9:"HandUseID";s:19:"showGlobalSMRecords";b:0;s:13:"orderByFields";a:0:{}s:18:"dataCollectionForm";b:1;s:8:"moduleID";s:5:"tashu";s:6:"phrase";s:8:"Hand Use";s:6:"number";i:1;s:6:"Fields";a:5:{s:9:"HandUseID";O:14:"invisiblefield":11:{s:4:"name";s:9:"HandUseID";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:108:"Hand Use ID|An automatically assigned number used to associate hand use activities with organizational tasks";s:8:"dataType";s:3:"int";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";N;s:13:"displayFormat";N;s:9:"isDefault";N;}s:12:"HandUseTitle";O:9:"viewfield":16:{s:4:"name";s:12:"HandUseTitle";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:96:"Hand Use Title|A short phrase used to describe the hand use requirement associated with the task";s:8:"dataType";s:12:"varchar(128)";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:10:"UseofHands";O:9:"viewfield":16:{s:4:"name";s:10:"UseofHands";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:68:"Use of Hands|The specific type of hand use associated with this task";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:4:"left";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:15:"HandUseDuration";O:9:"viewfield":16:{s:4:"name";s:15:"HandUseDuration";s:10:"parentName";N;s:6:"Fields";a:1:{s:8:"TimeUnit";O:9:"viewfield":16:{s:4:"name";s:8:"TimeUnit";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:87:"Unit|A combined field used to describe this unit when associating it with other records";s:8:"dataType";N;s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:7:"justify";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:6:"phrase";s:46:"Duration|The duration of the hand use activity";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}s:9:"Frequency";O:9:"viewfield":16:{s:4:"name";s:9:"Frequency";s:10:"parentName";N;s:6:"Fields";a:0:{}s:6:"phrase";s:107:"Cycles Per Duration|The frequency of repetitive cycles occurring over the duration of the hand use activity";s:8:"dataType";s:5:"float";s:8:"validate";N;s:7:"invalid";N;s:8:"formName";s:5:"tashu";s:9:"gridAlign";s:5:"right";s:13:"displayFormat";N;s:9:"isDefault";N;s:9:"linkField";N;s:11:"parentField";N;s:15:"displayDecimals";N;s:14:"roundingMethod";N;s:10:"needsReGet";b:0;}}s:8:"countSQL";s:150:"SELECT 
    count(*) 
FROM `tashu`
   
WHERE tashu._Deleted = 0
   AND `tashu`.RelatedModuleID = \'tas\'
AND `tashu`.RelatedRecordID = \'/**RecordID**/\'
";s:7:"listSQL";s:672:"SELECT 
   `tashu`.HandUseID,
`rdc1`.OrganizationID AS OwnerOrganizationID,
`tashu`.HandUseTitle,
`cod1`.Description AS UseofHands,
NULLIF(CONCAT(IFNULL(`uts1`.UnitName,\'\')),\'\') AS TimeUnit,
`tashu`.HandUseDuration,
`tashu`.Frequency
FROM `tashu`

   LEFT OUTER JOIN `rdc` AS rdc1 ON (`tashu`.RelatedRecordID = rdc1.RecordID AND `tashu`.RelatedModuleID = rdc1.ModuleID)
   LEFT OUTER JOIN `cod` AS cod1 
   ON (`tashu`.UseofHandsID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = \'248\')
   LEFT OUTER JOIN `uts` AS uts1 
   ON (`tashu`.TimeUnitID = `uts1`.UnitID )
WHERE tashu._Deleted = 0
AND `tashu`.RelatedModuleID = \'tas\'
AND `tashu`.RelatedRecordID = \'/**RecordID**/\'

";s:12:"listExtended";b:0;s:12:"ParentRowSQL";N;s:8:"localKey";s:15:"RelatedRecordID";s:9:"parentKey";s:6:"TaskID";s:8:"PKFields";a:1:{i:0;s:9:"HandUseID";}s:13:"formatOptions";a:0:{}s:10:"fieldTypes";a:0:{}s:4:"name";N;s:10:"conditions";a:1:{s:15:"RelatedModuleID";s:3:"tas";}}');


    /**guidanceGrid**/

    $PKField = 'TaskID';

    $ownerField = 'OrganizationID';


    /**disbleGlobalModules**/

    //handle any posted grid form
   $content .= $grids[1]->handleForm();


    $tabsQSargs = $qsArgs;
    unset($tabsQSargs['scr']);
    unset($tabsQSargs['gid']);
    unset($tabsQSargs['grw']);
    $tabsQS = MakeQS($tabsQSargs);
    $nextScreen = "Lifting";
    $nextlink = "edit.php?$tabsQS&scr=$nextScreen";
    $form_enctype = '';

    /**CUSTOM_CODE|init**/

    $getSQL = "SELECT 
   `tas`.TaskID,
   `tas`.TaskTypeID,
   `org1`.Name AS Organization,
   `cod1`.Description AS Function,
   `ppl1`.DisplayName AS PersonAccountable,
   `cod2`.Description AS TaskCategory,
   NULLIF(CONCAT(IFNULL(`tast1`.TaskTypeTitle,'')),'') AS TaskType,
   `tas`.TaskName,
   `tas`.TaskDesc,
   `cod3`.Description AS CriticalControlTask,
   `cod4`.Description AS TaskStatus,
   NULLIF(CONCAT(IFNULL(`tas`.TaskName,''),' | ',IFNULL(`org1`.Name,'')),' | ') AS RecordLabel,
   `tas`.OrganizationID
FROM `tas`
   
     LEFT OUTER JOIN `org` AS org1 
   ON (`tas`.OrganizationID = `org1`.OrganizationID )
     LEFT OUTER JOIN `cod` AS cod1 
   ON (`tas`.FunctionID = `cod1`.CodeID 
     AND `cod1`.CodeTypeID = '4')
     LEFT OUTER JOIN `acc` AS acc1 
    ON (`tas`.TaskID = `acc1`.SourceRecordID 
     AND `acc1`.SourceModuleID = 'tas'
     AND `acc1`._Deleted = 0
     AND `acc1`.AccountabilityDescriptorID = '85')
     LEFT OUTER JOIN `tast` AS tast1 
   ON (`tas`.TaskTypeID = `tast1`.TaskTypeID )
     LEFT OUTER JOIN `cod` AS cod3 
   ON (`tas`.CriticalControlTaskID = `cod3`.CodeID 
     AND `cod3`.CodeTypeID = '129')
     LEFT OUTER JOIN `cod` AS cod4 
   ON (`tas`.TaskStatusID = `cod4`.CodeID 
     AND `cod4`.CodeTypeID = '244')
     LEFT OUTER JOIN `ppl` AS ppl1 
   ON (`acc1`.PersonAccountableID = `ppl1`.PersonID )
     LEFT OUTER JOIN `cod` AS cod2 
   ON (`tast1`.TaskCategoryID = `cod2`.CodeID 
     AND `cod2`.CodeTypeID = '45')
WHERE
   tas.TaskID='/**RecordID**/'";


    /*populates screen messages differently depending on whether the record exists in db or not*/
    if ($recordID > 0) {
        $existing = true;

        $pageTitle = gettext("General Task");
        $screenPhrase = gettext("Hands|Associate hand use requirements with the general task");

        /**CUSTOM_CODE|before_get**/

        //retrieve record
        /**SQL|GET_BEGIN**/
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        /**SQL|GET_END**/
        
        if(count($r) > 0) {

            //populate data array, combining POSTed data with DB record:
            //POST data takes precedence
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }

        } else {

            $messages[] = array('e', gettext("ERROR: Empty query result."));

        }

        /**CUSTOM_CODE|get**/
    } else {
        //inserting a record
        $existing = false;
        $pageTitle = gettext("General Tasks");
        /**CUSTOM_CODE|new**/
    }

    //check if user has permission to edit record
    $allowEdit = $User->CheckEditScreenPermission();
    //if not, it terminates and display error msg.


    //phrases for field names, in field order
    $phrases = array(
   'TaskID' => gettext("Record ID|A unique number assigned to each task so that tasks can be associated with job analyses"),
   'TaskTypeID' => gettext("Task Type|The type of general task performed by the organization"),
   'Organization' => gettext("Organization|The organization associated with the general task"),
   'Function' => gettext("Function|The business purpose of the department responsible for the task to be performed"),
   'PersonAccountable' => gettext("Person Accountable|The individual assigned primary accountability for ensuring that the general task has been reviewed and all associated controls, equipment are assigned and a functional analysis has been performed"),
   'TaskCategory' => gettext("Category|A broad categoy used to group tasks of similar types"),
   'TaskType' => gettext("Task Type|The type of general task performed by the organization"),
   'TaskName' => gettext("Task|A descriptive name of the general task performed by the organization"),
   'TaskDesc' => gettext("Task Description|A detailed description of the general task performed by the organization. The detailed description will be very important to others interested in assigning this task to different job analyses"),
   'CriticalControlTask' => gettext("Critical Control Task|Whether this general task is considered a critical control as it relates to a business process or product specification"),
   'TaskStatus' => gettext("Status|Status of the task review process")
   );


    //if the form was posted by clicking the Save button
    if(!empty($_POST['Save'])){
        

        /**-remove_begin-**/
        //only executed on screens that need it: have ViewField with Update, or Calculated/Summary fields
        $r = $dbh->getAll(str_replace('/**RecordID**/', $recordID, $getSQL), DB_FETCHMODE_ASSOC);
        dbErrorCheck($r);
        if(count($r) > 0) {
            foreach($r[0] as $fieldName=>$dbValue){
                //(checking for gridnum avoids interference with any posted edit grid)
                if (empty($_POST['gridnum']) && isset($_POST[$fieldName])){
                    $data[$fieldName] = $_POST[$fieldName];
                } else {
                    $data[$fieldName] = $dbValue;
                }
            }
        } else {
            $messages[] = array('e', gettext("Error: Empty query result."));
        }
        /**-remove_end-**/
       
        //note: assumes all messages up til this point were errors
        if (count($messages) == 0){
            //add success message
            if ($existing){
                $messages[] = array('m', gettext("The record was updated successfully."));
            } else {
                $messages[] = array('m', gettext("The record was added successfully."));
            }
        }
    }
    /**SQL|DELETE_BEGIN**/
    if(!empty($_POST['Delete'])){

        $dh = GetDataHandler($ModuleID);
        $result = $dh->deleteRow($recordID);

        $deletelink = "list.php?$tabsQS";
        
        //redirect to list screen
        header("Location:" . $deletelink);
        exit;
        
    }
    /**SQL|DELETE_END**/
    
    /**CUSTOM_CODE|after_save**/

    //moved down from above
    $qs = MakeQS($qsArgs);

    //List tab
    $tabs['List'] = Array("list.php?$tabsQS", gettext("List|View the list of General Tasks"));

    //setting up tabs:

    //target for FORMs
    $targetlink = "edit.php?$qs";

    //formatting that depends on whether the record exists or not
    if($existing){
        //delete button only appears on the first EditScreen.
        $deletelink = "";
        //link for Cancel button
        $cancellink = "view.php?$tabsQS";

              $tempTabs['View'] = array( "view.php?scr=View&$tabsQS", gettext("View|View summary information about").' '.gettext("a General Task") );
      $tempTabs['Form'] = array( "edit.php?scr=Form&$tabsQS", gettext("Form|Edit summary information about the general task") );
      $tempTabs['Analyses'] = array( "edit.php?scr=Analyses&$tabsQS", gettext("Analyses|Associate job analyses with the general task") );
      $tempTabs['Hazards'] = array( "edit.php?scr=Hazards&$tabsQS", gettext("Hazards|Associate hazards with the general task") );
      $tempTabs['General'] = array( "edit.php?scr=General&$tabsQS", gettext("Activities|Associate general activities with the general task") );
      $tempTabs['HandUse'] = array( "", gettext("Hands|Associate hand use requirements with the general task") );
      $tempTabs['Lifting'] = array( "edit.php?scr=Lifting&$tabsQS", gettext("Lifting|Associate lifting requirements with the general task") );
      $tempTabs['Carrying'] = array( "edit.php?scr=Carrying&$tabsQS", gettext("Carrying|Associate carrying requirements with the general task") );
      $tempTabs['Documents'] = array( "edit.php?scr=Documents&$tabsQS", gettext("Documents|Associate documents with the general task") );
      $tempTabs['Culture'] = array( "edit.php?scr=Culture&$tabsQS", gettext("Culture|Associate values with the general task") );
      $tempTabs['Regulations'] = array( "edit.php?scr=Regulations&$tabsQS", gettext("Regulations|Associate regulations with the task") );
      $tempTabs['Standards'] = array( "edit.php?scr=Standards&$tabsQS", gettext("Standards|Associate standards with the general task") );
      $tempTabs['BusinessConsequences'] = array( "edit.php?scr=BusinessConsequences&$tabsQS", gettext("Consequences|Associate business consequences with the general task") );
      $tempTabs['AssetProtection'] = array( "edit.php?scr=AssetProtection&$tabsQS", gettext("Audits|Associate audit items with the general task") );
      $tempTabs['Accountability'] = array( "edit.php?scr=Accountability&$tabsQS", gettext("Accountability|Associate participants with ongoing accountabilities for the general task") );
      $tempTabs['Involvement'] = array( "edit.php?scr=Involvement&$tabsQS", gettext("Involvement|Associate participants involved with the general task") );
      $tempTabs['FileRetention'] = array( "edit.php?scr=FileRetention&$tabsQS", gettext("Files|Associate physical files and retention methods with the general task") );
      $tempTabs['BestPractices'] = array( "edit.php?scr=BestPractices&$tabsQS", gettext("Best Practices|Associate best practices with the general task") , 'bpc');
$tabs = array_merge($tabs, $tempTabs);

    } else {
        $deletelink = "";
        //link for Cancel button
        $cancellink = "list.php?$tabsQS";

              $tabs['HandUse'] = array( "", gettext("New General Task") );


    }

    /**CUSTOM_CODE|form**/

    $content = '';
    foreach($fields as $key => $field){
        if (!$field->isSubField()){
            $content .= $field->render($data, $phrases);
        }
    }

    $content = renderForm($content, $targetlink, $deletelink, $cancellink, $nextScreen, $form_enctype, $ModuleID, $hasEditableFields);

    //insert code to enable calendar controls
    /**dateFields**/
    
    /**CUSTOM_CODE|after_form**/

    //display edit grids here
foreach($grids as $gridID => $grid){
   $content .= $grid->render('edit.php', $qsArgs);
}


    /**CUSTOM_CODE|after_grids**/
    
    $recordLabelField = $data['RecordLabel'];
?>